#! @BASH@
# -*- mode: Sh;-*-

#  NewMadeleine
#  Copyright (C) 2015-2016 (see AUTHORS file)
# 
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or (at
#  your option) any later version.
# 
#  This program is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  General Public License for more details.

export LC_ALL=C
unset LANGUAGE
unset LANG

out=png

usage() {
    echo "# usage: ${0} [--pdf|--png|--svg|--canvas] <file>" >&2
    }

while [ "x${1}" != "x" ]; do
    case "$1" in
	--pdf|--png|--svg|--canvas)
	    out=$( echo "$1" | sed 's/^--//' )
	    ;;
	-h|--help)
	    usage
	    exit
	    ;;
	--rma)
	    rma=true
	    ;;
	-*)
	    usage
	    exit 1
	    ;;
	*)
	    file="$1"
	    ;;
    esac
    shift
done

if [ "x${file}" = "x" ]; then
    usage
    exit 1
fi
if [ ! -r "${file}" ]; then
    echo "# ${0}: cannot read file '${file}'." >&2
    usage
    exit 1
fi

outdir="${file}.d"
mkdir -p ${outdir}

echo
echo "# ## parsing file ${file}..."
echo 

if grep -q '/0 begin' ${file}; then
    echo
    echo "# ## detected legacy file format; converting..."
    sed '/bench:/s,/,%,g' ${file} > ${outdir}/input.dat
    file=${outdir}/input.dat
    noncontig_suffix=""
    echo "# done."
    echo
else
    noncontig_suffix="%32"
fi
param_delimiter='%'


if [ "x${rma}" = "x" ]; then
    expected_bench_list="mpi_bench_overlap_sender mpi_bench_overlap_recv mpi_bench_overlap_bidir mpi_bench_overlap_sender_noncontig mpi_bench_overlap_send_overhead mpi_bench_overlap_Nload"
else
    expected_bench_list="mpi_bench_rmaoverlap_put_origin mpi_bench_rmaoverlap_put_target mpi_bench_rmaoverlap_put_passive mpi_bench_rmaoverlap_put_noncontig mpi_bench_rmaoverlap_get mpi_bench_rmaoverlap_accumulate"
fi

base_bench_list="mpi_bench_sendrecv mpi_bench_send_overhead mpi_bench_noncontig${noncontig_suffix} mpi_bench_rma_put_active mpi_bench_rma_put_passive mpi_bench_rma_accumulate_active mpi_bench_rma_put_noncontig${param_delimiter}32"

echo
echo "# ## generating normalized files..."
echo
detected_bench_list=
for b in ${base_bench_list} ${expected_bench_list}; do
    if grep -q "# bench: ${b} begin" ${file}; then
	echo "# processing bench: ${b}"
	outfile=${outdir}/${b}.dat
	echo "# This file is automatically generated from ${file} for ${b} in machine-readable format." > ${outfile}
	echo "# Generated on $( date ) on host $( hostname )" >> ${outfile}
	sed -r -f /dev/stdin ${file} >> ${outfile} <<EOF
/${b} begin/,/${b} end/ !d
s/^[ \t]*//g
s/\r//g;s/\t/ /g
/^#/!s/[ \t]+/\t/g
EOF
	echo "# ${b}: done."
	echo
	detected_bench_list="${detected_bench_list} ${b}"
    fi
done

echo
echo "# ## computing overlap ratio..."
echo

mpi_bench_extract_line() {
    b=$1
    s=$2
    benchfile=${outdir}/${b}.dat
    sed -e "/${b} begin/,/${b} end/ !d;/^#/ d;/^${s}\t/ !d" ${benchfile}
}

mpi_bench_extract_line_param() {
    b=$1
    s=$2
    p=$3
    benchfile=${outdir}/${b}.dat
    sed -e "/${b}${param_delimiter}${p} begin/,/${b}${param_delimiter}${p} end/ !d;/^#/ d;/^${s}\t/ !d" ${benchfile}
}

mpi_bench_extract_sizes() {
    b=$1
    sed -e "/^#/ d" ${outdir}/${b}.dat | cut -f 1 | tr '\n' ' '
}

for b in ${expected_bench_list}; do
    if [[ ! "${detected_bench_list}" =~ ${b} ]]; then
	echo "# ## WARNING- cannot find ${b} in bench file." 1>&2
	echo "# detected benchmarks: ${detected_bench_list}" 1>&2
	echo
	continue
    fi
    case ${b} in
	*rmaoverlap_put_passive)
	    benchref=mpi_bench_rma_put_passive
	    lat0=$( mpi_bench_extract_line mpi_bench_rma_put_passive 0 | cut -f 2 )
	    ;;
	*rmaoverlap_put_noncontig)
	    benchref="mpi_bench_rma_put_noncontig${param_delimiter}32"
	    lat0=$( mpi_bench_extract_line mpi_bench_rma_put_active 0 | cut -f 2 )
	    ;;
	*rmaoverlap_get*)
	    benchref=mpi_bench_rma_get_active
	    lat0=$( mpi_bench_extract_line mpi_bench_rma_get_active 0 | cut -f 2 )
	    ;;
	*rmaoverlap_accumulate*)
	    benchref=mpi_bench_rma_accumulate_active
	    lat0=$( mpi_bench_extract_line mpi_bench_rma_accumulate_active 0 | cut -f 2 )
	    ;;
	*rmaoverlap*)
	    benchref=mpi_bench_rma_put_active
	    lat0=$( mpi_bench_extract_line mpi_bench_rma_put_active 0 | cut -f 2 )
	    ;;
	mpi_bench_overlap_send_overhead)
	    benchref=mpi_bench_send_overhead
	    lat0=0
	    ;;
	*bidir*)
	    benchref=mpi_bench_sendrecv
	    lat0=0
	    ;;
	*noncontig*)
	    benchref="mpi_bench_noncontig${noncontig_suffix}"
	    lat0=$( mpi_bench_extract_line mpi_bench_sendrecv 0 | cut -f 2 )
	    ;;
	*Nload*)
	    benchref=mpi_bench_sendrecv
	    lat0=0
	    ;;
	*)
	    benchref=mpi_bench_sendrecv
	    lat0=$( mpi_bench_extract_line mpi_bench_sendrecv 0 | cut -f 2 )
	    ;;
    esac
    echo "# ## benchmark: ${b}"
    benchfile=${outdir}/${b}.dat
    echo "# file ${benchfile}"
    size_list=$( mpi_bench_extract_sizes ${benchref} )
    echo "# sizes: ${size_list}"
    params=$( sed -e "s/^# bench: ${b}${param_delimiter}\(.*\) begin/\1/p;d" ${benchfile} | tr '\n' ' ' )
    echo "# params list: ${params}"
    echo "# generated from ${b} and ${benchref}"       > ${outdir}/${b}-ref.dat
    echo "# size | comp.time | rtt | lat_ref"         >> ${outdir}/${b}-ref.dat
    echo -n "# extracting size: "
    for s in ${size_list}; do
	echo -n "${s} "
	latref=$( mpi_bench_extract_line ${benchref} ${s} | cut -f 2 )
	mkdir -p ${outdir}/${b}-series
	echo "# generated from ${b} for size=${s}" > ${outdir}/${b}-series/${b}-s${s}.dat
	echo "# reference latency: ${latref}"     >> ${outdir}/${b}-series/${b}-s${s}.dat
	echo "# comp.time | ratio | rtt."         >> ${outdir}/${b}-series/${b}-s${s}.dat
	for p in ${params}; do
	    rtt=$( mpi_bench_extract_line_param ${b} ${s} ${p} | cut -f 2 )
	    echo "${s} ${p} ${rtt} ${latref}"          >> ${outdir}/${b}-ref.dat
	    echo "${p} ${ratio} ${rtt}"                >> ${outdir}/${b}-series/${b}-s${s}.dat
	done
	echo  >> ${outdir}/${b}-ref.dat
    done
    echo

    cat > ${outdir}/${b}.gp <<EOF
# -*- mode: Gnuplot;-*-
# MadMPI benchmark gnuplot script
# automatically generated by $0 on `date`
# for data set: ${file}; benchmark: ${b}

reset

load "@srcdir@/plot/term-${out}.gp"
benchref = "${benchref}"
lat0 = ${lat0}
call "@srcdir@/plot/trace-$( if [ ${b} != mpi_bench_overlap_Nload ]; then echo overlap; else echo nload; fi ).gp" "${file}" "${b}"

EOF
    if [ "x@GNUPLOT@" != "x" -a -r ${outdir}/${b}.gp ]; then
	echo "# invoking gnuplot ${outdir}/${b}.gp..."
	(
	    cd ${outdir};
	    @GNUPLOT@ ${b}.gp
	)
	echo "# done."
    else
	echo "# gnuplot not detected"
    fi
    echo
done

if [ ${out} = png ]; then
    echo "# ## generating global plot..."
    gm convert -size 800x768 label:"${file}" $( for b in ${expected_bench_list}; do if [ -s ${outdir}/${b}.png ]; then echo ${outdir}/${b}.png; else echo "-size 1024x768 label:${b}"; fi; done ) +append ${outdir}/all.png
fi
    
