#!/bin/sh
#
#                      PM2 HIGH-PERF/ISOMALLOC
#           High Performance Parallel Multithreaded Machine
#                           version 3.0
#
#     Gabriel Antoniu, Olivier Aumage, Luc Bouge, Vincent Danjean,
#       Christian Perez, Jean-Francois Mehaut, Raymond Namyst
#
#            Laboratoire de l'Informatique du Parallelisme
#                        UMR 5668 CNRS-INRIA
#                 Ecole Normale Superieure de Lyon
#
#                      External Contributors:
#                 Yves Denneulin (LMC - Grenoble),
#                 Benoit Planquelle (LIFL - Lille)
#
#                    1998 All Rights Reserved
#
#
#                             NOTICE
#
# Permission to use, copy, modify, and distribute this software and
# its documentation for any purpose and without fee is hereby granted
# provided that the above copyright notice appear in all copies and
# that both the copyright notice and this permission notice appear in
# supporting documentation.
#
# Neither the institutions (Ecole Normale Superieure de Lyon,
# Laboratoire de L'informatique du Parallelisme, Universite des
# Sciences et Technologies de Lille, Laboratoire d'Informatique
# Fondamentale de Lille), nor the Authors make any representations
# about the suitability of this software for any purpose. This
# software is provided ``as is'' without express or implied warranty.
#

PROGNAME=pm2which

error() # msg
{
    echo $* >&2
    exit 1
}

usage() # exit_code
{
    cat <<EOF
Usage: $PROGNAME { option } command

  option:
    -f name : Use flavor named "name" (default=\$PM2_FLAVOR or default)
    -p      : Print possible prefixed notations (used to remove ambiguity)
    -h      : Display this help message
EOF
    exit $1
}

pretty_print() # path path...
{
    for p 
    do
	if [ $SHOW_PREFIX = yes ]; then
	    echo $p | sed -e 's|.*examples/\(.*\)/bin/\(.*\)|\1:\2|'
	else
	    echo $p
	fi
    done
}

ambiguity() # prog ex_dir find_result
{
    pretty_print $*
    exit 1
}

PM2_FLAVOR=${PM2_FLAVOR:-default}
export PM2_FLAVOR

SHOW_PREFIX=no

while [ $# -gt 0 ]; do
    case $1 in
	-f)
	    shift
	    PM2_FLAVOR="$1"
	    shift
	    ;;
	-p)
	    shift
	    SHOW_PREFIX=yes
	    ;;
	-h)
	    usage 0
	    ;;
	--)
	    shift
	    break
	    ;;
	*)
	    break
	    ;;
    esac
done

[ $# -eq 1 ] || usage 1

ex_dir=`pm2-config --flavor="${PM2_FLAVOR}" --builddir 2> /dev/null`/examples

[ $? -eq 0 ] || error "Error: \"${PM2_FLAVOR}\" is not a valid flavor."

# On regarde si le nom de la commande est relatif/absolu
case "$1" in
    /*)
	[ -x $1 ] || error "Error: \"$1\" exec file not found."
	cmd_prefix=$1
	shift
	;;
    *:*)
	f_dir=`echo $1 | cut -d: -f1`
	f_name=`echo $1 | cut -d: -f2`
	[ -x ${ex_dir}/${f_dir}/bin/${f_name} ] || error "Error: \"${ex_dir}/${f_dir}/bin/${f_name}\" exec file not found."
	cmd_prefix="${ex_dir}/${f_dir}/bin/${f_name} "
	shift
	;;
    *)
	if [ -f "$1" -a -x "$1" ]; then
	    cmd_prefix="`pwd`/$1"
        else
	    files=`find ${ex_dir} -name "$1" -type f -print`
	    [ -n "$files" ] || error "Error: no \"$1\" exec file found under \"${ex_dir}\""
	    nb_found=`echo $files | wc -w`
	    [ $nb_found -eq 1 ] || ambiguity "$files"
	    cmd_prefix="`dirname $files`/$1"
        fi
	shift
	;;
esac

pretty_print ${cmd_prefix}


