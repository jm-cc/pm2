diff -aruN conformance.old/interfaces/pthread_cond_broadcast/4-2.c conformance/interfaces/pthread_cond_broadcast/4-2.c
--- conformance.old/interfaces/pthread_cond_broadcast/4-2.c	2010-10-11 15:12:06.000000000 +0200
+++ conformance/interfaces/pthread_cond_broadcast/4-2.c	2010-10-11 15:38:45.000000000 +0200
@@ -90,6 +90,8 @@
 #endif
 
 sigset_t usersigs;
+pthread_t th_sig1, th_sig2;
+pthread_barrier_t barrier;
 
 typedef struct 
 {
@@ -118,6 +120,8 @@
 	ret = pthread_sigmask(SIG_BLOCK, &usersigs, NULL);
 	if (ret != 0)  {  UNRESOLVED(ret, "Unable to block SIGUSR1 and SIGUSR2 in signal thread");  }
 
+	pthread_barrier_wait(&barrier);
+
 	while (do_it)
 	{
 		#ifdef WITH_SYNCHRO
@@ -162,6 +166,8 @@
 	ret = pthread_sigmask(SIG_BLOCK, &usersigs, NULL);
 	if (ret != 0)  {  UNRESOLVED(ret, "Unable to block SIGUSR1 and SIGUSR2 in signal thread");  }
 	
+	pthread_barrier_wait(&barrier);
+
 	ret = pthread_mutex_lock(&(data.mtx));
 	if (ret != 0)  {  UNRESOLVED(ret, "Unable to lock mutex in waiter thread");  }
 	
@@ -191,6 +197,8 @@
  	/* We don't block the signals SIGUSR1 and SIGUSR2 for this THREAD */
 	ret = pthread_sigmask(SIG_UNBLOCK, &usersigs, NULL);
 	if (ret != 0)  {  UNRESOLVED(ret, "Unable to unblock SIGUSR1 and SIGUSR2 in worker thread");  }
+
+	pthread_barrier_wait(&barrier);
 	
 	while (woken<5)
 	{
@@ -199,15 +207,22 @@
 		if (ret != 0)  {  UNRESOLVED(ret, "Failed to signal the condition");  }
 		count_cnd_sig++;
 	}
+
+	if ((ret = pthread_join(th_sig1, NULL)))
+	{ UNRESOLVED(ret, "Signal 1 sender thread join failed"); }
+	if ((ret = pthread_join(th_sig2, NULL)))
+	{ UNRESOLVED(ret, "Signal 2 sender thread join failed"); }
 	
 	return NULL;
 }
 
+#define THR_WAITER_NR 5
+
 /* Main function */
 int main (int argc, char * argv[])
 {
 	int ret,i;
-	pthread_t th_waiter[5], th_worker, th_sig1, th_sig2;
+	pthread_t th_waiter[THR_WAITER_NR], th_worker;
 	thestruct arg1, arg2;
 	struct sigaction sa;
 	
@@ -233,7 +248,8 @@
 	ret = pthread_sigmask(SIG_BLOCK, &usersigs, NULL);
 	if (ret != 0)  {  UNRESOLVED(ret, "Unable to block SIGUSR1 and SIGUSR2 in main thread");  }
 	
-	
+	// 4 = worker + 2 sendsig + main
+	pthread_barrier_init(&barrier, NULL, THR_WAITER_NR + 4);
 
 	#ifdef WITH_SYNCHRO
 	if (sem_init(&semsig1, 0, 1))
@@ -262,6 +278,8 @@
 	{ UNRESOLVED(ret, "Signal 1 sender thread creation failed"); }
 	if ((ret = pthread_create(&th_sig2, NULL, sendsig, (void *)&arg2)))
 	{ UNRESOLVED(ret, "Signal 2 sender thread creation failed"); }
+
+	pthread_barrier_wait(&barrier);
 	
 	/* Let's wait for a while now */
 	sleep(1);
@@ -270,10 +288,6 @@
 	do { do_it=0; }
 	while (do_it);
 	
-	if ((ret = pthread_join(th_sig1, NULL)))
-	{ UNRESOLVED(ret, "Signal 1 sender thread join failed"); }
-	if ((ret = pthread_join(th_sig2, NULL)))
-	{ UNRESOLVED(ret, "Signal 2 sender thread join failed"); }
 	for (i=0; i<5; i++)
 	{
 		if ((ret = pthread_join(th_waiter[i], NULL)))
