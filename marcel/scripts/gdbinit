set environment LD_PRELOAD /usr/local/lib/lib_af_myri.so
handle SIGUSR2 noprint nostop
set $marcel_saved=0

define save-ctx
  if $marcel_saved==1
    printf "already saved ctx\n"
  else
    __save-ctx
    set $marcel_saved=1
  end
end
document save-ctx
Saves the current marcel context
Use rest-ctx to restore it
end

define set-ctx
  if $marcel_saved==0
    save-ctx
  end
  printf "switching to $arg0(0x%lx)\n", $arg0
  __set-ctx $arg0
end
document set-ctx
Switch to another marcel thread's context
end

define rest-ctx
  if $marcel_saved==0
    echo no context saved !\n
  else
    __rest-ctx
  end
end
document rest-ctx
Restores a previously-saved marcel context,
so as to be able to continue execution
end

define marcel-continue
  handle SIGALRM pass
  handle SIGVTALRM pass
  if $marcel_saved==1
    __rest-ctx
  end
end

define marcel-step
  handle SIGALRM nopass
  handle SIGVTALRM nopass
  if $marcel_saved==1
    __rest-ctx
  end
end

define hook-stop
  marcel-step
end

define hook-run
  marcel-continue
end
define hook-continue
  marcel-continue
end

define hook-step
  marcel-step
end
define hook-stepi
  marcel-step
end
define hook-next
  marcel-step
end
define hook-nexti
  marcel-step
end

define hook-finish
  marcel-continue
end
define hook-until
  marcel-continue
end
define hook-advance
  marcel-continue
end

define ma-printrq
  printf " %s", ($arg0)->name
end

define ma-printholder
  if ($arg0) && ($arg0)->type == 0
    set $rq = ((ma_runqueue_t *)(((char*)$arg0)+(unsigned)(&(((ma_runqueue_t *)0)->hold))))
    ma-printrq $rq
  else
    printf " 0x%lx", $arg0
  end
end

define marcel-printthread
  set $state='?'
  if $arg0->sched.state == 0
    set $state='R'
  end
  if $arg0->sched.state == 1
    set $state='I'
  end
  if $arg0->sched.state == 2
    set $state='U'
  end
  if $arg0->sched.state == 16
    set $state='D'
  end
  if $arg0->sched.state == 64
    set $state='M'
  end
  if $arg0->sched.state == 128
    set $state='F'
  end
  if $arg0->sched.state == 256
    set $state='B'
  end
  printf "0x%lx %16s %2d %c", \
    $arg0, $arg0->name, $arg0->sched.internal.prio, $state
  if $arg0->sched.lwp
    printf " %2d", $arg0->sched.lwp->number
  end
  ma-printholder $arg0->sched.internal.init_holder
  ma-printholder $arg0->sched.internal.sched_holder
  ma-printholder $arg0->sched.internal.run_holder
  printf "\n"
end
document marcel-printthread
Prints the state of a thread
end

define marcel-threads
  set $num=0
  while $num<ma__nb_vp
    set $vp=&marcel_topo_vp_level[$num]
    set $all_threads=&$vp->leveldata.vpdata.all_threads
    set $threade=$all_threads->next
    while $threade!=$all_threads
      set $thread=(marcel_t)(((char*)$threade)-(unsigned)(&(((marcel_t)0)->all_threads)))
      marcel-printthread $thread
      set $threade=$threade->next
    end
    set $num = $num + 1
  end
end

document marcel-threads
Prints a list of marcel threads
end
