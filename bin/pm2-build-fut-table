#!/bin/sh

# PM2: Parallel Multithreaded Machine
# Copyright (C) 2001 "the PM2 team" (see AUTHORS file)
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.


error() # msg
{
    echo $*
    exit 1
}

usage() # exit_code
{
    cat <<EOF
Usage: $PROGNAME { option }

  option:
    -f name : Use flavor named "name" (default=\$PM2_FLAVOR or default)
    -m name : Use module named "name" (default=profile)
    -h : Display this help message
EOF
    exit $1
}

PM2_FLAVOR=${PM2_FLAVOR:-default}
export PM2_FLAVOR
MODULE=profile

while [ $# -gt 0 ]; do
    case $1 in
	-f)
	    shift
	    PM2_FLAVOR="$1"
	    shift
	    ;;
	-m)
	    shift
	    MODULE="$1"
	    shift
	    ;;
	-h)
	    usage 0
	    ;;
	--)
	    shift
	    break
	    ;;
	*)
	    break
	    ;;
    esac
done

#echo "Building fut_entries.h & fut_print.h for flavor $PM2_FLAVOR..."

set -- --source-mode
. ${PM2_ROOT}/bin/pm2-config

BUILDDIR=$_PM2CONFIG_BUILD

RECORD_SIZE=1

GENDIR=${BUILDDIR}/${MODULE}/include

if [ ! -d ${GENDIR} ] ; then
    mkdir -p ${GENDIR}
fi

deffile=${GENDIR}/fut_entries.h
echo "#ifndef FUT_ENTRIES_IS_DEF" > $deffile
echo "#define FUT_ENTRIES_IS_DEF" >> $deffile
echo >> $deffile

printfile=${GENDIR}/fut_print.h
> $printfile

for c in \
    FUT_SETUP_CODE \
    FUT_KEYCHANGE_CODE \
    FUT_RESET_CODE \
    FUT_CALIBRATE0_CODE \
    FUT_CALIBRATE1_CODE \
    FUT_CALIBRATE2_CODE \
    FUT_SWITCH_TO_CODE \
    FUT_NEW_LWP_CODE \
    FUT_THREAD_BIRTH_CODE \
    FUT_THREAD_DEATH_CODE \
    FUT_SET_THREAD_NAME_CODE \
    FUT_MAIN_ENTRY_CODE \
    FUT_MAIN_EXIT_CODE
    do
    code="`grep $c /usr/local/include/fxt/fut.h | sed -e 's/#define[ \t]*[_A-Za-z0-9]*.*\(0x[0-9A-Fa-f]*\)/\1/'`"
    label="`echo $c | sed -e 's/^\(FUT_.*\)_CODE$/\1/' | tr '[A-Z]' '[a-z]'`"
    echo "{ $c, \"$label\" }," >> $printfile
done

base=$((4096 + 256)) # 0x1100
value=0
other=15728640 # 0xf00000

THE_MODULES="$_PM2CONFIG_PROF_MODULES"
case " $_PM2CONFIG_CFLAGS " in
    *\ -DAPPLI_PROFILE\ *)
	THE_MODULES="${THE_MODULES} examples"
	;;
esac

for mod in $THE_MODULES ; do

    # Ugly!!! We should use --cppdir <mod> instead of --buildir!
    FUT_FILES=`find ${BUILDDIR}/$mod -name '*.fut'`
    if [ -z "$FUT_FILES" ] ; then
	continue
    fi
    for e in `cat $FUT_FILES | sort | uniq`; do
    case $e in
        *entry_code)
	    num=$(($value + $base))
	    xnum=`printf "0x%x" $num`
	    name=`echo $e | sed -e 's/fut_\(.*\)_entry_code/\1_entry/'`
	    upname=`echo $name | tr '[a-z]' '[A-Z]'`
	    echo "#define $upname $xnum" >> $printfile
	    echo "{ $upname, \"$name\" }," >> $printfile
            echo "unsigned $e = $xnum ;" >> $deffile
            ;;
        *exit_code)
	    num=$(($value + $base + 256))
	    xnum=`printf "0x%x" $num`
	    name=`echo $e | sed -e 's/fut_\(.*\)_exit_code/\1_exit/'`
	    upname=`echo $name | tr '[a-z]' '[A-Z]'`
	    echo "#define $upname $xnum" >> $printfile
	    echo "{ $upname, \"$name\" }," >> $printfile
            echo "unsigned $e = $xnum ;" >> $deffile

            value=$(($value + 1))
	    if [ $value = 256 ]; then
		base=$(($base + 512))
		value=0
	    fi
	    ;;
        *single_code)
	    xnum=`printf "0x%x" $other`
	    name=`echo $e | sed -e 's/fut_\(.*\)_single_code/\1/'`
	    upname=`echo $name | tr '[a-z]' '[A-Z]'`
	    echo "#define $upname $xnum" >> $printfile
	    echo "{ $upname, \"$name\" }," >> $printfile
            echo "unsigned $e = $xnum ;" >> $deffile

	    other=$(($other + 1))
            ;;
        *single1_code)
	    xnum=`printf "0x%x" $other`
	    name=`echo $e | sed -e 's/fut_\(.*\)_single1_code/\1/'`
	    upname=`echo $name | tr '[a-z]' '[A-Z]'`
	    echo "#define $upname $xnum" >> $printfile
	    echo "{ $upname, \"$name\" }," >> $printfile
            echo "unsigned $e = $xnum ;" >> $deffile

	    other=$(($other + 1))
            ;;
        *single2_code)
	    xnum=`printf "0x%x" $other`
	    name=`echo $e | sed -e 's/fut_\(.*\)_single2_code/\1/'`
	    upname=`echo $name | tr '[a-z]' '[A-Z]'`
	    echo "#define $upname $xnum" >> $printfile
	    echo "{ $upname, \"$name\" }," >> $printfile
            echo "unsigned $e = $xnum ;" >> $deffile

	    other=$(($other + 1))
            ;;
	*)
	    echo "unknown profile type $e";
	    exit 1
	    ;;
    esac
    done
done
echo >> $deffile
echo "#endif" >> $deffile

exit 0
