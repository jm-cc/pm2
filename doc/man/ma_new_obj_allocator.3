.TH "ma_new_obj_allocator"
.SH NOM
ma_new_obj_allocator
.SH SYNOPSYS
#include "marcel_allocator.h"

ma_allocator_t *ma_new_obj_allocator(int conservative,
				      void *(*create)(void *), 
				      void *create_arg,
				      void (*destroy)(void *, void *), 
				      void *destroy_arg,
				      enum policy_t policy,
				      int max_size
				      );
.SH DESCRIPTION
Cette fonction permet de déclarer un nouvel allocateur d'objet, pour cela il suffit de passer en paramètre 
les fonctions d'allocations et de désallocations correspondat à ce type d'objet.
Si vous ne souhaitez pas fournir de fonction de désallocations vous pouvez passer NULL comme argument.
Lors de la créaton de cet allocateur vous pouvez choisir la politique de celui-ci : 
POLICY_GLOBAl : un seul réservoir global. 
POLICY_LOCAL : un réservoir par processeur.
POLICY_HIERARCHICAL : un réservoir par processeur et également des réservoirs le long de la hiérarchie mémoire.
La taille à spécifier (max_size), correspond à la capacité d'un réservoir (de plus bas niveau ans la cas hiérarchique).

.SS ARGUMENTS
int conservative : booléen qui si il est à 1 spécifie que l'on conserve l'objet lors de l'ajout au réservoir.
void *(*create)(void *) : fonction qui sera utilisée lors de l’allocation en mémoire centrale.
void *create_arg : argument pour la fonction précédente.
void (*destroy)(void *, void *) : fonction qui sera utilisée lors de la libération des objets de l’allocateur.
void *destroy_arg : argument pour la fonction précédente.
enum policy_t policy : choix de la politique.
int max_size : taille des containers les plus proches des processeurs.

.SS EXEMPLE
#include "marcel_allocator.h"

void * mymalloc(void * arg)  {
  void * res = malloc((size_t)(intptr_t)arg);
  return res;
}

void myfree(void * obj, void * foo)  {
  free(obj);
}

ma_allocator_t * allocator;
allocator = ma_new_obj_allocator(1, mymalloc, (void*)4096, myfree, NULL, POLICY_HIERARCHICAL, 1024);
