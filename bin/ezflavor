#!/usr/bin/env pm2-sh
#-*-sh-*-
###########

# PM2: Parallel Multithreaded Machine
# Copyright (C) 2001 "the PM2 team" (see AUTHORS file)
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.


progname="`basename $0`"
X=
flavor=
module=
case "$progname" in
	sigmund|sigmundps|supertrace|xsigmund)
		flavor=sigmund
		;;
	ezflavor)
		if [ ! -f /tmp/.X0-lock ] ; then
		   X=yes
		fi
		;;
	bubbles)
		[ -n "$PM2_FLAVOR" ] && flavor=$PM2_FLAVOR || flavor=marcel-bubbles
		;;
	bubblegum)
		[ -n "$PM2_FLAVOR" ] && flavor=$PM2_FLAVOR || flavor=marcel-bubblegum
		;;
esac

[ -z "$flavor" ] && flavor="$progname"
export PM2_FLAVOR="$flavor"
[ -z "$module" ] && module="$progname"

args="$@"

error()
{
  for ligne in ${@:+"$@"}; do
    echo "$ligne";
  done
  exit 1
}

reexec()
{
  echo
  echo "***************************************************"
  echo "Restarting `basename $0` $@"
  exec $0 ${@:+"$@"}
}

error_compile()
{
  cmd=""
  while [ $# != 0 ]; do
    case "$1" in
    	--cmd)
	  cmd="${cmd:+$cmd ; }$2"
	  ;;
	--)
	  shift
	  break
	  ;;
	*)
	  echo "$1"
	  ;;
    esac
    shift
  done
  if [ "$cmd" ]; then
    echo -n "[Y/n]"
    read rep
    case "$rep" in
      Y|y|O|o|"")
	sh -c "$cmd" && reexec ${@:+"$@"};;
    esac
  fi
  echo "Aborting"
  exit 1
}

# Main part
[ -n "${PM2_ROOT}"    ] || error 'PM2_ROOT variable is not set'

PM2_CONFIG="${PM2_ROOT}/bin/pm2-config"
[ -x "${PM2_CONFIG}" ] || error "cannot execute ${PM2_CONFIG}"

FLAVOR_DIR=`${PM2_CONFIG} --flavor=$flavor --bindir $module 2>/dev/null`
if [ $? != 0 ]; then
  error_compile "The flavor $flavor does not seem to exist, yet." \
  	"" \
        "Do you want to try to create it by executing :" \
  	--cmd "pm2-create-sample-flavors --force $flavor" \
	-- ${@:+"$@"}
	
fi
PROG="${FLAVOR_DIR}/$progname"
if [ ! -d "${FLAVOR_DIR}"  ] ; then
  error_compile "Directory ${FLAVOR_DIR} not found" \
	"" \
        "Do you want to try to compile it by executing :" \
	--cmd "cd $PM2_ROOT ; make FLAVOR=$flavor -C modules/${module}" \
	-- ${@:+"$@"}
fi

if [ ! -x "${PROG}" ]; then
  error_compile "cannot execute ${PROG}" \
	"" \
        "Do you want to try to compile it by executing :" \
	--cmd "cd $PM2_ROOT ; make FLAVOR=$flavor -C modules/${module}" \
	-- ${@:+"$@"}
fi

export LD_LIBRARY_PATH="`${PM2_CONFIG} --flavor=$flavor --libdir $module`${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}"

if [ `${PM2_ROOT}/bin/pm2-sys` = "DARWIN_SYS" -a -n "$X" ] ; then

    if [ -n "$@" ] ; then
	echo "Warning: option(s) \"$@\" ignored"
    fi
    exec open-x11 ${PROG}

else

    if [ "$LEO_DEBUG" == "1" ] && [ "$progname" == "leonie" ] ; then

        file=/tmp/leo_debug.$$

        args=""
        while [ $# -gt 0 ] ; do
            args="$args '$1'"
            shift
        done

        echo "set args $args" > $file

        [ -f ~/.leo_gdb_init ] && cat ~/.leo_gdb_init >> $file

        gdb -x $file ${PROG}

    else

        exec ${PROG} ${@:+"$@"}
    fi

fi

# End
