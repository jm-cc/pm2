diff -urN NetPIPE_3.6.2/makefile NetPIPE_3.6.2-mad3/makefile
--- NetPIPE_3.6.2/makefile	2004-06-09 21:46:35.000000000 +0200
+++ NetPIPE_3.6.2-mad3/makefile	2006-07-19 10:03:24.000000000 +0200
@@ -24,6 +24,12 @@
 CFLAGS     = -O
 SRC        = ./src
 
+# Mad3
+PM2_CONFIG	:= "pm2-config"
+FLAVOR		:= mad3
+PM2_CFLAGS	:= $(shell $(PM2_CONFIG) --flavor=$(FLAVOR) --cflags)
+PM2_LDFLAGS	:= $(shell $(PM2_CONFIG) --flavor=$(FLAVOR) --libs)
+
 # For MPI, mpicc will set up the proper include and library paths
 
 MPICC       = mpicc
@@ -104,6 +110,10 @@
 	$(CC) $(CFLAGS) -DMPI $(SRC)/netpipe.c $(SRC)/mpi.c -o NPmplite \
          -I$(SRC) -I$(MP_Lite_home) $(MP_Lite_home)/libmplite.a
 
+mad3: $(SRC)/np_mad3.c $(SRC)/netpipe.c $(SRC)/netpipe.h
+	$(CC) $(CFLAGS) -DMAD3 $(SRC)/netpipe.c $(SRC)/np_mad3.c -o NPmad3 -I$(SRC) $(PM2_CFLAGS) $(PM2_LDFLAGS) 
+	@ rm -f netpipe.o np_mad3.o
+
 mpi: $(SRC)/mpi.c $(SRC)/netpipe.c $(SRC)/netpipe.h 
 	$(MPICC) $(CFLAGS) -DMPI $(SRC)/netpipe.c $(SRC)/mpi.c -o NPmpi -I$(SRC)
 	@ rm -f netpipe.o mpi.o
diff -urN NetPIPE_3.6.2/src/netpipe.h NetPIPE_3.6.2-mad3/src/netpipe.h
--- NetPIPE_3.6.2/src/netpipe.h	2004-06-22 21:38:41.000000000 +0200
+++ NetPIPE_3.6.2-mad3/src/netpipe.h	2006-07-19 10:02:23.000000000 +0200
@@ -89,6 +89,13 @@
 };
 #endif
 
+#elif defined(MAD3)
+  typedef struct protocolstruct ProtocolStruct;
+  struct protocolstruct 
+  { 
+    int nbor, iproc;
+  };
+
 #elif defined(MPI)
   typedef struct protocolstruct ProtocolStruct;
   struct protocolstruct 
diff -urN NetPIPE_3.6.2/src/np_mad3.c NetPIPE_3.6.2-mad3/src/np_mad3.c
--- NetPIPE_3.6.2/src/np_mad3.c	1970-01-01 01:00:00.000000000 +0100
+++ NetPIPE_3.6.2-mad3/src/np_mad3.c	2006-07-19 10:22:33.000000000 +0200
@@ -0,0 +1,152 @@
+#include    "netpipe.h"
+#include    <pm2_common.h>
+
+p_mad_madeleine_t madeleine   = NULL;
+p_mad_session_t   session     = NULL;
+p_mad_channel_t   channel     = NULL;
+p_mad_channel_t   channel_sys = NULL;
+
+void Init(ArgStruct *p, int* pargc, char*** pargv)
+{
+  p->source_node = 0;  /* Default source node */
+  common_pre_init(pargc, *pargv, NULL);
+  common_post_init(pargc, *pargv, NULL);
+}
+
+void Setup(ArgStruct *p)
+{
+    int nprocs;
+
+    madeleine     = mad_get_madeleine();
+
+    channel       = tbx_htable_get(madeleine->channel_htable, "npchannel");
+    if (!channel) {
+        printf("channel 'npchannel' not found\n");
+        exit(-2);
+    }
+
+    channel_sys       = tbx_htable_get(madeleine->channel_htable, "npchannel_sys");
+    if (!channel) {
+        printf("channel 'npchannel_sys' not found\n");
+        exit(-2);
+    }
+
+    session       = madeleine->session;
+    p->prot.iproc = ntbx_pc_global_to_local(channel->pc, session->process_rank);
+    nprocs        = tbx_slist_get_length(madeleine->dir->process_slist);
+
+    if (nprocs < 2)
+    {
+        printf("Need at least two processes (only given %d)\n", nprocs);
+        exit(-2);
+    }
+
+    p->tr = p->rcv = 0;
+    if( p->prot.iproc == 0 ) {
+        p->tr = 1;
+        p->prot.nbor = nprocs-1;
+    } else if( p->prot.iproc == nprocs-1 ) {
+        p->rcv = 1;
+        p->prot.nbor = 0;
+    }
+
+    if( p->bidir ) {
+        printf("Thread-less Madeleine implementation does not have to guarantee message progress.\n");
+        printf("You may need to run using -a to avoid locking up.\n\n");
+    }
+}
+
+void Sync(ArgStruct *p)
+{
+    mad_leonie_barrier();
+}
+
+void PrepareToReceive(ArgStruct *p)
+{
+}
+
+void SendData(ArgStruct *p)
+{
+    p_mad_connection_t out;
+
+    //printf("send...\n");
+    out = mad_begin_packing(channel, p->prot.nbor);
+    mad_pack(out, p->s_ptr, p->bufflen, mad_send_CHEAPER, mad_receive_CHEAPER);
+    mad_end_packing(out);
+    //printf("send done\n");
+}
+
+void RecvData(ArgStruct *p)
+{
+    p_mad_connection_t in;
+
+    //printf("recv...\n");
+    in = mad_begin_unpacking(channel);
+    mad_unpack(in, p->s_ptr, p->bufflen, mad_send_CHEAPER, mad_receive_CHEAPER);
+    mad_end_unpacking(in);
+    //printf("recv done\n");
+}
+
+
+void SendTime(ArgStruct *p, double *t)
+{
+    p_mad_connection_t out;
+
+    //printf("send time... %lf\n", *t);
+    out = mad_begin_packing(channel_sys, p->prot.nbor);
+    mad_pack(out, t, sizeof(double), mad_send_CHEAPER, mad_receive_CHEAPER);
+    mad_end_packing(out);
+    //printf("send time done\n");
+}
+
+void RecvTime(ArgStruct *p, double *t)
+{
+    p_mad_connection_t in;
+
+    //printf("recv time...\n");
+    in = mad_begin_unpacking(channel_sys);
+    mad_unpack(in, t, sizeof(double), mad_send_CHEAPER, mad_receive_CHEAPER);
+    mad_end_unpacking(in);
+    //printf("recv time done: %lf\n", *t);
+}
+
+
+void SendRepeat(ArgStruct *p, int rpt)
+{
+    p_mad_connection_t out;
+
+    //printf("send repeat... %d\n", rpt);
+    out = mad_begin_packing(channel_sys, p->prot.nbor);
+    mad_pack(out, &rpt, sizeof(int), mad_send_CHEAPER, mad_receive_CHEAPER);
+    mad_end_packing(out);
+    //printf("send repeat done\n");
+}
+
+void RecvRepeat(ArgStruct *p, int *rpt)
+{
+    p_mad_connection_t in;
+
+    //printf("receive repeat...\n");
+    in = mad_begin_unpacking(channel_sys);
+    mad_unpack(in, rpt, sizeof(int), mad_send_CHEAPER, mad_receive_CHEAPER);
+    mad_end_unpacking(in);
+    //printf("receive repeat done: %d\n", *rpt);
+}
+
+void CleanUp(ArgStruct *p)
+{
+   common_exit(NULL);
+}
+
+
+
+void Reset(ArgStruct *p)
+{
+
+}
+
+void AfterAlignmentInit(ArgStruct *p)
+{
+
+}
+
