 
/* This file has been autogenerated from include/marcel_mutex.h.m4 */
/*
 * PM2: Parallel Multithreaded Machine
 * Copyright (C) 2006 "the PM2 team" (see AUTHORS file)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 */

/* implémentation en 2s des barrières */
#section structures
#depend "marcel_cond.h[]"
#depend "marcel_mutex.h[]"
struct marcel_barrier {
	marcel_cond_t cond;
	marcel_mutex_t mutex;
	unsigned num;
	int curwait;
};
struct marcel_barrierattr { int foo; };

#section types
typedef struct marcel_barrier marcel_barrier_t;
typedef struct marcel_barrierattr marcel_barrierattr_t;
typedef marcel_barrier_t pmarcel_barrier_t;
typedef marcel_barrierattr_t pmarcel_barrierattr_t;

#section functions
int marcel_barrier_init(marcel_barrier_t * __restrict b,
		const marcel_barrierattr_t * __restrict attr, int num);
int pmarcel_barrier_init(pmarcel_barrier_t * __restrict b,
		const pmarcel_barrierattr_t * __restrict attr, int num);
int marcel_barrier_begin(marcel_barrier_t *b);
void marcel_barrier_end(marcel_barrier_t *b, int num);
int marcel_barrier_wait(marcel_barrier_t *b);
int pmarcel_barrier_wait(pmarcel_barrier_t *b);
static __tbx_inline__ int marcel_barrier_destroy(marcel_barrier_t *b);
int pmarcel_barrier_destroy(marcel_barrier_t *b);
#define pmarcel_barrier_destroy(b) marcel_barrier_destroy(b)
#section inline
static __tbx_inline__ int marcel_barrier_destroy(marcel_barrier_t *b)
{
	return 0;
}

#section macros
/* -1 is distinct from 0 and all errno constants */
#define MARCEL_BARRIER_SERIAL_THREAD (-1)
#define PMARCEL_BARRIER_SERIAL_THREAD MARCEL_BARRIER_SERIAL_THREAD
