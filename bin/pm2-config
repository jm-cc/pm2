#!/usr/bin/env pm2sh

# PM2: Parallel Multithreaded Machine
# Copyright (C) 2001 "the PM2 team" (see AUTHORS file)
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.



pm2config_usage()
{
    exit_code=$1

    cat <<EOF
Usage: $_PM2CONFIG_PROGNAME [--flavor=name] [OPTION]... [MODULE]...
  If '--flavor' is not specified, then it uses fisrt \$PM2_FLAVOR, or,
  if not set, 'default'.

Generic options
  --version	output pm2 version information.
  --help	display this help and exit.

Compilation support options
  --cflags	print pre-processor and compiler flags
  --libs	print library linking information
  --libs-only-L	only print the -L/-R part of --libs
  --libs-only-l only print the -l part of --libs

  --kernel      print flags to compile the libs themselves

Directories pm2-libs was configured to
  --bindir --srcdir --libdir --objdir --depdir --asmdir --makdir
  --stampdir --builddir --includedir --scriptdir --cppdir --tmpdir

Other options
  --ext         : extension used
  --protocols   : communication libraries used
  --modules     : modules included in the flavor
  --profmods    : modules which have the 'profile' functionality enabled
  --headgenmods : modules which generate some specific header files at compile time
  --cc          : C compiler used
  --stampfile   : stampfile generated
  --loader      : loader used
  --preload     : dynamic libraries to be pre-loaded
  --ld-library-path : dynamic library path to be added

Known values for MODULE are:
    ${_PM2CONFIG_MODULES}
    all : all modules included in the flavor

EOF
    if [ $1 != 0 ]; then
	echo "error in $_PROGNAME $_ARGV" 1>&2
    fi
    exit $1
}

pm2config_add_list() # var list_val
{
    eval _old_val='$'${1}
    for _val in $2 ; do
	case " $_old_val " in
	*\ $_val\ *) # Already there 
	    ;;
	*) # Added
	    _old_val="${_old_val:+$_old_val }$_val"
	    ;;
	esac
    done
    eval $1='"${_old_val}"'
}

pm2config_remove_dupplicates() # list
{
    eval _items=\"'$'$1\"

    _rev=""
    for _i in $_items ; do
	_rev="$_i $_rev"
    done

    _l=""
    for _i in $_rev ; do
	case " $_l " in
	    *\ $_i\ *) ;;
	    *) _l="${_i}${_l:+ $_l}"
	esac
    done
    eval $1=\"'$'_l\"
}

pm2config_remove_dupplicates_keep_first() # list
{
    eval _items=\"'$'$1\"

    _l=""
    for _i in $_items ; do
	case " $_l " in
	    *\ $_i\ *) ;;
	    *) _l="${_l:+$_l }$_i"
	esac
    done
    eval $1=\"'$'_l\"
}

pm2config_build_uppercase() # list
{
    _list=$*
    _LIST=`echo $_list | tr '[a-z]' '[A-Z]'`
    while [ -n "$_list" ] ; do
	set $_LIST
	_big=$1
	shift
	_LIST=$*

	set $_list
	_small=$1
	shift
	_list=$*

	eval ${_small}_to_upper=\$_big
    done
}

pm2config_init()
{
    _PM2CONFIG_FLAVOR=${PM2_FLAVOR:-default}
    export _PM2CONFIG_FLAVOR

    # Get the flavor script file path
    set --  --source-mode -f $_PM2CONFIG_FLAVOR
    . ${PM2_ROOT}/bin/pm2-flavor-file
    _PM2CONFIG_FLAVOR_FILE=$PM2_FLAVOR_FILE
    export _PM2CONFIG_FLAVOR_FILE

    if [ ! -f "$_PM2CONFIG_FLAVOR_FILE" ]; then
	echo "Flavor '$_PM2CONFIG_FLAVOR' does not exist yet. Create it before." 1>&2
	echo "You can use 'make init' to create the basic flavors of pm2" 1>&2
	echo "or 'make config|menuconfig|xdialogconfig|xconfig' to create your own flavor." 1>&2
	exit 1
    fi
}

pm2config_set_vars()
{
    # Initialize flavor script file name
    pm2config_init

    set -- --source-mode
    . ${PM2_ROOT}/bin/pm2_sys
    . ${PM2_ROOT}/bin/pm2_arch

    # Source the flavor script file
    set --
    . $_PM2CONFIG_FLAVOR_FILE

    # Special variable (may be used within the build directory path for instance)
    flavor=$_PM2CONFIG_FLAVOR

    # Optimizations
    pm2config_build_uppercase appli common init $_PM2CONFIG_DIRTY_ORDERED_MODULES

    # Build directory
    if [ -z "$PM2_BUILD" ] ; then
	_PM2CONFIG_BUILD="${PM2_BUILD_DIR:-${PM2_HOME:-${HOME}}/build}/$flavor"
    else
	eval _PM2CONFIG_BUILD="$PM2_BUILD"
    fi
    case "$_PM2CONFIG_BUILD" in
	/*)
	    ;;
	*)
	    eval _PM2CONFIG_BUILD="${PM2_BUILD_DIR:-${PM2_HOME:-${HOME}}/build}"'/$_PM2CONFIG_BUILD'
    esac
    export _PM2CONFIG_BUILD

    # Extension
    _PM2CONFIG_EXT="$PM2_EXT"
    export _PM2CONFIG_EXT

    # Loader
    if [ -n "${PM2_LOADER}" ]; then
	_PM2CONFIG_LOADER="$PM2_LOADER"
    elif [ -n "$PM2_DEFAULT_LOADER" ]; then
	_PM2CONFIG_LOADER="$PM2_DEFAULT_LOADER"
    else
	_PM2CONFIG_LOADER=""
    fi
    export _PM2CONFIG_LOADER

    # Dynamic libraries to be pre-loaded
    _PM2CONFIG_PRELOAD="$PM2_LD_PRELOAD"
    export _PM2CONFIG_PRELOAD

    # Flavor stamp file
    _PM2CONFIG_FLAVOR_STAMP_FILE=$_PM2CONFIG_FLAVOR_FILE
    export _PM2CONFIG_FLAVOR_STAMP_FILE

    _PM2CONFIG_LIB_STAMP_FILES=""
    export _PM2CONFIG_LIB_STAMP_FILES
    for _lib in $PM2_LIBS ; do
	eval _LIB='$'${_lib}_to_upper
	eval _libname='$'PM2_${_LIB}_LIBNAME

	eval _PM2CONFIG_${_lib}_MAKEFILE='$'PM2_${_LIB}_MAKEFILE
	eval export _PM2CONFIG_${_lib}_MAKEFILE
	# Directories
	#eval _PM2CONFIG_${_lib}_LIB_DIR=$_PM2CONFIG_BUILD/${_lib}/lib
	eval _PM2CONFIG_${_lib}_LIB_DIR=$_PM2CONFIG_BUILD/lib
	eval export _PM2CONFIG_${_lib}_LIB_DIR

	eval _PM2CONFIG_${_lib}_BIN_DIR=$_PM2CONFIG_BUILD/${_lib}/bin
	eval export _PM2CONFIG_${_lib}_BIN_DIR

	eval _PM2CONFIG_${_lib}_SRC_DIR=$_PM2CONFIG_BUILD/${_lib}/src
	eval export _PM2CONFIG_${_lib}_SRC_DIR

	eval _PM2CONFIG_${_lib}_OBJ_DIR=$_PM2CONFIG_BUILD/${_lib}/obj
	eval export _PM2CONFIG_${_lib}_OBJ_DIR

	eval _PM2CONFIG_${_lib}_CPP_DIR=$_PM2CONFIG_BUILD/${_lib}/cpp
	eval export _PM2CONFIG_${_lib}_CPP_DIR

	eval _PM2CONFIG_${_lib}_DEP_DIR=$_PM2CONFIG_BUILD/${_lib}/dep
	eval export _PM2CONFIG_${_lib}_DEP_DIR

	eval _PM2CONFIG_${_lib}_TMP_DIR=$_PM2CONFIG_BUILD/${_lib}/tmp
	eval export _PM2CONFIG_${_lib}_TMP_DIR

	eval _PM2CONFIG_${_lib}_ASM_DIR=$_PM2CONFIG_BUILD/${_lib}/asm
	eval export _PM2CONFIG_${_lib}_ASM_DIR

	eval _PM2CONFIG_${_lib}_INCLUDE_DIR=$_PM2CONFIG_BUILD/${_lib}/include${_PM2CONFIG_EXT}
	eval export _PM2CONFIG_${_lib}_INCLUDE_DIR

	if [ "$PM2_COMMON_LINK_PM2_SHARED" = yes ]; then
	    eval _PM2CONFIG_${_lib}_LINK_DYNAMIC=pm2
	    if [ "$PM2_COMMON_LINK_SHARED" = yes ]; then
		eval _PM2CONFIG_${_lib}_LINK_DYNAMIC=all
	    fi
	fi
	
	eval _STAMP_FILES='$'PM2_${_LIB}_STAMP_FILES
	eval _obj='$'_PM2CONFIG_${_lib}_OBJ_DIR
	STAMP_FILES=""
	for i in ${_STAMP_FILES}; do
	    STAMP_FILES="${STAMP_FILES:+${STAMP_FILES} }${_obj}/${i}"
	done
	eval _dir='$'_PM2CONFIG_${_lib}_LIB_DIR
	eval LINK_MODE_DYNAMIC='$'PM2_${_LIB}_BUILD_DYNAMIC
	if [ "$LINK_MODE_DYNAMIC" = yes ]; then
	    eval _PM2CONFIG_${_lib}_BUILD_DYNAMIC=yes
	    STAMP_FILES="${STAMP_FILES:+$STAMP_FILES }${_dir}/lib${_libname}${PM2_EXT}.so"
	    case ":${_PM2CONFIG_LD_LIBRARY_PATH}:" in
		*:${_dir}:*)
		    ;;
		*)
		    _PM2CONFIG_LD_LIBRARY_PATH=${_PM2CONFIG_LD_LIBRARY_PATH:+${_PM2CONFIG_LD_LIBRARY_PATH}:}${_dir} ;;
	    esac
	fi
	eval export _PM2CONFIG_${_lib}_BUILD_DYNAMIC

	eval LINK_MODE_STATIC='$'PM2_${_LIB}_BUILD_STATIC
	if [ "$LINK_MODE_STATIC" = yes ]; then
	    eval _PM2CONFIG_${_lib}_BUILD_STATIC=yes
	    STAMP_FILES="${STAMP_FILES:+$STAMP_FILES }${_dir}/lib${_libname}${PM2_EXT}.a"
	fi
	eval export _PM2CONFIG_${_lib}_BUILD_STATIC

	# Libs stamp files
	if [ -n "$_libname" ]; then
	    eval _PM2CONFIG_${_libname}_STAMP_FILES='"'$STAMP_FILES'"'
	    eval export _PM2CONFIG_${_libname}_STAMP_FILES
	    eval _PM2CONFIG_LIB_STAMP_FILES=\"'$'{_PM2CONFIG_LIB_STAMP_FILES:+$_PM2CONFIG_LIB_STAMP_FILES }'$'_PM2CONFIG_${_libname}_STAMP_FILES\"
	fi

	eval LINK_OTHER='$'PM2_${_LIB}_DO_NOT_LINK_LIB_WITH_OTHERS
	if [ -z "$LINK_OTHER" ]; then
	    for LIB in $PM2_COMMON_PM2_SHLIBS; do
		eval '_PM2CONFIG_'${_lib}'_PM2_SHLIBS="$_PM2CONFIG_'${_lib}'_PM2_SHLIBS "$PM2_'${LIB}'_LIBNAME'
	    done
	fi
	eval export _PM2CONFIG_${_lib}_PM2_SHLIBS
    done

    for LIB in $PM2_COMMON_PM2_SHLIBS; do
	eval '_PM2CONFIG_PM2_SHLIBS="$_PM2CONFIG_PM2_SHLIBS "$PM2_'${LIB}'_LIBNAME'
    done
    export _PM2CONFIG_PM2_SHLIBS

    # Make directory
    _PM2CONFIG_MAK_DIR=$_PM2CONFIG_BUILD/mak
    export _PM2CONFIG_MAK_DIR

    # Stamp directory
    _PM2CONFIG_STAMP_DIR=$_PM2CONFIG_BUILD/stamp
    export _PM2CONFIG_STAMP_DIR

    # Modules
    _PM2CONFIG_MODULES=""
    for _l in $_PM2CONFIG_DIRTY_ORDERED_MODULES ; do
	case " $PM2_LIBS " in
	    *\ $_l\ *)
		_PM2CONFIG_MODULES="${_PM2CONFIG_MODULES:+$_PM2CONFIG_MODULES }$_l"
		;;
	esac
    done
    export _PM2CONFIG_MODULES

    # Profiled modules
    _PM2CONFIG_PROF_MODULES=""
    for _l in $_PM2CONFIG_DIRTY_ORDERED_MODULES ; do
	eval _L='$'${_l}_to_upper
	eval _CFK='$'PM2_${_L}_CFLAGS_KERNEL
	case " $_CFK " in
	    *\ -DDO_PROFILE\ *)
		case " $PM2_LIBS " in
		    *\ $_l\ *)
			_PM2CONFIG_PROF_MODULES="${_PM2CONFIG_PROF_MODULES:+$_PM2CONFIG_PROF_MODULES }$_l"
			;;
		esac
		;;
	esac
    done
    export _PM2CONFIG_PROF_MODULES

    # Modules generating headers
    _PM2CONFIG_HEADGEN_MODULES=""
    for _l in $_PM2CONFIG_DIRTY_ORDERED_MODULES ; do
	eval _L='$'${_l}_to_upper
	eval _GENINC='$'PM2_${_L}_GENERATE_INCLUDE
	if [ "$_GENINC" = true ] ; then
	    case " $PM2_LIBS " in
		*\ $_l\ *)
		    _PM2CONFIG_HEADGEN_MODULES="${_PM2CONFIG_HEADGEN_MODULES:+$_PM2CONFIG_HEADGEN_MODULES }$_l"
		    ;;
	    esac
	fi
    done
    export _PM2CONFIG_HEADGEN_MODULES

    # Protocols
    _PM2CONFIG_PROTOCOLS="$PM2_PROTOCOLS"
    export _PM2CONFIG_PROTOCOLS

    # C Compiler
    _PM2CONFIG_CC=${PM2_CC:-gcc}
    export _PM2CONFIG_CC

    # CFLAGS
    _PM2CONFIG_CFLAGS="-D${PM2_ARCH} -D${PM2_SYS}"
    for _lib in appli common $PM2_LIBS ; do
	eval _LIB='$'${_lib}_to_upper
	eval _flags=\"'$'PM2_${_LIB}_CFLAGS -D${_LIB}\"
	# répertoire de génération AVANT
	eval _geninc='$'PM2_${_LIB}_GENERATE_INCLUDE
	if [ "$_geninc" = true ]; then
	    eval _flags=\"$_flags -I\$_PM2CONFIG_${_lib}_INCLUDE_DIR\"
	fi
	# répertoire standard APRES (permet de générer des fichiers existants)
	if [ -d "${PM2_ROOT}/modules/$_lib/include" ]; then
	    _flags="$_flags -I${PM2_ROOT}/modules/$_lib/include"
	fi
	_PM2CONFIG_CFLAGS="$_PM2CONFIG_CFLAGS $_flags"
    done
    export _PM2CONFIG_CFLAGS
    pm2config_remove_dupplicates_keep_first _PM2CONFIG_CFLAGS

    # CFLAGS "kernel"
    for _lib in $PM2_LIBS ; do
	eval _LIB='$'${_lib}_to_upper
	eval _PM2CONFIG_${_lib}_KERNEL_CFLAGS=\"\$_PM2CONFIG_CFLAGS '$'PM2_${_LIB}_CFLAGS_KERNEL -D${_LIB}_KERNEL -DMODULE=${_lib}\"
	eval export _PM2CONFIG_${_lib}_KERNEL_CFLAGS
	eval pm2config_remove_dupplicates_keep_first _PM2CONFIG_${_lib}_KERNEL_CFLAGS
    done
    for _lib in appli common ; do
	eval _LIB='$'${_lib}_to_upper
	eval _PM2CONFIG_${_lib}_KERNEL_CFLAGS=\"\$_PM2CONFIG_CFLAGS '$'PM2_${_LIB}_CFLAGS_KERNEL\"
	eval export _PM2CONFIG_${_lib}_KERNEL_CFLAGS
	eval pm2config_remove_dupplicates_keep_first _PM2CONFIG_${_lib}_KERNEL_CFLAGS
    done

    # early LDFLAGS
    for _lib in $PM2_LIBS appli common ; do
	eval _LIB='$'${_lib}_to_upper
	eval _PM2CONFIG_EARLY_LDFLAGS=\"\$_PM2CONFIG_EARLY_LDFLAGS '$'PM2_${_LIB}_EARLY_LDFLAGS\"
	eval _flags=\"'$'PM2_${_LIB}_EARLY_OBJECT_FILES\"
	for _f in $_flags ; do
	    eval _PM2CONFIG_EARLY_LDFLAGS=\"\$_PM2CONFIG_EARLY_LDFLAGS \$_PM2CONFIG_${_lib}_OBJ_DIR/$_f\"
	done
    done

    export _PM2CONFIG_EARLY_LDFLAGS

    # early LDFLAGS "kernel":
    for _lib in $PM2_LIBS appli common ; do
	eval _LIB='$'${_lib}_to_upper
	eval _PM2CONFIG_${_lib}_KERNEL_EARLY_LDFLAGS=\"'$'PM2_${_LIB}_EARLY_LDFLAGS_KERNEL\"
	eval _flags=\"'$'PM2_${_LIB}_EARLY_OBJECT_FILES_KERNEL\"
	for _f in $_flags ; do
	    eval _PM2CONFIG_${_lib}_KERNEL_EARLY_LDFLAGS=\"\$_PM2CONFIG_${_LIB}_KERNEL_EARLY_LDFLAGS \$_PM2CONFIG_${_lib}_OBJ_DIR/$_f\"
	done
        eval export _PM2CONFIG_${_lib}_KERNEL_EARLY_LDFLAGS
    done

    # LDFLAGS
    _requested=""
    _extra=""
    _extra_ld_path=""
    _PM2CONFIG_LD_PATH=""
    for _lib in $PM2_LIBS ; do
	eval _LIB='$'${_lib}_to_upper
	eval _requested=\"\$_requested \$PM2_${_LIB}_LIBNAME\"
	eval _PM2CONFIG_LD_PATH=\"\$_PM2CONFIG_LD_PATH -L\$_PM2CONFIG_${_lib}_LIB_DIR\"
	eval _extra_ld_path=\"\$_extra_ld_path \$PM2_${_LIB}_LD_PATH\"
	eval _extra=\"\$_extra \$PM2_${_LIB}_LIBS\"
	eval _PM2CONFIG_${_lib}_LD_PATH=\"\$PM2_${_LIB}_LD_PATH\"
	eval _PM2CONFIG_${_lib}_LIBS=\"\$PM2_${_LIB}_LIBS\"
	eval export _PM2CONFIG_${_lib}_LIBS
    done
    _PM2CONFIG_LD_PATH="$_PM2CONFIG_LD_PATH $_extra_ld_path"
    export _PM2CONFIG_LD_PATH
    pm2config_remove_dupplicates_keep_first _PM2CONFIG_LD_PATH

    _PM2CONFIG_LD_LIBS=""
    for _lib in $_PM2CONFIG_DIRTY_ORDERED_LIBS ; do
	case " $_requested " in
	    *\ $_lib\ *)
		_PM2CONFIG_LD_LIBS="$_PM2CONFIG_LD_LIBS -l${_lib}${_PM2CONFIG_EXT}"
		;;
	    *) ;;
	esac
    done
    if [ $PM2_SYS = "LINUX_SYS" -o $PM2_SYS = "GNU_SYS" ]; then
    	_PM2CONFIG_LD_LIBS="-Xlinker --start-group $_PM2CONFIG_LD_LIBS $_extra -Xlinker --end-group"
    else
    # repeating libs twice should be sufficient for back-dependancies (tbx uses marcel_mutex_init/lock/unlock for instance)
    	_PM2CONFIG_LD_LIBS="$_PM2CONFIG_LD_LIBS $_PM2CONFIG_LD_LIBS $_extra"
    fi

    export _PM2CONFIG_LD_LIBS

    _PM2CONFIG_LIBS="$_PM2CONFIG_LD_PATH $_PM2CONFIG_LD_LIBS"
    export _PM2CONFIG_LIBS
}

pm2config_parse_cmdline() # args
{
    _ARGV=${@:+"$@"}

    _PROGNAME="pm2-config"

    [ $# -ge 1 ] || pm2config_usage 1

    _cflags=false
    _libs_L=false
    _libs_l=false
    _flavor=
    _libs=

    _libdir=false
    _includedir=false
    _bindir=false
    _srcdir=false
    _objdir=false
    _cppdir=false
    _depdir=false
    _asmdir=false
    _tmpdir=false
    _stampdir=false
    _builddir=false
    _makdir=false

    _dirtoshow=
    _libs_add_mad=false
    _libs_add_all=false
    _kernel=false
    _other=false
    _gen_mak=false

    while [ $# -gt 0 ] ; do
	case "$1" in
	    -*=*) _optarg="${1#*=}" ;;
	    *) _optarg= ;;
	esac

    case $1 in
    --version)
	echo pm2-libs 3.0
	exit 0
	;;
    --help)
	pm2config_usage 0
	;;
    --kernel)
	_kernel=true
	;;
    --*dir)
	_dirname1=${1#--}
	_dirname1=${_dirname1%dir}
	eval _dirname='$'_${_dirname1}dir
	test -z "$_dirname" && exit 1
	eval ${_dirname1}dir=true
	_dirtoshow="$_dirname1"
	;;
    --ext|--protocols|--modules|--profmods|--headgenmods|--cc|--stampfile|--loader|--preload|--ld-library-path)
	_other=$1
	;;
    --cflags)
       	_cflags=true
       	;;
    --libs)
       	_libs_L=true
	_libs_l=true
       	;;
    --libs-only-L)
	_libs_L=true
	;;
    --libs-only-l)
	_libs_l=true
	;;
    --flavor=*)
	PM2_FLAVOR=$_optarg
	;;
    -*)
	echo Unknown option \`$1\' 1>&2
	pm2config_usage 1
	;;
    all)
	_libs_add_all=true
	;;
    *)
	_PM2CONFIG_ALL_MODULES=`${PM2_ROOT}/bin/pm2-module modules --with-common`

	if [ -z "$_PM2CONFIG_ALL_MODULES" ]; then
	    echo "No PM2 module detected." 1>&2
	    echo "Please check your PM2_ROOT environment variable and/or do 'make init'" 1>&2
	    exit 1
	fi

	case " $_PM2CONFIG_ALL_MODULES " in
	*\ $1\ *)
	    pm2config_add_list _libs "$1"
	    ;;
	*)
	    echo Unknown library \`$1\' 1>&2
	    ;;
	esac
	;;
    esac
    shift
    done    

    ##########################################################################

    pm2config_set_vars

    ##########################################################################

    if [ "$_libs_add_all" = true ]; then
	pm2config_add_list _libs "common appli $PM2_LIBS"
    fi

    if [ "$_other" != false ]; then
	_dirtoshow=$_other
    fi

    # on a demandé des repertoires/réglages...
    if [ -n "${_dirtoshow}" ]; then
	case $_dirtoshow in
	    --ext)
		echo $_PM2CONFIG_EXT
		exit 0
		;;
	    --protocols)
		echo $_PM2CONFIG_PROTOCOLS
		exit 0
		;;
	    --modules)
		echo $_PM2CONFIG_MODULES
		exit 0
		;;
	    --profmods)
		echo $_PM2CONFIG_PROF_MODULES
		exit 0
		;;
	    --headgenmods)
		echo $_PM2CONFIG_HEADGEN_MODULES
		exit 0
		;;
	    --cc)
		echo $_PM2CONFIG_CC
		exit 0
		;;
	    --loader)
		echo $_PM2CONFIG_LOADER
		exit 0
		;;
	    --preload)
		echo $_PM2CONFIG_PRELOAD
		exit 0
		;;
	    --ld-library-path)
		echo $_PM2CONFIG_LD_LIBRARY_PATH
		exit 0
		;;
	    --stampfile)
		if [ -z "$_libs" ]; then
		    echo $_PM2CONFIG_FLAVOR_STAMP_FILE
		elif [ "$_libs_add_all" = "true" ] ; then
		    echo $_PM2CONFIG_LIB_STAMP_FILES
		else
		    for _lib in $_libs; do
			_LIB=`echo $_lib | tr '[a-z]' '[A-Z]'`
			eval _libname=\$PM2_${_LIB}_LIBNAME
			eval echo \$_PM2CONFIG_${_libname}_STAMP_FILES
		    done
		fi
		exit 0
		;;
	    build)
		echo $_PM2CONFIG_BUILD
		exit 0
		;;
	    stamp)
		echo $_PM2CONFIG_STAMP_DIR
		exit 0
		;;
	    mak)
		echo $_PM2CONFIG_MAK_DIR
		exit 0
		;;
	esac
	if [ -z "${_libs/* *}" ]; then
	    echo "This option needs exactly ONE lib" 1>&2
	    exit 1
	fi
	case " $PM2_LIBS " in
	    *\ $_libs\ *)
		_d=`echo $_dirtoshow | tr '[a-z]' '[A-Z]'`
		eval echo \$_PM2CONFIG_${_libs}_${_d}_DIR
		;;
	    *)
		;;
	esac
	exit 0
    fi

    if [ -z "$_libs" ]; then
	_libs="common appli $PM2_LIBS"
    fi

    # On demande des flags pour un module précis
    if [ "$_kernel" = true ] ; then
        if [ -z "${_libs/* *}" ]; then
	    echo "This option needs exactly ONE lib" 1>&2
	    exit 1
	fi
    fi

    # On a demandé les CFLAGS
    if [ "$_cflags" = true ] ; then
	if [ "$_kernel" = true ] ; then
	    eval echo \$_PM2CONFIG_${_libs}_KERNEL_CFLAGS
	else
	    echo $_PM2CONFIG_CFLAGS
	fi
	exit 0
    fi

    # on a demandé les LDFLAGS
    _flags=""
    if [ "$_libs_L" = true ] ; then
	if [ "$_kernel" = true ] ; then
	    eval _flags=\"\${_PM2CONFIG_${_libs}_LD_PATH}\"
	else
	    _flags="$_PM2CONFIG_LD_PATH"
	fi
    fi
    if [ "$_libs_l" = true ]; then
        if [ "$_kernel" = true ] ; then
	    eval _flags=\"\$_flags \${_PM2CONFIG_${_libs}_LIBS}\"
	else
	    _flags="$_flags $_PM2CONFIG_EARLY_LDFLAGS $_PM2CONFIG_LD_LIBS"
	fi
    fi
    echo $_flags
    exit 0
}

######################
# Programme principal
######################

_PM2CONFIG_DIRTY_ORDERED_MODULES="profile leoparse pm2 dsm mad1 mad2 mad3 mad4 marcel tbx ntbx init stackalign leonie ezflavor sigmundlib sigmund sigmundps xsigmund supertrace bubbles bubblegum"

_PM2CONFIG_DIRTY_ORDERED_LIBS="init leoparse pm2 dsm mad marcel pthread tbx ntbx profile pm2debug stackalign sigmundlib sigmund sigmundps xsigmund"

if [ "$1" = --source-mode ] ; then
    pm2config_set_vars "DUMMY ARGS"
else
    pm2config_parse_cmdline ${@:+"$@"}
    exit 0
fi

