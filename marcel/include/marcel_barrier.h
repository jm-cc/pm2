 
/* This file has been autogenerated from include/marcel_barrier.h.m4 */
/*
 * PM2: Parallel Multithreaded Machine
 * Copyright (C) 2001 "the PM2 team" (see AUTHORS file)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 */

#depend "linux_spinlock.h[macros]"
#section common
#define MA_BARRIER_USE_MUTEX 0

#section types
typedef enum marcel_barrier_mode { 
  MA_BARRIER_SLEEP_MODE, 
  MA_BARRIER_YIELD_MODE 
} ma_barrier_mode_t;

#section macros
#define MARCEL_BARRIER_SERIAL_THREAD (-1)
#ifdef MA__IFACE_PMARCEL
#  define PMARCEL_BARRIER_SERIAL_THREAD (MARCEL_BARRIER_SERIAL_THREAD)
#endif

#ifdef MA_BARRIER_USE_MUTEX
#define MARCEL_BARRIER_INITIALIZER(count) { \
	.init_count	= (count),\
        .m              = MARCEL_MUTEX_INITIALIZER,		\
        .c              = MARCEL_COND_INITIALIZER,		\
	.leftB		= MA_ATOMIC_INIT(count), \
	.leftE		= MA_ATOMIC_INIT(0), \
	.mode		= MA_BARRIER_SLEEP_MODE, \
}
#else
#define MARCEL_BARRIER_INITIALIZER(count) { \
	.init_count	= (count),\
	.lock		= (struct _marcel_fastlock) MA_MARCEL_FASTLOCK_UNLOCKED, \
	.leftB		= MA_ATOMIC_INIT(count), \
	.leftE		= MA_ATOMIC_INIT(0), \
	.mode		= MA_BARRIER_SLEEP_MODE, \
}
#endif

#ifdef MA__IFACE_PMARCEL
#  define PMARCEL_BARRIER_INITIALIZER(count) MARCEL_BARRIER_INITIALIZER(count)
#endif

#section types
#depend "asm/linux_atomic.h[marcel_types]"
#depend "marcel_fastlock.h[structures]"
#depend "marcel_threads.h[types]"
#depend "marcel_mutex.h[types]"
#depend "marcel_cond.h[types]"

typedef struct marcel_barrierattr {
	int pshared;
	ma_barrier_mode_t mode;
} marcel_barrierattr_t;
#ifdef MA__IFACE_PMARCEL
typedef marcel_barrierattr_t pmarcel_barrierattr_t;
#endif

typedef struct marcel_barrier {
	unsigned int init_count;
#ifdef  MA_BARRIER_USE_MUTEX
	marcel_mutex_t m;
	marcel_cond_t c;
#else
	struct _marcel_fastlock lock;
#endif
	ma_atomic_t leftB;
	ma_atomic_t leftE;
	ma_barrier_mode_t mode;
} marcel_barrier_t;

#ifdef MA__IFACE_PMARCEL
typedef marcel_barrier_t pmarcel_barrier_t;
#endif

#section functions

int marcel_barrier_setcount(marcel_barrier_t *barrier, unsigned int count);
int marcel_barrier_addcount(marcel_barrier_t *barrier, int addcount);
int marcel_barrier_getcount(__const marcel_barrier_t *barrier, unsigned int *count);
int marcel_barrier_wait_begin(marcel_barrier_t *barrier);
int marcel_barrier_wait_end(marcel_barrier_t *barrier);

#ifdef MA__IFACE_PMARCEL
int pmarcel_barrier_wait_begin(pmarcel_barrier_t *barrier);
int pmarcel_barrier_wait_end(pmarcel_barrier_t *barrier);
#endif

extern int marcel_barrier_init (marcel_barrier_t *__restrict barrier,
                                __const marcel_barrierattr_t *__restrict attr, unsigned num) __THROW;

extern int marcel_barrier_destroy (marcel_barrier_t *barrier) __THROW;

extern int marcel_barrier_wait (marcel_barrier_t *__restrict barrier) __THROW;

extern int marcel_barrierattr_init (marcel_barrierattr_t *attr) __THROW;

extern int marcel_barrierattr_destroy (marcel_barrierattr_t *attr) __THROW;

extern int marcel_barrierattr_getpshared (__const marcel_barrierattr_t *
                                        __restrict attr,
                                        int *__restrict pshared) __THROW;

extern int marcel_barrierattr_setpshared (marcel_barrierattr_t *attr,
                                        int pshared) __THROW;

extern int marcel_barrierattr_getmode (__const marcel_barrierattr_t *
                                        __restrict attr,
                                        ma_barrier_mode_t *__restrict mode) __THROW;

extern int marcel_barrierattr_setmode (marcel_barrierattr_t *attr,
                                        ma_barrier_mode_t mode) __THROW;
#ifdef MA__IFACE_PMARCEL
extern int pmarcel_barrier_init (pmarcel_barrier_t *__restrict barrier,
                                __const pmarcel_barrierattr_t *__restrict attr, unsigned num) __THROW;

extern int pmarcel_barrier_destroy (pmarcel_barrier_t *barrier) __THROW;

extern int pmarcel_barrier_wait (pmarcel_barrier_t *__restrict barrier) __THROW;

extern int pmarcel_barrierattr_init (pmarcel_barrierattr_t *attr) __THROW;

extern int pmarcel_barrierattr_destroy (pmarcel_barrierattr_t *attr) __THROW;

extern int pmarcel_barrierattr_getpshared (__const pmarcel_barrierattr_t *
                                        __restrict attr,
                                        int *__restrict pshared) __THROW;

extern int pmarcel_barrierattr_setpshared (pmarcel_barrierattr_t *attr,
                                        int pshared) __THROW;

extern int pmarcel_barrierattr_getmode (__const pmarcel_barrierattr_t *
                                        __restrict attr,
                                        ma_barrier_mode_t *__restrict mode) __THROW;

extern int pmarcel_barrierattr_setmode (pmarcel_barrierattr_t *attr,
                                        ma_barrier_mode_t mode) __THROW;

#endif

