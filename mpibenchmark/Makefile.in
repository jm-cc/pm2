srcdir := @srcdir@
VPATH  := $(srcdir)

include @abs_top_builddir@/common_vars.mk

BENCH_BASE     := mpi_bench_sendrecv mpi_bench_bidir mpi_bench_send_overhead mpi_bench_multi mpi_bench_multi_hetero mpi_bench_noncontig mpi_bench_multi_nonblock
BENCH_OVERLAP  := $(patsubst $(srcdir)/%.c, %, $(wildcard $(srcdir)/mpi_bench_overlap_*.c))
BENCH_DATATYPE := $(patsubst $(srcdir)/%.c, %, $(wildcard $(srcdir)/mpi_bench_sparse_*.c))
BENCH_THREAD   := $(patsubst $(srcdir)/%.c, %, $(wildcard $(srcdir)/mpi_bench_thread_*.c))
BENCH_NOISE    := $(patsubst $(srcdir)/%.c, %, $(wildcard $(srcdir)/mpi_bench_noise_*.c))
BENCH_RMA      := $(patsubst $(srcdir)/%.c, %, $(wildcard $(srcdir)/mpi_bench_rma_*.c))
BENCH_RMAOVERLAP := $(patsubst $(srcdir)/%.c, %, $(wildcard $(srcdir)/mpi_bench_rmaoverlap_*.c))
BENCH_REQS       := $(patsubst $(srcdir)/%.c, %, $(wildcard $(srcdir)/mpi_bench_reqs_*.c))

BENCH_ALL      := $(BENCH_BASE) $(BENCH_OVERLAP) $(BENCH_DATATYPE) $(BENCH_THREAD) $(BENCH_NOISE) $(BENCH_RMA) $(BENCH_RMAOVERLAP) $(BENCH_REQS)

BENCH_SUITES   := mpi_bench_suite_base mpi_bench_suite_overlap mpi_bench_suite_thread mpi_bench_suite_rma mpi_bench_suite_rmaoverlap mpi_bench_suite_reqs

TARGET_BIN = $(BENCH_ALL) $(BENCH_SUITES)
TARGET_LIB =
SUBDIRS =

INSTALL_BIN     = $(TARGET_BIN) mpi_bench_extract
INSTALL_LIB     = $(TARGET_LIB)
INSTALL_INCLUDE = 

TARGETS = subdirs $(TARGET_BIN) $(TARGET_LIB)

MPICC     = @MPICC@
CC       := $(MPICC)
CFLAGS   += -Wall -I. @hwloc_CFLAGS@ @DEFS@
LD       := $(CC)
LDFLAGS  +=
LIBS     += @MPILIBS@ -lm @hwloc_LIBS@
CC_DEP   := $(MPICC) @CDEPFLAGS@

CLEAN_MORE += $(wildcard stub_*.c)

include @abs_top_builddir@/common_rules.mk

stub_%.c:
	@echo "  [GEN]    $@"
	$(Q)echo "/* automatically generated */"  > $@
	$(Q)echo "#include <$(srcdir)/mpi_bench_generic.h>" >> $@
	$(Q)echo "extern const struct mpi_bench_s mpi_bench_$*;" >> $@
	$(Q)echo "const struct mpi_bench_s*mpi_bench_default = &mpi_bench_$*;" >> $@

stub_%.o: stub_%.c

$(BENCH_ALL): mpi_bench_%: mpi_bench_%.o mpi_bench_generic.o mpi_bench_single.o stub_%.o

mpi_bench_suite_base: $(patsubst %, %.o, mpi_bench_suite_base mpi_bench_generic $(BENCH_BASE))

mpi_bench_suite_overlap: $(patsubst %, %.o, mpi_bench_suite_overlap mpi_bench_generic $(BENCH_BASE) $(BENCH_OVERLAP))

mpi_bench_suite_thread: $(patsubst %, %.o, mpi_bench_suite_thread mpi_bench_generic $(BENCH_BASE) $(BENCH_THREAD))

mpi_bench_suite_rma: $(patsubst %, %.o, mpi_bench_suite_rma mpi_bench_generic $(BENCH_RMA))

mpi_bench_suite_rmaoverlap: $(patsubst %, %.o, mpi_bench_suite_rmaoverlap mpi_bench_generic $(BENCH_RMA) $(BENCH_RMAOVERLAP) $(BENCH_BASE))

mpi_bench_suite_reqs: $(patsubst %, %.o, mpi_bench_suite_reqs mpi_bench_generic $(BENCH_REQS))

ifeq (@HAVE_OPENMP@,yes)
BENCH_OPENMP = mpi_bench_noise_omp_nocomm mpi_bench_thread_NtoN mpi_bench_suite_thread
$(BENCH_OPENMP): CFLAGS  += @OPENMP_CFLAGS@
$(BENCH_OPENMP): LDFLAGS += @OPENMP_CFLAGS@
endif

docs: doxygen
