<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE TEXT SYSTEM "file:///net/cvs/runtime/usr/xml2html/data/xml/DOCUMENT.dtd">

<TEXT>

<P>
<NOTE>
  Nathalie: Parler de Madeleine et Marcel
</NOTE>
</P>

<P>
We have gathered in this section some advanced material as a reference
for the advanced user. Beginners should probably skip this section on
a first reading. 
</P>

<SUBSECTION TITLE="Thread synchronization">

<P>
PM2 provides a number of POSIX-like synchronization facilities to
synchronize the threads within a node and among remote nodes: locks,
mutexes, semaphores, conditions, barriers. The facilities which are
local to a node are provided by the Marcel thread scheduler. Remote
synchronization facilities are provided by PM2.
</P>

<SUBSUBSECTION TITLE="Locks">

<P>
The lowest level of synchronization is to temporarily disable the scheduler
at the local node. This guarantees that the successive
instructions will be issued atomically. This is done using the
<TT>pm2_freeze</TT>/<TT>pm2_unfreeze</TT> routines. These are simply wrappers for
two essential Marcel routines respectively called <TT>lock_task</TT> and
<TT>unlock_task</TT>. The <TT>lock_task</TT> routine locks a Marcel thread within
the scheduler, disabling any external interrupt. No other thread
whatsoever can be scheduled until the <TT>unlock_task</TT> has been called.
These routines may be nested. It is up to the user to guarantee proper
nesting. One has to be uttermost careful that PM2/Marcel provides no
protection against deadlock. Also, locking a task within a node
disables any progress of the daemon service threads: no message can be
received, etc. It is up to the user to guarantee that no harm may
result, for instance from overfilling communication buffers.
</P>

<PROGRAM FILE="./Progs/freeze.c" TITLE="Freezing and unfreezing the scheduler" LABEL="prog:freeze"/>

<P>
Consider Program <REF LABEL="prog:freeze"/>. The main thread spawns an even
number of threads on the local node. Each even thread increases the
shared variable <TT>counter</TT> for <TT>N</TT> times, and each odd thread decreases
it for <TT>N</TT> times, too. To emphasize that increasing and decreasing a
variable is <EM>not</EM> an atomic operation at the level of machine
code, we have written it explicitly as a Load/Add/Store series of
operations. (Observe that the variable <TT>tmp</TT> has been registered as
<TT>volatile</TT> to prevent the wise compiler to optimize our
trick!). The expected final value for <TT>counter</TT> is<SPACE/>0.  

<PROGRAM FILE="./Progs/freeze.txt"/>
</P>

<P>
It is interesting to run the program without the calls to
<TT>pm2_freeze</TT> and <TT>pm2_unfreeze</TT> routines, and see what happens.
At least on my current workstation, this yields the following result:

<PROGRAM FILE="./Progs/freeze2.txt"/>
</P>

<P>
It shows that getting interrupted in the middle of the critical section
is a relatively frequent event, which should definitely not be
overlooked by the PM2 programmer! 
</P>

</SUBSUBSECTION>

<SUBSUBSECTION TITLE="Mutexes" LABEL="sec:mutex">

<P>
Freezing is sufficient for most simple purpose, when a (short!)
sequence of actions has to be atomically issued. Yet, this does not
handle the case of sequences where the thread may get temporarily
suspended, from its own request or not. In this case, more
sophisticated facilities have to be used, for instance mutexes (for
<EM>mutual exclusion</EM>). Consider Program <REF LABEL="prog:mutex"/>, and
assume that for some reason, the thread should be suspended right in
the middle of the critical section. We simulate this by a call to the
<TT>marcel_yield</TT> routine, which yields the control back to the
scheduler and inserts back the thread into the ready list. Running the
program without any synchronization facility returns a non-null value,
even for a few iterations. A mutex has to be first initialized using
the <TT>marcel_mutex_init</TT> routine, with a number of attributes. As
usual, <TT>NULL</TT> is a sensible default in a first place.  A mutex can
afterward be acquired and released, respectively with the
<TT>marcel_mutex_lock</TT> and <TT>marcel_mutex_unlock</TT> routines.
</P>

<PROGRAM FILE="./Progs/mutex.c" TITLE="Using mutexes in PM2" LABEL="prog:mutex"/>

</SUBSUBSECTION>

<SUBSUBSECTION TITLE="Semaphores">

<P>
Marcel also provides semaphores. A semaphore can be initialized with
the <TT>marcel_sem_init</TT> routine with an initial integer value. It can
be taken with <TT>marcel_sem_P</TT>, and freed with <TT>marcel_sem_V</TT>, as
(probably?) expected.
</P>

<PROGRAM FILE="./Progs/semaphore.c" TITLE="Using semaphores in PM2" LABEL="prog:semaphore"/>

<P>
In fact, completion is just a simple wrapping for semaphore. On
initializing a completion, a semaphore is initialized, and its address
and native node are stored into a structure. Waiting for a completion
leads in issuing a <TT>marcel_sem_P</TT> on the semaphore.  Signaling
completion includes the following action: if the local node is the
same as the native node, then a call to <TT>marcel_sem_V</TT> is issued for
the semaphore; otherwise, a RPC request is issued to the native node,
with the the signaling routine as its service and the completion as
its argument. Program <REF LABEL="prog:semaphore"/> is the same as
Program <REF LABEL="prog:mutex"/>, but completions have been replaced by
explicit semaphores.
</P>

</SUBSUBSECTION>

<SUBSUBSECTION TITLE="Conditions">

<P>
Marcel finally provides conditions variables associated to mutexes,
with a Mesa-style semantics. A thread which signals a condition keeps
on running. One of the blocked threads waiting for this condition is
selected and appended to the queue of the ready to run threads. As a
consequence, <EM>users cannot be guaranteed that a thread which exits
  a wait is immediately executed</EM>. Actually, no hypothesis may be made
about the state of the thread at the time it is eventually
scheduled. This is the reason why it is necessary to encapsulate
waiting commands within <TT>while</TT> loops: the first action of a thread
which has been signaled is then to retest the condition which
commanded its waiting; if it does not hold, then it goes back to
sleep, waiting again to be signaled.
</P>

<PROGRAM FILE="./Progs/condition.c" TITLE="Using condition variables in PM2" LABEL="prog:condition"/>

<P>
In Program <REF LABEL="prog:condition"/>, we have further constrained the
shared counter to take values only between <TT>MIN_COUNTER</TT> and
<TT>MAX_COUNTER</TT>. This is done by using two condition variables
to control incrementation and decrementation, similarly to a classical
producer-consumer scheme (We have reverted to direct operations on
the <TT>counter</TT> variable to enhance readability).
</P>

<P>
A condition is declared using the <TT>marcel_cond_init</TT> routine. It
takes as arguments the condition and an attribute. As usual, <TT>NULL</TT>
is a sensible default for the attribute. Waiting on a condition makes
sense <EM>only</EM> within a critical section controlled by some mutex.
The mutex is passed to the routine <TT>marcel_cond_wait</TT> as an
additional parameter. The very first job of this routine is to acquire
the mutex. In the regular use of condition variables, the waiting
routine is called within the critical section controlled by this very
mutex, so that is it necessarily free. But it is not mandatory to do
so, though the writer cannot see any sensible example of such a
situation at this time... The condition is signaled using the
<TT>marcel_cond_signal</TT> routine. Observe this does not require any
reference to the controlling mutex. This routine wakes up exactly one
waiting thread, if any exists. Alternatively, the
<TT>marcel_cond_broadcast</TT> routine wakes up <EM>all</EM> threads waiting
on the given condition. It is also possible to specify a limit on the
time a thread should wait for a condition, using the
<TT>marcel_cond_timedwait</TT> routine. In this case, the routine returns a
<TT>ETIMEDOUT</TT> value if the thread has not been signaled within the
specify delay.
</P>

<NOTE>
  LB to RN: Please check carefully!
</NOTE>

</SUBSUBSECTION>

</SUBSECTION>

<SUBSECTION TITLE="Profiling PM2 programs" LABEL="sec:profiling">

<NOTE>
  LB: Yet to do. 
</NOTE>

</SUBSECTION>

<SUBSECTION TITLE="Miscellaneous">

<SUBSUBSECTION TITLE="Application initialization with PM2" LABEL="sec:startupfunc">

<NOTE>
  LB: Yet to do. Describe <TT>pm2_set_startup_func</TT>?
</NOTE>

</SUBSUBSECTION>

</SUBSECTION>

</TEXT>
