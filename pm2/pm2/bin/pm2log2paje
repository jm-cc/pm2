#!/usr/bin/perl

use strict;
use warnings;
use diagnostics;

my($paje_date_delay)=0;
#my($paje_date_delay)=0.001;
	
# Thread view
# [#thread]
# push/pop function
# act_id
# lwp
# proc

# LWP view
# [#LWP]
# thread_id
# act_id
# proc

# ACT view
# [#act_id]
# thread_id
# lwp
# proc

# Proc View
# [#proc]
# thread_id
# lwp
# act_id

my(%procs)=();

my(%LWPs)=();

my(%userThreads);

################################################################
# Pour être sur que les entités existent (sinon, on les crée)
sub ensure_ut {
    my($date)=shift;
    my($proc)=shift;
    my($lwp)=shift;
    my($cur_utid)=shift;
    my($utid)=shift;

    if (defined($userThreads{$utid})) {
	return 1;
    }
    #print STDERR "Creating Thread $utid on lwp $lwp\n";
    my(%infos);
    $infos{"lwp"}=lwp_get_id($lwp);
    $userThreads{$utid}=\%infos;

    emit_EV($date, $proc, lwp_get_act($lwp), lwp_get_id($lwp),
	    $cur_utid, "CREATE_UT", $utid);
    return 0;
}

sub ensure_lwp {
    my($date)=shift;
    my($proc)=shift;
    my($id)=shift;
    my($cur_utid)=shift;
    my($first_utid)=shift;

    if (defined($LWPs{$id})) {
	return 1;
    }
    #print STDERR "Creating LWP $id\n";

    my(%infos);
    $infos{"id"}=$id;
    $infos{"act"}=0;
    $infos{"utid"}=$first_utid;
    
    $LWPs{$id}=\%infos;

    my($lwp)=\%infos;
    emit_EV($date, $proc, lwp_get_act($lwp), lwp_get_id($lwp),
	    $cur_utid, "CREATE_LWP", lwp_get_id($lwp));
    return 0;
}

sub ensure_proc {
    my($date)=shift;
    my($id)=shift;
    my($lwp)=shift;
    
    if (defined($procs{$id})) {
	return 1;
    }
    emit_EV($date, $id, 0, 0, 0, "CREATE_PROC", $id);
    my(%infos);
    $infos{"id"}=$id;
    $infos{"lwp"}= -1;
    $procs{$id}=\%infos;
    
    return 0;
}

################################################################
# Gestion de la structure LWP
# lwp:
# "utid" -> utid ordonnancé dessus
# "act"  -> act dans laquelle le LWP est ordonnancé
# "USW_proc"? -> proc du prochain UT
# "new_utid"? -> utid du prochain UT
# "USW_Date"? -> Date du USW enregistré

sub lwp_set_utid {
    my($lwp)=shift;
    my($utid)=shift;
    $lwp->{"utid"}=$utid;
}

sub lwp_get_utid {
    my($lwp)=shift;
    return $lwp->{"utid"};
}

sub lwp_get_act {
    my($lwp)=shift;
    return $lwp->{"act"};
}

sub lwp_record_USW {
    my($lwp)=shift;
    my($date)=shift;
    my($new_utid)=shift;
    my($USW_proc)=shift;

    $lwp->{"new_utid"} = $new_utid;
    $lwp->{"USW_proc"} = $USW_proc;
    $lwp->{"USW_Date"} = $date;
}

sub lwp_delay_USW {
    my($lwp)=shift;
    my($date)=shift;
    my($utid)=shift;
    
    if (defined($lwp->{"new_utid"})) {
	print STDERR "USW delayed to $date by $utid\n";
	$lwp->{"USW_Date"}=$date;
    }
}

sub lwp_can_run {
    my($lwp)=shift;
    my($utid)=shift;

    if (defined ($lwp->{"new_utid"}) && ($lwp->{"new_utid"} eq $utid)) {
	emit_EV($lwp->{"USW_Date"}, $lwp->{"USW_proc"}, lwp_get_act($lwp), 
		lwp_get_id($lwp), lwp_get_utid($lwp),
		"UEV_HAND_GIVE_LINKED", "");
	$lwp->{"utid"}=$lwp->{"new_utid"};
	delete($lwp->{"new_utid"});
	emit_EV($lwp->{"USW_Date"}, $lwp->{"USW_proc"}, lwp_get_act($lwp), 
		lwp_get_id($lwp), lwp_get_utid($lwp),
		"UEV_HAND_GET_LINKED", "");
	return 1;
    }
    return 0;
}

sub lwp_get_id {
    my($lwp)=shift;

    return $lwp->{"id"};
}

################################################################
# Gestion de la structure PROC
# proc:
# "lwp"  -> LWP ordonnancé (numéro)
# "new_lwp"? -> numéro du prochain LWP
# "KSW_Date"? -> Date du KSW enregistré

################################################################

sub proc_get_lwp {
    my($proc)=shift;
    return $procs{$proc}->{"lwp"};
}

sub proc_get_act {
    my($proc)=shift;
    return 0;
}

sub proc_record_KSW {
    my($proc)=shift;
    my($date)=shift;
    my($new_lwp)=shift;

    $procs{$proc}->{"new_lwp"} = $new_lwp;
    $procs{$proc}->{"KSW_Date"} = $date;
    emit_EV($procs{$proc}->{"KSW_Date"}, $proc, proc_get_act($proc), 
	    proc_get_lwp($proc), 
	    lwp_get_utid(get_lwp_by_num(proc_get_lwp($proc))),
	    "KEV_HAND_GIVE_LINKED", "");
    $procs{$proc}->{"lwp"}=$procs{$proc}->{"new_lwp"};
    delete($procs{$proc}->{"new_lwp"});
    emit_EV($procs{$proc}->{"KSW_Date"}, $proc, proc_get_act($proc), 
	    proc_get_lwp($proc), 
	    lwp_get_utid(get_lwp_by_num(proc_get_lwp($proc))),
	    "KEV_HAND_GET_LINKED", "");
}

sub get_proc {
    return 0;
}

sub get_lwp {
    my($date)=shift;
    my($utid)=shift;

    my($lwp);

    for $lwp (values %LWPs) {
	if (lwp_get_utid($lwp) eq $utid) {
	    lwp_delay_USW($lwp, $date, $utid);
	    return $lwp;
	}
    }
    for $lwp (values %LWPs) {
	if (lwp_can_run($lwp, $utid)) {
	    return $lwp;
	}
    }
    printf STDERR "Unable to find LWP for tid $utid at $date\n";
}

sub get_lwp_by_num {
    my($num)=shift;
    return $LWPs{$num};
}

sub insert_USW {
    my($date)=shift;
    my($old_utid)=shift;
    my($new_utid)=shift;
    my($proc)=shift;
    my($lwp);
    if ( $old_utid eq $new_utid ) {
	printf STDERR "Ignoring USW $old_utid to $new_utid\n";
	return;
    }
    $lwp=get_lwp($date, $old_utid);
    ensure_ut($date, $proc, $lwp, $old_utid, $new_utid) or
	print STDERR "Switching to new thread $new_utid\n";
    lwp_record_USW($lwp, $date, $new_utid, $proc);
}

sub insert_KSW {
    my($date)=shift;
    my($old_lwp)=shift;
    my($new_lwp)=shift;
    my($proc)=shift;
    if ( $old_lwp == $new_lwp ) {
	printf STDERR "Ignoring KSW $old_lwp to $new_lwp\n";
	return;
    }
    proc_record_KSW($proc, $date, $new_lwp);
}

sub insert_UEV {
    my($date)=shift;
    my($utid)=shift;
    my($subtype)=shift;
    my($event)=shift;

    my($lwp)=get_lwp($date, $utid);
    my($proc)=get_proc($date, lwp_get_id($lwp));
    
    emit_EV($date, $proc, lwp_get_act($lwp), lwp_get_id($lwp),
	    $utid, "UEV_".$subtype, $event);
}

################################################################
# Enregistrement des événements
my(@events)=();
sub emit_EV {
    my($date)=shift;
    my($proc)=shift;
    my($act)=shift;
    my($lwp)=shift;
    my($utid)=shift;
    my($ev_type)=shift;
    my($event)=shift;

    my(@event)=($date, $proc, $act, $lwp, $utid, $ev_type, $event);

    push @events, \@event;

}

################################################################
# Affichage (printf) des événements
sub __display_event {
    my($date)=shift;
    my($proc)=shift;
    my($act)=shift;
    my($lwp)=shift;
    my($utid)=shift;
    my($event)=shift;
	#if ($print_time) {
	    printf "%.4i ", $date;
	#}
	#if ($print_proc) {
	    printf "%.2i ", $proc;
	#}
	#if ($print_lwp) {
	    printf "%.2i ", $lwp;
	#}
	#if ($print_act) {
	    printf "%.2i ", $act;
	#}
	#if ($print_thread) {
	    printf "%.10s ", $utid;
	#}
	#if ($print_event) {
	    printf "%s ", $event;
	#}
    print "\n";
}

sub display_event {
    my($event)=shift;
    my($date, $proc, $act, $lwp, $utid, $ev_type, $event_infos);
    
    ($date, $proc, $act, $lwp, $utid, $ev_type, $event_infos)=@{$event};

    $_=$ev_type;
    if (/UEV_HAND_GIVE/) {
	__display_event($date, $proc, $act, $lwp, $utid, "give hand");
    } elsif (/UEV_HAND_GET/) {
	__display_event($date, $proc, $act, $lwp, $utid, "get hand");
    } elsif (/UEV/) {
	__display_event($date, $proc, $act, $lwp, $utid, $event_infos);
    } elsif (/^UEV/) {
	__display_event($date, $proc, $act, $lwp, $utid, $event_infos);
    } elsif (/CREATE_LWP/) {
	__display_event($date, $proc, $act, $lwp, $utid, "Create LWP ".$event_infos);
    } elsif (/CREATE_UT/) {
	__display_event($date, $proc, $act, $lwp, $utid, "Create Thread ".$event_infos);
    } else {
	__display_event($date, $proc, $act, $lwp, $utid, 
			"Unknown event type $ev_type");
    }
}

sub display_events {
    my($event);

    for $event (@events) {
	display_event($event);
    }
}

################################################################
# Génération d'une trace paje
sub paje_entete {
    my($first_date)=$events[0]->[0];
    my($end_date)=$events[$#events]->[0];
    print
	'%EventDef       SetLimits       0'."\n".
	'%       Time    date'."\n".
	'%       StartTime       date'."\n".
	'%       EndTime date'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajeDefineContainerType 1'."\n".
	'%       Time    date'."\n".
	'%       NewType string'."\n".
	'%       ContainerType   string'."\n".
	'%       NewName string'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajeDefineEventType     2'."\n".
	'%       Time    date'."\n".
	'%       NewType string'."\n".
	'%       ContainerType   string'."\n".
	'%       NewName string'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajeDefineStateType     3'."\n".
	'%       Time    date'."\n".
	'%       NewType string'."\n".
	'%       ContainerType   string'."\n".
	'%       NewName string'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajeDefineVariableType  4'."\n".
	'%       Time    date'."\n".
	'%       NewType string'."\n".
	'%       ContainerType   string'."\n".
	'%       NewName string'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajeDefineLinkType      5'."\n".
	'%       Time    date'."\n".
	'%       NewType string'."\n".
	'%       ContainerType   string'."\n".
	'%       SourceContainerType     string'."\n".
	'%       DestContainerType       string'."\n".
	'%       NewName string'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajeDefineEntityValue   6'."\n".
	'%       Time    date'."\n".
	'%       NewValue        string'."\n".
	'%       EntityType      string'."\n".
	'%       NewName string'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajeCreateContainer     7'."\n".
	'%       Time    date'."\n".
	'%       NewContainer    string'."\n".
	'%       NewContainerType        string'."\n".
	'%       Container       string'."\n".
	'%       NewName string'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajeDestroyContainer    8'."\n".
	'%       Time    date'."\n".
	'%       Container       string'."\n".
	'%       NewContainerType        string'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajeNewEvent    9'."\n".
	'%       Time    date'."\n".
	'%       EntityType      string'."\n".
	'%       Container       string'."\n".
	'%       Value   string'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajeSetState    10'."\n".
	'%       Time    date'."\n".
	'%       EntityType      string'."\n".
	'%       Container       string'."\n".
	'%       Value   string'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajePushState   11'."\n".
	'%       Time    date'."\n".
	'%       EntityType      string'."\n".
	'%       Container       string'."\n".
	'%       Value   string'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajePopState    12'."\n".
	'%       Time    date'."\n".
	'%       EntityType      string'."\n".
	'%       Container       string'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajeSetVariable 13'."\n".
	'%       Time    date'."\n".
	'%       EntityType      string'."\n".
	'%       Container       string'."\n".
	'%       Value   double'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajeAddVariable 14'."\n".
	'%       Time    date'."\n".
	'%       EntityType      string'."\n".
	'%       Container       string'."\n".
	'%       Value   double'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajeSubVariable 15'."\n".
	'%       Time    date'."\n".
	'%       EntityType      string'."\n".
	'%       Container       string'."\n".
	'%       Value   double'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajeStartLink   16'."\n".
	'%       Time    date'."\n".
	'%       EntityType      string'."\n".
	'%       Container       string'."\n".
	'%       Value   string'."\n".
	'%       SourceContainer string'."\n".
	'%       Key     string'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajeEndLink     17'."\n".
	'%       Time    date'."\n".
	'%       EntityType      string'."\n".
	'%       Container       string'."\n".
	'%       Value   string'."\n".
	'%       DestContainer   string'."\n".
	'%       Key     string'."\n".
	'%EndEventDef'."\n";
    paje_print(0,$first_date,$first_date." ".($end_date+1));
    paje_print(1,$first_date,"PRG\t0\tProgramme");
    paje_print(1,$first_date,"UV\tPRG\t\"User Thread View\"");
    paje_print(1,$first_date,"LV\tPRG\t\"LWP View\"");
    paje_print(1,$first_date,"PV\tPRG\t\"Processor View\"");
    #paje_print(1,$first_date," UTV_UT\t\tUTV\tUser_Thread");

    paje_group_register("UT",
			paje_event_def("U", 
				       1, "UV\t\"user thread\"",
				       7, \&paje_event_create_u,
				       \&paje_event_distroy),
			paje_event_def("LU",
				       3, "L\t\"LUser Thread\"",
				       6, \&paje_event_create_lu,
				       \&paje_event_distroy, 
				       "L"),
			paje_event_def("PU",
				       3, "P\t\"PUser Thread\"",
				       6, \&paje_event_create_pu,
				       \&paje_event_distroy, 
				       "P")
			);
    paje_group_register("LWP",
			paje_event_def("L", 
				       1, "LV\t\"LWP\"",
				       7, \&paje_event_create_l,
				       \&paje_event_distroy),
			paje_event_def("UL",
				       3, "U\t\"ULWP\"",
				       6, \&paje_event_create_ul,
				       \&paje_event_distroy, 
				       "U"),
			paje_event_def("PL",
				       3, "P\t\"PLWP\"",
				       6, \&paje_event_create_pl,
				       \&paje_event_distroy, 
				       "P")
			);
    paje_group_register("PROC",
			paje_event_def("P", 
				       1, "PV\t\"Processor\"",
				       7, \&paje_event_create_p,
				       \&paje_event_distroy),
			paje_event_def("UP",
				       3, "U\t\"UProc \"",
				       6, \&paje_event_create_up,
				       \&paje_event_distroy, 
				       "U"),
			paje_event_def("LP",
				       3, "L\t\"LProc \"",
				       6, \&paje_event_create_lp,
				       \&paje_event_distroy, 
				       "L")
			);
    paje_group_register("UF",
			paje_event_def("UF",
				       3, "U\tFunctions",
				       6, \&paje_event_create_uf,
				       \&paje_event_distroy));
    paje_group_register("UE",
			paje_event_def("UE",
				       2, "U\t\"Alt_Events\"",
				       6, \&paje_event_create_ue,
				       \&paje_event_distroy));

    paje_group_print($first_date);
    #paje_print(3,$first_date,' UTV_UT_LWP   UTV_UT LWP');
    paje_print(7,$first_date,"PRG1\tPRG\t0\tProgramme");
    paje_print(7,$first_date,"UV1\tUV\tPRG1\t\"User Thread View\"");
    paje_print(7,$first_date,"LV1\tLV\tPRG1\t\"LWP View\"");
    paje_print(7,$first_date,"PV1\tPV\tPRG1\t\"Processor View\"");

    #paje_print(6,$first_date,"ULnone\tUL\t\"Lwp Dummy\"");
#	'6  0.00220 R            S      Running'."\n".
#	'6  0.00230 B            S      Blocked'."\n".
#	'6  0.00220 F1           FUNC   "function A"'."\n".
#	'6  0.00230 F2           FUNC   "Function B"'."\n".
#	'7  0.10100 T1           UT     UTV1    Thread_1'."\n".
#	"7  0.10100 T2           UT     UTV1    Thread_2\n";
}

my(%paje_groups)=();

################################################################
# Paje : gestion collections générique

#group
#- groups
#  [name]->
#     - name->[name]
#     - cles
#       [cle]->elem
#     - events
#       [name]->event
#     - nb_events
#     - count
#- events
#  [name]->event
#
#event
#- name
#- master_type
#- master_enddef
#- sub_type
#- sub_enddef_func_create (date, group, event, elem)
#- sub_enddef_func_distroy (date, group, event, elem)
#- depends
#- master_printed
#
#elem
#- id -> [paje_id]
#- cle -> [cle]
#- infos -> [infos]
sub paje_event_def {
    my($name)=shift;
    my($master_type)=shift;
    my($master_enddef)=shift;
    my($sub_type)=shift;
    my($sub_enddef_func_create)=shift;
    my($sub_enddef_func_distroy)=shift;
    my(@depends)=@_;
    
    my(%hash)=("name" => $name,
	       "master_type" => $master_type,
	       "master_enddef" => $master_enddef,
	       "sub_type" => $sub_type,
	       "sub_enddef_func_create" => $sub_enddef_func_create,
	       "sub_enddef_func_distroy" => $sub_enddef_func_distroy,
	       "depends" => \@depends);
    return \%hash;
}

sub paje_group_register {
    my($name)=shift;
    my($event);
    
    if (defined($paje_groups{$name})) {
	print STDERR "paje group $name already exists\n";
    }
    my(%empty_hash,%eh2);
    $paje_groups{"groups"}{$name}{"cles"}=\%empty_hash;
    $paje_groups{"groups"}{$name}{"name"}=$name;

    for $event (@_) {
	my($evname)=$event->{"name"};
	if (defined($paje_groups{"events"}{$evname})) {
	    print STDERR "Event $evname already defined\n";
	}
	$paje_groups{"events"}{$evname}=$event;
	$paje_groups{"groups"}{$name}{"events"}{$evname}=$event;
	$event->{"group"}=$paje_groups{"groups"}{$name};
    }
    $paje_groups{"groups"}{$name}{"nb_events"}=
	scalar (keys %{$paje_groups{"groups"}{$name}{"events"}});
    $paje_groups{"groups"}{$name}{"count"}=0;    
}

sub paje_group_print {
    my($date)=shift;
    my($paje_event_print_master);
    $paje_event_print_master=sub {
	my($event)=shift;
	
	if (defined($event->{"master_printed"})) {
	    return;
	}
	$event->{"master_printed"}=1;
	my($dep_event);
	for $dep_event (@{$event->{"depends"}}) {
	    $paje_event_print_master->($paje_groups{"events"}{$dep_event});
	}
	paje_print($event->{"master_type"}, $date, $event->{"name"}."\t".$event->{"master_enddef"});
    };
    my($event);
    for $event (values %{$paje_groups{"events"}}) {
	$paje_event_print_master->($event);
    }
}

sub paje_group_find {
    my($group)=shift;

    if (defined($paje_groups{"groups"}{$group})) {
	return $paje_groups{"groups"}{$group};
    }

    print STDERR "No group for $group\n";
}

sub paje_group_get_event {
    my($group)=shift;
    my($event_name)=shift;

    if (!defined($event_name)) {
	if ($group->{"nb_events"}==1) {
	    print STDERR "Auto event in group ",$group->{"name"},"\n";
	    die "toto";
	}
	$event_name=$group->{"name"};
    }
    if (!defined($group->{"events"}{$event_name})) {
	print STDERR "No event $event_name in group ",$group->{"name"},"\n";
	die;
    }
    return $group->{"events"}{$event_name};
}

sub paje_group_get_elem {
    my($group)=shift;
    my($cle)=shift;

    if (!defined($group->{"cles"}{$cle})) {
	print STDERR "No cle $cle in group ",$group->{"name"},"\n";
    }
    return $group->{"cles"}{$cle};
}

sub paje_group_get_id {
    my($gr)=paje_group_find(shift);
    my($event)=paje_group_get_event($gr, shift);
    my($cle)=shift;
    my($date)=shift;
    my($infos)=shift;

    if (!defined($cle)) { die "toto"; } ;
    if (defined($gr->{"cles"}->{$cle})) {
	return $event->{"name"}.$gr->{"cles"}->{$cle}->{"id"};
    }
    my($elem)=paje_group_create($gr->{"name"}, $cle, $date, $infos);
    return $event->{"name"}.$elem->{"id"};
}

sub paje_group_get {
    my($group)=shift;
    my($info)=shift;
    my($gr)=paje_group_find($group);

    if (defined($gr->{$info})) {
	return $gr->{$info};
    }
    print STDERR "No info $info for group $group\n";
    return;
}

sub paje_group_create {
    my($gr)=paje_group_find(shift);
    my($cle)=shift;
    my($date)=shift;
    my($infos)=shift;

#    if ($cle == 3221158976) {
#	die;
#    }

    if (defined($gr->{"cles"}->{$cle})) {
	print STDERR "Cle $cle already exist in group ".$gr->{"name"}."\n";
	die "";
    }

    my($id)=++($gr->{"count"});
    my(%new_hash)=("id" => $id,
		   "cle" => $cle,
		   "infos" => $infos);
    $gr->{"cles"}->{$cle}=\%new_hash;
    
    my($sub_event);
    for $sub_event (values %{$gr->{"events"}}) {
	($sub_event->{"sub_enddef_func_create"})->
	    ($date, $gr, $sub_event, \%new_hash);
    }
    return \%new_hash;

}

sub paje_group_distroy {
    my($gr)=paje_group_find(shift);
    my($cle)=shift;
    my($elem)=paje_group_get_elem($gr, $cle);
    my($date)=shift;

    my($sub_event);
    for $sub_event (values %{$gr->{"events"}}) {
	($sub_event->{"sub_enddef_func_distroy"})->
	    ($date, $gr, $sub_event, $elem);
    }
    delete $gr->{"cles"}->{$cle};
}

sub paje_event_distroy {

}

################################################################
# Paje : gestion événements utilisateurs
sub paje_event_create_ue {
    my($date)=shift;
    my($gr)=shift;
    my($event)=shift;
    my($elem)=shift;

    paje_print($event->{"sub_type"}, $date, $event->{"name"}.$elem->{"id"}." ".
	       $event->{"name"}.' "'.$elem->{"infos"}.'"');
}

sub paje_event_get_id {
    my($cle)=shift;
    my($date)=shift;
    my($infos)=shift;
    my($id)=paje_group_get_id("UE", undef, $cle, $date, $infos);
    return $id;
}

sub paje_event_create_id {
    my($group)=shift;
    my($cle)=shift;
    my($date)=shift;
    my($id)=shift;
    my($gr)=paje_group_find($group);

    paje_print($gr->{"type"}, $date, $gr->{"prefix"}.$id.
	       " ".$gr->{"type_name"}.' "'.
	       $gr->{"cles"}->{$cle}->{"infos"}.'"');
}

sub paje_event_gen {
    my($date)= shift;
    my($utid)= shift;
    my($event)= shift;

    my($id)=paje_group_get_id("UE", "UE", "none", $date, $event);
    my($tid)=paje_group_get_id("UT", "U", $utid, $date);
    paje_print(10,$date,"UE $tid $id");
    paje_group_distroy("UE", "none");
}

################################################################
# Paje : gestion threads utilisateurs
sub paje_event_create_u {
    my($date)=shift;
    my($gr)=shift;
    my($event)=shift;
    my($elem)=shift;

    paje_print($event->{"sub_type"}, $date, $event->{"name"}.$elem->{"id"}." ".
	       $event->{"name"}.' UV1 "0x'.
	       sprintf("%.8x", $elem->{"cle"}).'"');
}

sub paje_event_create_lu {
    my($date)=shift;
    my($gr)=shift;
    my($event)=shift;
    my($elem)=shift;

    paje_print($event->{"sub_type"}, $date, $event->{"name"}.$elem->{"id"}." ".
	       $event->{"name"}.' "Thread 0x'.
	       sprintf("%.8x", $elem->{"cle"}).'"');
}

sub paje_event_create_pu {
    my($date)=shift;
    my($gr)=shift;
    my($event)=shift;
    my($elem)=shift;

    paje_print($event->{"sub_type"}, $date, $event->{"name"}.$elem->{"id"}." ".
	       $event->{"name"}.' "Thread 0x'.
	       sprintf("%.8x", $elem->{"cle"}).'"');
}

sub paje_event_create_l {
    my($date)=shift;
    my($gr)=shift;
    my($event)=shift;
    my($elem)=shift;

    paje_print($event->{"sub_type"}, $date, $event->{"name"}.$elem->{"id"}." ".
	       $event->{"name"}.' LV1 "'.$elem->{"cle"}.'"');
}

sub paje_event_create_ul {
    my($date)=shift;
    my($gr)=shift;
    my($event)=shift;
    my($elem)=shift;

    paje_print($event->{"sub_type"}, $date, $event->{"name"}.$elem->{"id"}." ".
	       $event->{"name"}.' "Lwp '.$elem->{"cle"}.'"');
}

sub paje_event_create_pl {
    my($date)=shift;
    my($gr)=shift;
    my($event)=shift;
    my($elem)=shift;

    paje_print($event->{"sub_type"}, $date, $event->{"name"}.$elem->{"id"}." ".
	       $event->{"name"}.' "Lwp '.$elem->{"cle"}.'"');
}

sub paje_event_create_p {
    my($date)=shift;
    my($gr)=shift;
    my($event)=shift;
    my($elem)=shift;

    paje_print($event->{"sub_type"}, $date, $event->{"name"}.$elem->{"id"}." ".
	       $event->{"name"}.' PV1 "'.$elem->{"cle"}.'"');
}

sub paje_event_create_up {
    my($date)=shift;
    my($gr)=shift;
    my($event)=shift;
    my($elem)=shift;

    paje_print($event->{"sub_type"}, $date, $event->{"name"}.$elem->{"id"}." ".
	       $event->{"name"}.' "Proc '.$elem->{"cle"}.'"');
}

sub paje_event_create_lp {
    my($date)=shift;
    my($gr)=shift;
    my($event)=shift;
    my($elem)=shift;

    paje_print($event->{"sub_type"}, $date, $event->{"name"}.$elem->{"id"}." ".
	       $event->{"name"}.' "Proc '.$elem->{"cle"}.'"');
}

sub paje_ut_register {
    my($date)=shift;
    my($utid)=shift;

    my($id)=paje_group_create("UT", $utid, $date);
}

sub paje_lwp_register {
    my($date)=shift;
    my($lwp)=shift;

    my($id)=paje_group_create("LWP", $lwp, $date);
}

sub paje_proc_register {
    my($date)=shift;
    my($proc)=shift;

    my($id)=paje_group_create("PROC", $proc, $date);
}

my($actif)=-1;

sub paje_ut_get_hand {
    my($date)=shift;
    my($proc)=shift;
    my($act)=shift;
    my($lwp)=shift;
    my($utid)=shift;
    
    my($cuid)=paje_group_get_id("UT", "U", $utid, $date);
    my($clid)=paje_group_get_id("LWP", "L", $lwp, $date);
    my($cpid)=paje_group_get_id("PROC", "P", $proc, $date);

    my($luid)=paje_group_get_id("UT", "LU", $utid, $date);
    my($ulid)=paje_group_get_id("LWP", "UL", $lwp, $date);
    my($puid)=paje_group_get_id("UT",  "PU", $utid, $date);
    my($upid)=paje_group_get_id("PROC","UP", $proc, $date);

    paje_print(11,$date,"UL $cuid $ulid");
    paje_print(11,$date,"LU $clid $luid");
    paje_print(11,$date,"PU $cpid $puid");
    paje_print(11,$date,"UP $cuid $upid");
}

sub paje_ut_give_hand {
    my($date)=shift;
    my($proc)=shift;
    my($act)=shift;
    my($lwp)=shift;
    my($utid)=shift;
    
    my($cuid)=paje_group_get_id("UT", "U", $utid, $date);
    my($clid)=paje_group_get_id("LWP", "L", $lwp, $date);
    my($cpid)=paje_group_get_id("PROC", "P", $proc, $date);

    paje_print(12,$date,"UL $cuid");
    paje_print(12,$date,"LU $clid");
    paje_print(12,$date,"PU $cpid");
    paje_print(12,$date,"UP $cuid");
}

sub paje_kt_get_hand {
    my($date)=shift;
    my($proc)=shift;
    my($act)=shift;
    my($lwp)=shift;
    my($utid)=shift;
    
    my($cuid)=paje_group_get_id("UT", "U", $utid, $date);
    my($clid)=paje_group_get_id("LWP", "L", $lwp, $date);
    my($cpid)=paje_group_get_id("PROC", "P", $proc, $date);

    my($lpid)=paje_group_get_id("PROC", "LP", $proc, $date);
    my($plid)=paje_group_get_id("LWP", "PL", $lwp, $date);
    my($puid)=paje_group_get_id("UT",  "PU", $utid, $date);
    my($upid)=paje_group_get_id("PROC","UP", $proc, $date);

    paje_print(11,$date,"LP $clid $lpid");
    paje_print(11,$date,"PL $cpid $plid");
    paje_print(11,$date,"PU $cpid $puid");
    paje_print(11,$date,"UP $cuid $upid");
}

sub paje_kt_give_hand {
    my($date)=shift;
    my($proc)=shift;
    my($act)=shift;
    my($lwp)=shift;
    my($utid)=shift;
    
    my($cuid)=paje_group_get_id("UT", "U", $utid, $date);
    my($clid)=paje_group_get_id("LWP", "L", $lwp, $date);
    my($cpid)=paje_group_get_id("PROC", "P", $proc, $date);

    paje_print(12,$date,"LP $clid");
    paje_print(12,$date,"PL $cpid");
    paje_print(12,$date,"PU $cpid");
    paje_print(12,$date,"UP $cuid");
}

################################################################
# Paje : gestion fonctions utilisateurs
sub paje_event_create_uf {
    my($date)=shift;
    my($gr)=shift;
    my($event)=shift;
    my($elem)=shift;

    paje_print($event->{"sub_type"}, $date, $event->{"name"}.$elem->{"id"}." ".
	       $event->{"name"}.' '.$elem->{"infos"}->{"function"});
}

sub paje_function_enter {
    my($date)= shift;
    my($function)= shift;
    my($utid)= shift;
    my($infos)= shift;
    my($tid)=paje_group_get_id("UT", "U", $utid, $date);
    my($fid)=paje_group_get_id("UF", "UF", $function, $date, $infos);
   
    paje_print(11,$date,"UF $tid $fid");
}

sub paje_function_exit {
    my($date)= shift;
    my($function)= shift;
    my($utid)= shift;
    my($infos)= shift;
    my($tid)=paje_group_get_id("UT", "U", $utid, $date);
    my($fid)=paje_group_get_id("UF", "UF", $function, $date, $infos);
   
    paje_print(12,$date,"UF $tid");
}

################################################################
my($last_date)=0;
my($rand_delay)=0;
sub paje_print {
    my($type) = shift;
    my($date) = shift;
    my($infos) = shift;
    my($pdate);

    if ($date < $last_date) {
	$date = $last_date;
    }
    if ($date == $last_date) {
	$date = $last_date+$paje_date_delay;
    }
    if ($date != $last_date) {
	$rand_delay+=rand 3;
    }
    $pdate=$date+$rand_delay;
    $last_date=$date;

    printf("%i %3.3f %s\n", $type, $pdate, $infos);
}

sub paje_event {
    my($event)=shift;
    my($date, $proc, $act, $lwp, $utid, $ev_type, $event_infos);
    
    ($date, $proc, $act, $lwp, $utid, $ev_type, $event_infos)=@{$event};

    $_=$ev_type;
    if (/UEV_HAND/) {
	#__display_event($date, $proc, $act, $lwp, $utid, "give hand");
	#__display_event($date, $proc, $act, $lwp, $utid, "get hand");
	if (/GET/) {
	    paje_ut_get_hand($date, $proc, $act, $lwp, $utid);
	} elsif (/GIVE/) {
	    paje_ut_give_hand($date, $proc, $act, $lwp, $utid);
	} else {
	    print STDERR "Stange event type $ev_type\n";
	}

	if (/LINKED/) {
	    #print "should link\n";
	}
    } elsif (/KEV_HAND/) {
	#__display_event($date, $proc, $act, $lwp, $utid, "give hand");
	#__display_event($date, $proc, $act, $lwp, $utid, "get hand");
	if (/GET/) {
	    paje_kt_get_hand($date, $proc, $act, $lwp, $utid);
	} elsif (/GIVE/) {
	    paje_kt_give_hand($date, $proc, $act, $lwp, $utid);
	} else {
	    print STDERR "Stange event type $ev_type\n";
	}

	if (/LINKED/) {
	    #print "should link\n";
	}
    } elsif (/UEV_FUNC_ENTER/) {
	my($function)=$event_infos->{"function"};
	paje_function_enter($date, $function, $utid, $event_infos);
    } elsif (/UEV_FUNC_EXIT/) {
	my($function)=$event_infos->{"function"};
	paje_function_exit($date, $function, $utid, $event_infos);
	#my($fid)=paje_function_get_id($function, $date);
	#paje_print(6,$date,"$fid UE \"$event_infos\"");
	#paje_print(10,$date,"UE UTV_UT$utid $fid");
	#paje_print(6,$date,"UE".++$nbev." UTV_UT_FUNC \"$event_infos\"");
	#paje_print(10,$date,"UTV_UT_FUNC UTV_UT$utid UTV_UT_E".$nbev);
	#__display_event($date, $proc, $act, $lwp, $utid, $event_infos);
    } elsif (/UEV/) {
	$event_infos =~ s/[""]/''/g;
	paje_event_gen($date, $utid, $event_infos);
    } elsif (/CREATE_LWP/) {
	paje_lwp_register($date, $event_infos);
	#__display_event($date, $proc, $act, $lwp, $utid, "Create LWP ".$event_infos);
    } elsif (/CREATE_PROC/) {
	paje_proc_register($date, $event_infos);
    } elsif (/CREATE_UT/) {
	paje_ut_register($date, $event_infos);
	#paje_print(7,$date,"UTV_UT$event_infos UTV_UT UTV1 \"Thread $event_infos\"");
    } else {
	print STDERR "Unknown event type $ev_type";
	#__display_event($date, $proc, $act, $lwp, $utid, 
	#		"Unknown event type $ev_type");
    }
}

sub paje_events {
    my($event);

    for $event (@events) {
	paje_event($event);
    }
}

sub paje_end {

}

################################################################
# Insertion d'un événement provenant de marcel_debug
my($master_clock)=1;
sub insert_user_event {
    my($date)=shift; # facultatif, date++ au cas où
    my($lwp)=shift; # facultatif, même lwp que précédemment pour ce thread
    my($utid)=shift;
    my($event)=shift; # événement

    my($orig_date)=$date;

    if (!defined($orig_date)) {
	$date=$master_clock++;
    }
    if (!defined($lwp)) {
	$lwp=0;
    }
    my($proc)=0;
    ensure_proc($date, $proc, $lwp) or
	print STDERR "Event on new proc $proc\n";
    if (!ensure_lwp($date, $proc, $lwp, $utid, $utid)) {
	print STDERR "Event in new LWP $lwp\n";
	$procs{$proc}->{"lwp"}=$lwp;
	ensure_ut($date, $proc, get_lwp_by_num($lwp), $utid, $utid);
	emit_EV($date, $proc, proc_get_act($lwp), 
		$lwp,
		lwp_get_utid(get_lwp_by_num(proc_get_lwp($proc))),
		"KEV_HAND_GET", "");
    }
    {
	my($old_lwp)=proc_get_lwp($proc);
	if ($old_lwp != $lwp) {
	    insert_KSW($date, $old_lwp, $lwp, $proc);
	    if (!defined($orig_date)) {
		$date=$master_clock++;
	    }
	}
    }
    $lwp=get_lwp_by_num($lwp);
    {
	my($old_utid)=lwp_get_utid($lwp);
	if ($old_utid ne $utid) {
	    insert_USW($date, $old_utid, $utid, $proc);
	    if (!defined($orig_date)) {
		$date=$master_clock++;
	    }
	}
    }
    if (!ensure_ut($date, $proc, $lwp, $utid, $utid)) {
	print STDERR "Event in new thread $utid\n";
	emit_EV($date, $proc, lwp_get_act($lwp), 
		lwp_get_id($lwp), lwp_get_utid($lwp),
		"UEV_HAND_GET", "");
    }
    $_=$event;
    if (/(.*): -->/) {
	my(%infos)=("function" => $1);
	insert_UEV($date, $utid, "FUNC_ENTER", \%infos);
    } elsif (/(.*): <--/) {
	my(%infos)=("function" => $1);
	insert_UEV($date, $utid, "FUNC_EXIT", \%infos);
    } else {	
	insert_UEV($date, $utid, "", $event);	
    }
}

sub input_from_marcel_debug {
    my($size_indent)=2;

    my($thread)="0xbffefc40";
    my($lwp)=0;

    while(<>) {
	my($start)="";
	my($file)="";
	chomp;
	if (/(([(](0x[0-9a-f]+)[)]) (.*))$/) {
	    my($info)=$4;
	    $thread=$3;
	    $start = substr($_, 0, $-[0]);
	    $start =~ s/^\s*(.*[^\s])\s*$/$1/;
	    $start =~ s/^\s*$//;
	    if ($start =~ /([-\w.\/]+)[:]([\d]+)/) {
		$start=substr($start, 0, $-[0]).substr($start, $+[0]);
		$file=$1.":".$2;
		$start =~ s/^\s*(.*[^\s])\s*$/$1/;
		$start =~ s/^\s*$//;
	    }
	    if ($start =~ /\[P([0-9][0-9])\]/) {
		$lwp=$1+0;
	    }
	    $_=$info;
	} else {
	    
	}
	
	#print "$thread -> ", hex $thread, "\n";
	insert_user_event(undef, $lwp, hex $thread, $_);
    }
}

################################################################
# Programme principal

input_from_marcel_debug();

#display_events();

paje_entete();

paje_events();

paje_end();

#display_events();
