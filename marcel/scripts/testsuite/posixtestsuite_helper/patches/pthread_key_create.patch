diff -aruN conformance/interfaces/pthread_key_create/2-1.c conformance.new//interfaces/pthread_key_create/2-1.c
--- conformance/interfaces/pthread_key_create/2-1.c	2011-03-03 13:21:22.000000000 +0100
+++ conformance.new//interfaces/pthread_key_create/2-1.c	2011-03-03 13:25:45.000000000 +0100
@@ -29,14 +29,6 @@
 	pthread_key_t key;
 	void* rc;
 
-	/* Verify that the value associated with "key" in a new thread is NULL */
-	rc = pthread_getspecific(key);
-	if(rc != NULL)
-	{
-		printf("Test FAILED\n");
-		return PTS_FAIL;
-	}
-
 	if(pthread_key_create(&key, NULL) != 0)
 	{
 		printf("Error: pthread_key_create() failed\n");
diff -aruN conformance/interfaces/pthread_key_create/speculative/5-1.c conformance.new//interfaces/pthread_key_create/speculative/5-1.c
--- conformance/interfaces/pthread_key_create/speculative/5-1.c	2011-03-03 13:26:18.000000000 +0100
+++ conformance.new//interfaces/pthread_key_create/speculative/5-1.c	2011-03-03 13:25:27.000000000 +0100
@@ -36,7 +36,7 @@
 
 int NUM_OF_KEYS = PTHREAD_KEYS_MAX;
 
-static pthread_key_t keys[5];
+static pthread_key_t keys[PTHREAD_KEYS_MAX];
 
 int main()
 {
@@ -52,18 +52,17 @@
 				printf("Test FAILED: Expected EAGAIN when exceeded the limit of keys in a single process, but got: %d\n", rc);
 				return PTS_FAIL;
 			}
-		}
-			
-		if(rc != 0)
-		{
-			if(rc != EAGAIN)
+		} else {
+			if(rc != 0)
 			{
-				printf("Error: pthread_key_create() failed\n");
-				return PTS_UNRESOLVED;
-			} else
-			{
-				printf("Test FAILED: EAGAIN was returned before the key limit was exceeded\n");
-				return PTS_FAIL;
+				if(rc != EAGAIN)
+				{
+					printf("Error: pthread_key_create() failed\n");
+					return PTS_UNRESOLVED;
+				} else {
+					printf("Test FAILED: EAGAIN was returned before the key limit was exceeded\n");
+					return PTS_FAIL;
+				}
 			}
 		}
 	}
