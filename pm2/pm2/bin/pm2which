#!/bin/sh
#
#                      PM2 HIGH-PERF/ISOMALLOC
#           High Performance Parallel Multithreaded Machine
#                           version 3.0
#
#     Gabriel Antoniu, Olivier Aumage, Luc Bouge, Vincent Danjean,
#       Christian Perez, Jean-Francois Mehaut, Raymond Namyst
#
#            Laboratoire de l'Informatique du Parallelisme
#                        UMR 5668 CNRS-INRIA
#                 Ecole Normale Superieure de Lyon
#
#                      External Contributors:
#                 Yves Denneulin (LMC - Grenoble),
#                 Benoit Planquelle (LIFL - Lille)
#
#                    1998 All Rights Reserved
#
#
#                             NOTICE
#
# Permission to use, copy, modify, and distribute this software and
# its documentation for any purpose and without fee is hereby granted
# provided that the above copyright notice appear in all copies and
# that both the copyright notice and this permission notice appear in
# supporting documentation.
#
# Neither the institutions (Ecole Normale Superieure de Lyon,
# Laboratoire de L'informatique du Parallelisme, Universite des
# Sciences et Technologies de Lille, Laboratoire d'Informatique
# Fondamentale de Lille), nor the Authors make any representations
# about the suitability of this software for any purpose. This
# software is provided ``as is'' without express or implied warranty.
#

_PM2WHICH_PROGNAME=pm2which

pm2which_error() # msg
{
    echo $* >&2
    exit 1
}

pm2which_usage() # exit_code
{
    cat <<EOF
Usage: $_PM2WHICH_PROGNAME { option } command

  option:
    -f name : Use flavor named "name" (default=\$PM2_FLAVOR or default)
    -p      : Print possible prefixed notations (used to remove ambiguity)
    -h      : Display this help message
EOF
    exit $1
}

pm2which_prettyprint() # path path...
{
    for p
    do
	if [ $_PM2WHICH_SHOW_PREFIX = yes ]; then
	    echo $p | sed -e 's|.*examples/\(.*\)/bin/\(.*\)|\1:\2|'
	else
	    echo $p
	fi
    done
}

pm2which_handle_colon() # dir:name
{
    _old_ifs="$IFS"
    IFS=":"
    set $*
    IFS=$_old_ifs

    _dir=$1
    _name=$2
    [ -x ${_PM2WHICH_EXDIR}/${_dir}/bin/${_name} ] || pm2which_error "Error: \"${_PM2WHICH_EXDIR}/${_dir}/bin/${_name}\" exec file not found."
    _PM2WHICH_RESULT="${_PM2WHICH_EXDIR}/${_dir}/bin/${_name}"
    _PM2WHICH_NB_FOUND=1
}

pm2which_find_exec() # file
{
    _file=$1
    _fifo=$_PM2WHICH_EXDIR
    _PM2WHICH_RESULT=""

    while [ -n "$_fifo" ] ; do
	set $_fifo
	_rep=$1
	shift
	_fifo="$*"

	for _f in $_rep/* ; do
	    if [ -d $_f ] ; then
		_fifo="$_fifo $_f"
	    elif [ $_rep/$_file = $_f -a -x $_f ] ; then
		_PM2WHICH_RESULT="${_PM2WHICH_RESULT:+$_PM2WHICH_RESULT }$_f"
	    #else : ni un sous-répertoire, ni le fichier que l'on cherche
	    fi
	done
    done

    if [ -n "$_PM2WHICH_RESULT" ] ; then
	set $_PM2WHICH_RESULT
	_PM2WHICH_NB_FOUND=$#
    else
	_PM2WHICH_NB_FOUND=0
    fi
}

pm2which_do_search() # file
{
    pm2which_find_exec $1

    [ $_PM2WHICH_NB_FOUND -eq 0 ] && pm2which_error "Error: no \"$1\" exec file found under \"${_PM2WHICH_EXDIR}\""
}

pm2which_calc()
{
    export _PM2WHICH_EXDIR
    if [ -n "$PM2_CONFIG_SOURCEABLE" ] ; then
	_PM2WHICH_EXDIR=$_PM2CONFIG_BUILD/examples
    else
	_PM2WHICH_EXDIR=`pm2-config --flavor="${PM2_FLAVOR}" --builddir 2> /dev/null`/examples

	[ $? -eq 0 ] || pm2which_error "Error: \"${PM2_FLAVOR}\" is not a valid flavor."
    fi

    export _PM2WHICH_RESULT
    export _PM2WHICH_NB_FOUND
    # On regarde si le nom de la commande est relatif/absolu
    case "$1" in
	/*)
	    [ -x $1 ] || pm2which_error "Error: \"$1\" exec file not found."
	    _PM2WHICH_RESULT=$1
	    _PM2WHICH_NB_FOUND=1
	    ;;
	*:*)
	    pm2which_handle_colon $1
	    ;;
	*)
	    if [ -f "$1" -a -x "$1" ]; then
		_PM2WHICH_RESULT="$PWD/$1"
		_PM2WHICH_NB_FOUND=1
	    else
		pm2which_do_search $1
	    fi
	    ;;
    esac
}

pm2which_parse_cmdline() # args
{
    while [ $# -gt 0 ]; do
	case $1 in
	    -f)
		shift
		_PM2WHICH_FLAVOR="$1"
		shift
		;;
	    -p)
		shift
		_PM2WHICH_SHOW_PREFIX=yes
		;;
	    -h)
		pm2which_usage 0
		;;
	    --)
		shift
		break
		;;
	    *)
		break
		;;
	esac
    done

    [ $# -eq 1 ] || pm2which_usage 1

    pm2which_calc $*
}

# Programme principal

PM2_FLAVOR=${PM2_FLAVOR:-default}
export PM2_FLAVOR

_PM2WHICH_SHOW_PREFIX=no
export _PM2WHICH_SHOW_PREFIX

_PM2WHICH_ARGS="$*"

export PM2_CONFIG_SOURCEABLE
if [ -x ${PM2_ROOT}/bin/pm2-fast-config ] ; then
    PM2_CONFIG_SOURCEABLE=yes

    set -- --source-mode
    . ${PM2_ROOT}/bin/pm2-fast-config

    _PM2WHICH_LOADER=$_PM2CONFIG_LOADER
    export _PM2WHICH_LOADER
else
    _PM2WHICH_LOADER=`pm2-config --flavor="${PM2_FLAVOR}" --loader 2> /dev/null`
    export _PM2WHICH_LOADER
fi

set -- $_PM2WHICH_ARGS

if [ "$1" = --source-mode ] ; then
    shift
    pm2which_parse_cmdline $*
else
    pm2which_parse_cmdline $*
    pm2which_prettyprint $_PM2WHICH_RESULT
    if [ $_PM2WHICH_NB_FOUND -eq 1 ] ; then
	exit 0
    else
	exit 1
    fi
fi

