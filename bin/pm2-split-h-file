#!/usr/bin/env pm2perl
###########

use strict;
#use diagnostics;

use Getopt::Long;
Getopt::Long::Configure("permute");
#use Pod::Usage;

my($use_line_preproc)=1;

my($prognamefull)=$0;
my($progname);
($progname = $0) =~ s|^.*/([^/]*)$|$1|;

my($diese)="#";

my(@genfiles);

my($s)='-\w_'; # section name
my($f)='-\w/._(),'; # file name
my($sep_files)='\s*,\s*';
my($sep_sections)='\s*,\s*';
my($sep_opt)='\s*,\s*';
my($fs)="(([\"<]?)([$f]*)(\\s*\\[(($sep_sections)*[$s]*)*\\])?([\">]?))";
#my($c_in)='(\s*((//)|(/[*]))?\s*)';
#my($c_out)='\s*([*]/)?\s*';
my($c_in)='\s*(((())))';
my($c_out)='\s*()';
my($opt)='((no[-_]?)?((common)|(include-in-master-section)|(include-in-main)|(write-section)|(depend-previous)|(show-section)))';
my($opt_list)="\\[\\s*($opt($sep_opt$opt)*)\\]";
#my($section_ligne)="^$c_in$diese\\s*section\\s+([$s]+)$c_out\$";
my($depend_ligne) ="^$c_in$diese\\s*depend\\s+($fs)$c_out\$";
my($section_ligne)="^$c_in$diese\\s*section\\s+([$s]+)\\s*($opt_list)?$c_out\$";

my($local_ligne)="^$c_in$diese\\s*((section)|(depend))\\s+.*\$";
my($if_ligne)="^$diese\\s*if";
my($endif_ligne)="^$diese\\s*endif";

my($symbole_sep)="___";
my($file_sep)="___";

sub symbole {
    my($s)=shift;
    $s =~ tr /a-z./A-Z_/;
    $s =~ tr /[A-Z_]//cd;
    return $s;
}

sub symbole_from_suffix {
    my($filename)=shift;
    my($suffix)=shift;
    my($symb);
    my($FILE);
    my($EXT);

    $FILE=uc($filename);
    #$FILE =~ s,^(.*)/([^/]*)$,$2,;
    $FILE =~ tr ,./,__,;
    $FILE =~ s,^ASM-GENERIC,GENERIC_ASM,;
    $FILE =~ s,^ASM[^_]+,ASM,;
    $FILE =~ s,^(.*)(_H)$,$1,;
    $EXT = $2;
    $symb=$FILE.$suffix.$EXT;
    return symbole($symb);
}

sub filename_add_suffix {
    my($filename)=shift;
    my($suffix)=shift;
    my($symb);
    my($FILE);
    my($EXT)="";

    $FILE = $filename;
    $FILE =~ s,^(.*)(.h)$,$1, and $EXT = $2;
    $symb=$FILE.$suffix.$EXT;
    return $symb;
}

my(%specialfiles_keys);
my(@list_input_files_keys)=();

my(%list_files)=();
# key (gendir.file ou srcdir.file pour les types src) 
#   -> srcdir
#   -> gendir
#   -> gensubdir
#   -> file
#   -> type (file|makefile|masterfile|src)
# F -> list_sections (*tableau['section_name'])
# F -> sections (*hash{'section_name'} -> opt_section_file)
# F -> if_warnings
# F -> if_errors
# Sec -> section (*opt_section_file)
# Sec -> filesrc
# Sec -> mainfile
#
# opt_section_file
#   -> name
#   -> masterkey (*key mainfile[M])
#   -> filekey (*key section_file [S])
#   -> options (string_option)
#   -> `options' (0 ou 1)
#   -> previous-session
sub add_file {
    my($options)=shift;
    my($key)=$options->{"gendir"}.$options->{"gensubdir"}.$options->{"file"};

    if ((defined $options->{"type"}) and ($options->{"type"} eq "file")) {
	my($src)=srcfilename($options);
	if (defined $list_files{$src}) {
	    if ((not defined $list_files{$src}{"type"})
		or ($list_files{$src}{"type"} ne "src")) {
		die "Error: source '$src' would be overwriten\n";
	    }
	    print "      Reading $src\n";
	}
	$list_files{$src}{"type"}="src";
    }

    if (defined $list_files{$key}) {
	if (defined $list_files{$key}{"type"}
	    and ($list_files{$key}{"type"} eq "src")) {
	    if ((defined $options->{"type"}) and ($options->{"type"} eq "src")) {
		# Ok, juste deux fois la même source
	    } else {
		die "Error: file '$key' would overwrite source file\n";
	    }
	} else {
	    die "Error: duplicate file '$key' to create\n";
	}
    }
    $list_files{$key}=$options;
    
    return $options;
}

my(%list_sections)=();
# section
#    -> "section_name"
#        -> files
#        -> filekey
sub add_section {
    my($section)=shift;
    my($keyfile)=shift;

    push @{$list_sections{"sections"}{$section}{"files"}}, $keyfile;
}

sub get_sections {
    my(@list)=keys %{$list_sections{"sections"}};
    return \@list;
}

sub get_files_in_section {
    my($section)=shift;
    return $list_sections{"sections"}{$section}{"files"};
}

sub get_section_filekey {
    my($section)=shift;
    if (defined($section)) {
	return $list_sections{"sections"}{$section}{"filekey"};
    } else {
	return $list_sections{"filekey"};
    }
}

sub set_section_filekey {
    my($key)=shift;
    my($section)=shift;
    if (defined($section)) {
	$list_sections{"sections"}{$section}{"filekey"}=$key;
    } else {
	$list_sections{"filekey"}=$key;
    }
}

sub manage_options {
    my(%curfileoptions)= ("srcdir"          => ""    ,
			  "gendir"          => ""    ,
			  "gensubdir"       => ""    ,
			  "default-section" => "null",
			  "type"            => "file",
			  );
			  
#    my($srcdir)="";
#    my($gendir)="";
#    my($gensubdir)="";
    my($preload)=undef;
    my($get_fileoption) = sub {
	my($opt)=shift;
	my($value)=shift;
	$curfileoptions{$opt}=$value;
    };
    my($get_fileoption_dir) = sub {
	my($opt)=shift;
	my($value)=shift;
	if ($value) {
	    $value=join('/', split('/+', $value))."/";
	}
	$get_fileoption->($opt, $value);
    };
    my($process_file) = sub {
	my($file)=shift;
	my(%options)=%curfileoptions;
	$options{"file"}=$file;
	$options{"preload"}=$preload;
	push @list_input_files_keys, add_file(\%options);
    };
    my($process_file2) = sub {
	shift;
	my($file)=shift;
	$process_file->($file);
    };
    my($get_specialfile) = sub {
	my($type)=shift;
	$type=lc($type);
	my($file)=shift;
	my(%options)=("srcdir" => $curfileoptions{"srcdir"},
		      "gendir" => $curfileoptions{"gendir"},
		      "gensubdir" => $curfileoptions{"gensubdir"},
		      "file"   => $file,
		      "type"   => $type);
	$specialfiles_keys{$type}=add_file(\%options);
    };
    my($get_specialfile_src) = sub {
	my($type)=shift;
	$type=lc($type);
	my($file)=shift;
	if (!$file) {
	    $preload=undef;
	} else {
	    my(%options)=("srcdir" => $curfileoptions{"srcdir"},
			  "gendir" => $curfileoptions{"gendir"},
			  "gensubdir" => "",
			  "file"   => $file,
			  "type"   => "src");
	    $preload=add_file(\%options);
	}
    };

    my $man = 0;
    my $help = 0;

    GetOptions ("srcdir=s"               => \&{$get_fileoption_dir},
		"gendir=s"               => \&{$get_fileoption_dir},
		"gensubdir=s"            => \&{$get_fileoption_dir},
		"default-section=s"      => \&{$get_fileoption},
		"makefile=s"             => \&{$get_specialfile},
		"masterfile=s"           => \&{$get_specialfile},
		"start-file=s"           => \&{$get_specialfile_src},
		"file=s"                 => \&{$process_file2},
		'<>'                     => \&{$process_file},
		'help|?'                 => \$help,
		'man'                    => \$man,
		) or pod2usage(2);
    pod2usage(1) if $help;
    pod2usage(-exitstatus => 0, -verbose => 2) if $man;

    my($file);
    for $file (@ARGV) {
	$process_file->($file);
    }
}

sub hasSpecial {
    my($type)=shift;
    return defined $specialfiles_keys{$type};
}

sub hasMakefile {
    return hasSpecial("makefile");
}

sub file_from_key {
    my($key)=shift;
    return $list_files{$key};
}

sub specialfile {
    my($type)=shift;
    return $specialfiles_keys{$type};
}

sub filename {
    my($keyhash)=shift;
    return $keyhash->{"gensubdir"}.$keyhash->{"file"};
}

sub genfilename {
    my($keyhash)=shift;
    return $keyhash->{"gendir"}.$keyhash->{"gensubdir"}.$keyhash->{"file"};
}

sub srcfilename {
    my($keyhash)=shift;
    if (defined $keyhash->{"filesrc"}) {
	return $keyhash->{"srcdir"}.$keyhash->{"filesrc"};
    } else {
	return $keyhash->{"srcdir"}.$keyhash->{"file"};
    }
}

sub fullsrcfilename {
    my($keyhash)=shift;
    my($curdir)=`pwd`;
    chomp($curdir);
    $curdir.="/";
    #$curdir="";
    if (defined $keyhash->{"filesrc"}) {
	return $curdir.$keyhash->{"srcdir"}.$keyhash->{"filesrc"};
    } else {
	return $curdir.$keyhash->{"srcdir"}.$keyhash->{"file"};
    }
}

sub test_option {
    my($hsections)=shift;
    my($section)=shift;
    my($option)=shift;
    my($value)=shift;
    my($ret);

    if (not defined $hsections->{$section}{$option}) {
	if (not defined $hsections->{"default"}{$option}) {
	    return 0;
	}
	return ($hsections->{"default"}{$option} == $value);
    }
    return ($hsections->{$section}{$option} == $value);
}

sub gen_header {
    my($inputfilekey)=shift;
    my($source);
    my($section)=shift;
    my($symb);
    my($names);
    print OUT "/***************/\n";
    print OUT "/* DO NOT EDIT */\n";
    print OUT "/***************/\n";
    print OUT "/* This file has been autogenerate with $progname\n";
    if ($inputfilekey) {
	$source=filename($inputfilekey);
	print OUT " * Source file is ",srcfilename($inputfilekey),"\n";
	$symb=symbole_from_suffix($source, "");
    }
    if ($section) {
	print OUT " * Section included is $section\n";
	$symb=symbole_from_suffix($source, $symbole_sep.$section);
    }
    print OUT " */\n\n\n";
 
    if ($inputfilekey) {
	print OUT "#ifndef $symb\n";
	print OUT "#define $symb\n\n";
	if ($section) {
	    print OUT "#ifdef __SPLIT_SECTION_NOT_YET_INCLUDED__\n";
	    #print OUT "#warning section $section in file $source not yet included\n";
	    print OUT "#warning \"[1;33m<<<",
	    " [1;31m$source[1;37m",
	    " [[1;31m$section[1;37m]",
	    " not yet included[1;33m >>>",
	    " [1;37m([1;32m$symb[1;37m not defined)[0m\"\n";
	    print OUT "#define __HAS_SPLIT_SECTION_NOT_YET_INCLUDED__ 1\n";
	    print OUT "#else\n";
	}
    }
}

sub gen_footer {
    my($inputfilekey)=shift;
    my($source);
    my($section)=shift;
    my($symb);
    if ($inputfilekey) {
	$source=filename($inputfilekey);
	$symb=symbole_from_suffix($source, "");
    }
    if ($section) {
	$symb=symbole_from_suffix($source, $symbole_sep.$section);
    }

    if ($inputfilekey) {
	if ($section) {
	    print OUT "\n#endif /* __SPLIT_SECTION_NOT_YET_INCLUDED__ */\n";
	}
	print OUT "\n#endif /* $symb */\n";
    }
}

sub scan_sections {
    my($key)=shift;
    my($texte)=shift;
    my($prefilekey)=shift;
    my($pretexte)=shift;
    my(@sections)=();
    my(%sections)=();
    $sections{"default"}{"juste to define"}=0;
    $sections{"null"}{"write-section"}=0;
    $sections{"common"}{"include-in-main"}=0;

    my($subscan)=sub {
	my($source)=shift;
	my($texte)=shift;
	my($line)=1;
	my($last_section_name)="";
	my($nb_if)=0;

	my($check_nb_if)=sub {
	    if ($nb_if != 0) {
		push @{$key->{"if_warnings"}}, 
		"$source:$line:1: warning: #if imbrication crossing section ($nb_if)\n";
	    }
	};

	if ($#$texte == -1) {
	    open(IN, $source) or die "Unable to read $source: $!\n";
	    @{$texte}=<IN>;
	    close(IN);
	}

	for $_ (@{$texte}) {
	    if (/$if_ligne/) {
		$nb_if++;
	    } elsif (/$endif_ligne/) {
		$nb_if--;
	    }
	    if (/$section_ligne/) {
		my($section)=$5;
		$check_nb_if->();
		if (!defined($sections{$section})) {
		    my(%options);
		    
		    push @sections, $section;
		    $sections{$section}{"name"}=$section;
		    $sections{$section}{"masterkey"}=$key;
		    $sections{$section}{"previous-session"}=$last_section_name;
		    $last_section_name=$section;
		    
		    $options{"section"}=$sections{$section};
		    $options{"srcdir"}=$key->{"srcdir"};
		    $options{"gendir"}=$key->{"gendir"};
		    $options{"gensubdir"}="";
		    $options{"filesrc"}=$key->{"file"};
		    $options{"mainfile"}=$key;
		    $options{"file"}=filename_add_suffix(filename($key), $file_sep.$section);
		    
		    $sections{$section}{"filekey"}=add_file(\%options);
		    $sections{$section}{"skip"}=0;
		}
		if ($6) {
		    my(@opts)=split($sep_opt, $7);
		    my($option);
		    $sections{$section}{"options"}.=$7;
		    for $option (@opts) {
			my($new_value);
			$option =~ /$opt/;
			if ($2) {
			    $new_value=0;
			} else {
			    $new_value=1;
			}
			if (defined($sections{$section}{$3}) &&
			    $sections{$section}{$3}!=$new_value) {
			    print "$source:$line:1: warning: option $3 for section $section reverts\n";
			}
			$sections{$section}{$3}=$new_value;
		    }
		}
	    } elsif (/$depend_ligne/) {
		
	    } elsif (/$local_ligne/) {
		print "$source:$line:1: warning: strange ligne\n$_\n";
	    }
	    $line++;
	}
	$key->{"list_sections"}=\@sections;
	$key->{"sections"}=\%sections;
	$check_nb_if->();
    };

    if (defined($prefilekey)) {
	$subscan->(srcfilename($prefilekey), $pretexte);
    }

    $subscan->(srcfilename($key), $texte);
}

sub gen_section {
    my($info_section)=shift;
    my($texte)=shift;
    my($prefilekey)=shift;
    my($pretexte)=shift;
    my($uptodate)=shift;
    my($mainsection)=$info_section->{"name"};
    my($key)=$info_section->{"masterkey"};

    my(%listsections)=($mainsection => 1);
    my($nb_if)=0;
    
    if (test_option($key->{"sections"}, $mainsection, "write-section", 0)) { 
	return;
    }

    goto really_do if ($mainsection eq "all");

    #print "je cherche $info_section->{'name'}: ";
    for $_ (@{$texte}) {
	if (/$section_ligne/) {
	    #print "trouvé $5, ";
	    if ($5 eq $mainsection) {
	        #print "good\n";
		goto really_do;
	    }
	}
    }
    $key->{"sections"}->{$mainsection}{"skip"} = 1;
    #print "0";
    return;
really_do:

    add_section($mainsection, $info_section->{"filekey"});

    if (!test_option($key->{"sections"}, $mainsection, "common", 0) 
	&& !test_option($key->{"sections"}, "common", "write-section", 0)) {
	$listsections{"common"}=1;
    }

    if ($uptodate) {
	openfile_make($info_section->{"filekey"});
	return;
    }

    openfile($info_section->{"filekey"}, undef, $mainsection,
	     !test_option($key->{"sections"}, $mainsection, "show-section", 0));

    gen_header($key, $mainsection);

    my($subgen)=sub {
	my($srcfilename)=shift;
	my($texte)=shift;
	my($line)=1;
	my($cursection)=$key->{"default-section"};
	my($print)=1;

	$use_line_preproc && 
	    print OUT "#line $line \"", $srcfilename, "\"\n";

	my($start_print)=sub {
	    my($section)=shift;
	    
	    if (defined $listsections{$section}) {
		print OUT "\n#undef __SPLIT_SECTION__\n";
		print OUT "#define __SPLIT_SECTION__ ",symbole($mainsection),"\n";
		print OUT "#undef __SPLIT_SECTION_NAME__\n";
		print OUT "#define __SPLIT_SECTION_NAME__ ",$mainsection,"\n";
		$use_line_preproc && 
		    print OUT "#line $line \"", $srcfilename, "\"\n";
		print OUT "// INCLUDING [$section]\n";
		$print=1;
	    } else {
		print OUT "// SKIPPING [$section] at line $line\n";
		$print=0;
	    }
	};

#    if (!test_option($key->{"sections"}, $mainsection, "depend-previous", 0)) {
#	if ($info_section->{"previous-session"}) {
#	    print OUT "\n/* Auto-depend on previous section */\n";
#	    print OUT "#include \"", 
#	    filename_add_suffix(filename($key), $file_sep.
#				$info_section->{"previous-session"})
#		,"\"\n\n";
#	}
#    }
	$start_print->($cursection);
	
	for $_ (@{$texte}) {
	    chomp;
	    if (/$section_ligne/) {
		my($newsection)=$5;
		$cursection=$newsection;
		$start_print->($newsection);
	    } elsif ($print) {
		if (/$if_ligne/) {
		    $nb_if++;
		} elsif (/$endif_ligne/) {
		    $nb_if--;
		}
		if (/$depend_ligne/) {
		    my($include)=$5;
		    my(%sections, $sec);
		    print OUT "// $_\n";
		    if ($include =~ /^(["<]?)([$f]*)\s*\[\s*(.*)\s*\]([">]?)$/) {
			my($start)=$1;
			my($end)=$4;
			my($_key)=$key;
			$include = $2;
			if ($3 eq "") {
			    %sections=($mainsection => 1);
			    #delete $sections{"common"};
			} else {
			    %sections=map { $_ => 1 } (split (/$sep_sections/, $3));
			}
			if (!$include) {
			    $include = filename($key);
			}
#			else {
#			    my($__key);
#			    my($name)=$2;
#			    $name =~ s/.*\/([^\/]*)$/\1/ ;
#			    for $__key (@list_input_files_keys) {
#			        if (filename($__key) eq $name) {
#				    $_key = $__key;
#				    goto found;
#				}
#				print "not ".filename($__key)."\n";
#			    }
#			    die "couldn't find $name for ".filename($key)."\n";
#found:
#			}
			if ((!$2) or ($3 eq "" and $mainsection eq "common")) {
			    for $sec (keys %sections) {
			        my($_texte);
			        open(IN, srcfilename($_key)) or die "Unable to read $include: $!\n";
				@{$_texte}=<IN>;
				close(IN);
				for $_ (@{$_texte}) {
				    if (/$section_ligne/) {
				        if ($5 eq $sec) {
					    #print "got section $5 from ".srcfilename($_key)."\n";
				    	    goto really_do;
				        }
				    }
				}
				$use_line_preproc &&
				    print OUT "#line $line \"", $srcfilename, "\"\n";
				print OUT "// skipped section $sec because target empty\n";
				delete $sections{$sec};
really_do:
			    }
			}
			for $sec (keys %sections) {
			    $use_line_preproc && 
				print OUT "#line $line \"", $srcfilename, "\"\n";
			    print OUT "#include $start",
			    filename_add_suffix($include, $file_sep.$sec),"$end\n";
			}
		    } else {
			$use_line_preproc && 
			    print OUT "#line $line \"", $srcfilename, "\"\n";
			print OUT "#include $include\n";
		    }
		} else {
		    print OUT $_, "\n";
		}
	    }
	    $line++;
	}
    };
    if (defined($prefilekey)) {
	$subgen->(fullsrcfilename($prefilekey), $pretexte);
    }

    $subgen->(fullsrcfilename($key), $texte);
    gen_footer($key, $mainsection);
    if ($nb_if != 0) {
	push @{$key->{"if_errors"}}, 
	srcfilename($key).":1:1: error: [$mainsection]: bad #if imbrication ($nb_if)\n";
    }
    closefile($info_section->{"filekey"}, undef, $mainsection,
	      !test_option($key->{"sections"}, $mainsection, "show-section", 0));
}

my($last_gen_dir)="";
my($last_gen_file)="";
sub openmainfile {
    my($hashkey)=shift;
    my($file_name)=filename($hashkey);
    my($gendir)=$hashkey->{"gendir"};
    
    if ($gendir) {
	if ($last_gen_dir ne $gendir) {
	    print "      Generating files in $gendir\n";
	    $last_gen_dir = $gendir;
	}
	print "        $file_name\t";
    } else {
	my($file)=genfilename($hashkey);
	print "      Generating $file";
	$last_gen_dir = "";	    
    }
}

sub closemainfile {
    print "\n";
}

my($new_ext)=".splinew";
#my($new_ext)="";
my($show)=1;

sub openfile_make {
    my($hashkey)=shift;
    my($file)=genfilename($hashkey);

    push @genfiles, $file;
    if (hasMakefile()) {
	print MAKEFILE genfilename($hashkey), ": \\\n";
	if (defined $hashkey->{"srcdir"}) {
	    print MAKEFILE "\t", srcfilename($hashkey), " \\\n";
	}
	print MAKEFILE "\t", genfilename(specialfile("makefile")), "\n";
    }
}

sub openfile {
    my($hashkey)=shift;
    my($file_name)=filename($hashkey);
    my($gendir)=$hashkey->{"gendir"};
    my($mfile)=shift;
    my($section)=shift;
    my($show_section)=shift;

    my($file)=genfilename($hashkey);
    my(@rep, $rep);
    @rep=split('/', $file);
    pop @rep;
    $rep=join('/', @rep);

    if ($rep && ! -d $rep) {
	system("mkdir -p $rep")==0 or die "Unable to create dir $rep: $!\n";
    }
    if ($mfile) {
	print "      Creating Makefile $file\n";
	open(MAKEFILE, ">$file") or die "Unable to write file $file: $!\n";
    } else {
	if (defined ($section)) {
	    $show and print "[$section" if $show_section;
	} else {
	    $show and print "[";
	}
	open(OUT, ">$file$new_ext") or die "Unable to write file $file$new_ext: $!\n";
	chmod 0444, $file.$new_ext;
	openfile_make($hashkey);
    }
}

sub closefile {
    my($hashkey)=shift;
    my($gendir)=$hashkey->{"gendir"};
    my($mfile)=shift;
    my($section)=shift;
    my($show_section)=shift;

    if ($mfile) {
	close(MAKEFILE);
    } else {
	close(OUT);
	my($file)=genfilename($hashkey);
	my($diff)=2;
	if ( $new_ext ) {
	    $diff=system("cmp", "-s", $file, $file.$new_ext);
	    if ($diff) {
	    	if (-f $file) {
		    $diff=1;
	    	} else {
		    $diff=2;
	    	}
	    	rename($file.$new_ext, $file) 
		    or die "Unable to rename $file$new_ext: $!\n";
	    } else {
	    	unlink($file.$new_ext);
	    }
	}
	if ($gendir) {
	    my ($secname)="";
	    if ($diff == 1) {
		$show and print "*";
	    } elsif ($diff == 2) {
		$show and print "+";
	    } else {
		$secname=".";
	    }
	    if (defined ($section)) {
		if ($show_section) {
		    $show and print "]";
		} else {
		    $show and print $secname;
		}
	    } else {
		$show and print "]";
	    }
	}
    }
}

sub uptodate {
    my($key)=shift;
    my($src)=srcfilename($key);
    my($gen)=genfilename($key);

    my($s_mtime)=(stat($src))[9];
    
    if ( -f $gen && ($s_mtime < (stat(_))[9])) {
	print "skipping (up-to-date)";
	return 1;
    }
    
}    

sub gen_master {
    my($key)=shift;
    my($uptodate)=shift;

    my($sections)=$key->{"sections"};
    my($section);

    if ($uptodate) {
	openfile_make($key);
	return;
    }

    openfile($key);
    gen_header($key);
    for $section (@{$key->{"list_sections"}}) {
	my($secname)=filename($sections->{$section}{"filekey"});
	if ($sections->{$section}{"skip"} == 1) {
	    print OUT "// \"$secname\" skipped since empty\n";
	} elsif (test_option($sections, $section, "write-section", 0)) {
	    print OUT "// \"$secname\" not generated as requested\n";
	} else {
	    if (test_option($sections, $section, "include-in-main", 0)) {
		print OUT "// not including \"$secname\" as requested\n";
	    } else {
		print OUT "#include \"$secname\"\n";	
	    }
	}
    }
    gen_footer($key);
    closefile($key);
}

sub gen_master_section {
    my($masterkey)=shift;
    my($section)=shift;
    my($filekey);

    my(%options)=("gendir" => $masterkey->{"gendir"},
		  "gensubdir" => "",
		  "file"   => filename_add_suffix(filename($masterkey),
						  $file_sep.$section),
		  );
    set_section_filekey(add_file(\%options), $section);
    openfile(get_section_filekey($section), undef, $section, 1);
    gen_header();
    
    for $filekey (sort {filename($a) cmp filename($b)}
		  @{get_files_in_section($section)}) {
	if (test_option($filekey->{"mainfile"}->{"sections"},
			$section, "include-in-master-section", 0)) {
	    print OUT "#ifdef __SPLIT_SECTION_INCLUDE_ALL\n";
	    print OUT "#  include \"", filename($filekey),"\"\n";
	    print OUT "#endif\n";
	} else {
	    print OUT "#include \"", filename($filekey),"\"\n";
	}
    }

    gen_footer();
    closefile(get_section_filekey($section), undef, $section, 1);
}

sub main {
    my(%gen_sections);
    my($error)=0;

    manage_options();

    if (hasMakefile()) {
	openfile(specialfile("makefile"), 1);
    }

    my($key);
    for $key (@list_input_files_keys) {
	my($section);
	my($srcdir)=srcfilename($key);
	my($gendir)=genfilename($key);

	my(@pretexte)=();
	my(@texte)=();
	
	scan_sections($key, \@texte, $key->{"preload"}, \@pretexte);

	openmainfile($key);
	my($uptodate)=uptodate($key);
	
	for $section (@{$key->{"list_sections"}}) {
	    gen_section($key->{"sections"}{$section}, \@texte, 
			$key->{"preload"}, \@pretexte, $uptodate);
	}

	gen_master($key, $uptodate);

	closemainfile($key);
	if (defined($key->{"if_errors"})) {
	    $error=1;
	    foreach my $ligne (@{$key->{"if_errors"}}) {
		print $ligne;
	    }
	    foreach my $ligne (@{$key->{"if_warnings"}}) {
		print $ligne;
	    }
	}
	if (hasMakefile() && defined($key->{"preload"})) {
	    print MAKEFILE genfilename($key), ": \\\n";
	    print MAKEFILE "\t", srcfilename($key->{"preload"}), "\n";
	}
    }
    if (hasSpecial("masterfile")) {
	my($section);
	my(%options);
	my(%filekey);

	openmainfile(specialfile("masterfile"));
	openfile(specialfile("masterfile"));
	gen_header();
	for $key (@list_input_files_keys) {
	    print OUT "#include \"", filename($key), "\"\n";
	}
	gen_footer();
	closefile(specialfile("masterfile"));

	for $section (sort @{get_sections()}) {
	    gen_master_section(specialfile("masterfile"), $section);
	}

	%options=("gendir" => specialfile("masterfile")->{"gendir"},
		  "gensubdir" => "",
		  "file"   => 
		  filename_add_suffix(filename(specialfile("masterfile")),
				      $file_sep."all-sections"),
		  );
	set_section_filekey(add_file(\%options));
	openfile(get_section_filekey(), undef, "allsection");
	gen_header();
	for $section (sort @{get_sections()}) {
	    print OUT "#include \"", filename(get_section_filekey($section)), "\"\n";
	}
	gen_footer();
	closefile(get_section_filekey(), undef, "allsection");
	closemainfile(specialfile("masterfile"));

    }
    if (hasMakefile()) {
	my($key);
	print MAKEFILE "\n", genfilename(specialfile("makefile")), ": \\\n";
	for $key (@list_input_files_keys) {
	    print MAKEFILE "\t", srcfilename($key), " \\\n";
	}

	print MAKEFILE "\n\n";
	for $key (@list_input_files_keys) {
	    print MAKEFILE srcfilename($key), ":\n";
	}

	print MAKEFILE filename(specialfile("makefile")), ": $prognamefull\n";
	closefile(specialfile("makefile"), 1);
    }
    return $error;
}

exit main();

__END__

=head1 NAME

pm2-split-h-file - Spliting header files
    
=head1 SYNOPSIS

pm2-split-h-file [options] [[modifier] [[typefile] file] ...]

 Options:
   --help                 brief help message
   --man                  full documentation
 Modifiers:
   --srcdir DIR           directory of next source files
   --gendir DIR           directory of next generated files
   --gensubdir DIR        subdirectory of next generated files
   --default-section SEC  default section for next source files
   --start-file FILE      file added at start of each next source files
 Type of files:
   --file                 regular header file to split
   --masterfile           generated header file including all others
   --makefile             generated Makefile with dependancies

=head1 OPTIONS

=over 8

=item B<--help>

Print a brief help message and exits.

=item B<--man>

Prints the manual page and exits.
    
=item B<--srcdir DIR>

Set the directory where reading the next source files (default: "").

=item B<--gendir DIR>

Set the base directory where writing the next generated files (default:
"").

=item B<--gensubdir DIR>

Set the subdirectory where writing the next generated files (default:
""). This subdirectory is also added in the autogenerated B<#include "...">
(used to include all the sections in the master file for example).

=item B<--default-section SEC>

Set the default section (the one at the start of the file) for the
next source files (default: "null").

=item B<--start-file>

File read in the B<s>ouB<rc>e B<dir>ectory before a regular header
file as if it were at the begining of it.

=item B<--file>

Give the name of a header file to read in the B<s>ouB<rc>e
B<dir>ectory and to split into several sections in the B<gen>erate
B<dir>ectory.

The file name can contains subdirectories that will be preserved for
the generated files.

This is the default type if no type is specified.

=item B<--masterfile>

Give the name of an header file (writen into the B<gen>erate
B<dir>ectory) that include all of the generated header files.

=item B<--makefile>

Give the name of an Makefile (writen into the B<gen>erate
B<dir>ectory) that has the depedencies of the generated files.

=back

=head1 DESCRIPTION

B<This program> splits header files into several ones, each one
containing a B<section> of the original.

A header file containing the section B<section-name> will have
B<_section-name> added to its base name.

A header file of the same name as the source file is generated. Its
includes all the sections generated in the order of they apparition in
the source file.

=head1 DIRECTIVES

Two kinds of directives can be used in a header file to instruct this
program. These directives can be include or not within a C comments if 
this one does not apparair on the line of the directive. They are
introduced by the 'B<#>' caracter. Spaces does not mean.

Examples:

    #DIRECTIVE ... 
    /*
    #DIRECTIVE ...
    */
  Does not work:
    //  #DIRECTIVE ...
    /* #  DIRECTIVE ... */

=head1 SECTION DIRECTIVE

These directives are used to split the source file or to set options.

B<#section section-name [option, option...]>

Options can only be set one time for each section in a file. They are
not mandatory. There are:

=over 8

=item B<common>

The section will include the B<common> special section too.

=item B<include-in-main>

The section will be included in the main file (the one with the same
name as the source).

=item B<include-in-master-section>

The section will be included in the master file of the section.

=item B<write-section>

The section will be generated.

=item B<depend-previous>

At the start of the section, a dependency will be added on the
previously created section.

=item B<show-section>

The name of the section will be displayed while generated.

=back

All these options can be reversed with the prefix B<no->. By default,
they are all enabled.

=head1 SPECIAL SECTIONS

Special section can not be generated. However, they can be usefull
sometimes.

=over 8

=item B<common>

Text in this section will be included in all section (but ones that
have the B<no-common> option set).

=item B<default>

Text in this section will be ignored. However, options set for this
section will be used as default for the others sections if they do not
have specifically set or unset the corresponding option.

=item B<null>

Text in this section will be ignored. This is the default section at
the start of an input file if not specified otherwise within the
command line.

=back

=head1 DEPEND DIRECTIVE

This directive is used to require that another header file (full or
just a section) is already read before continuing. This is done by
generating the correct B<#include "..."> in the generated file.

B<#depend  file[section, ...], file[], file...>

If B<file> is not here, the current file is supposed.

If B<sections> are wrote, only the corresponding sections will be
included. Its generally means that the header file should have been
generated with this program.

If B<[]> is used (ie section marks with no section into them), then
the current section is used.

=head1 EXAMPLE

Example of an header file "complexe.h".

    /* If gcc read the source file, il will search 
     * for the generated file */
    #include_next "complexe.h" 

    #if 0
    /****************************************************************/
    /* Section list (could be include in a --start-file file)
     */
    #section types
    #section declares
    #depend [types]
    #section inline [no-include-in-main]
    #depend [declares]

    /****************************************************************/
    /* Header file splited
     */

    #section types
    /* Inclusion de la section "types" de "base.h"
    #depend "base.h[]"

    typedef struct {
        base_type a;
    } type_complexe;

    #section declares
    inline int read_typecomples(type_complexe* foo);

    #section inline
    inline int read_typecomples(type_complexe* foo)
    {
        secondtype temp;
        foo->...
        ...
    }

    #section types
    typedef struct {
        ...;
    } secondtype;

    #section null
    #endif

=head1 EMACS

To fontify these new keywords within emacs, you can add :

=over 4

(font-lock-add-keywords 'c-mode
  '(("^#[ \t]*\\<\\(section\\|depend\\|warning\\)\\([ \t].*\\)?$" 
     1 font-lock-builtin-face)
    ("^#[ \t]*\\<\\(section\\|warning\\)[ \t]+\\(.*\\)" 
     2 font-lock-warning-face prepend)
    ("^#[ \t]*\\(depend\\)[ \t]+\\([^\n]*\\)" 
     2 font-lock-string-face)))

=back

=head1 BUGS

None ;-)

=head1 REPORTING BUGS

Email bug reports, general questions and discussion to
pm2-users@listes.ens-lyon.fr.

=head1 COPYRIGHT

Copyright (C) 2003 The PM2 Team. There is NO warranty.
You may redistribute this software under the terms of the GNU
General Public License. For more information about these matters, see
the files named COPYING.

=cut

