#! /bin/bash

# NewMadeleine
# Copyright (C) 2006-2016 (see AUTHORS file)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

usage() {
    cat <<EOF
mpirun [<mpirun_option>...] <progname> [<option>...]

  <mpirun_option>:
    -h      This help
    -machinefile <file>
            Take the list of possible machines to run on from the
            file <file>.  This is a list of all available machines;
            use -np <np> to request a specific number of machines.
    -host <node>[,<node>...]
            Take the list of possible machines to run on from the
            comma-separated list of machines given.
    -np|-n <n>
            specify the number of processors to run on
    -wdir <dir>
            set current directory to <dir> before starting program
    -config <file>
            Configuration file for multiple binaries. Each line of file
            <file> contains a comma-separated list of ranks followed by
            the program name.
    -v      Verbose - throw in some comments
    -q      Quiet -- suppress all messages on stdout
    -debug  Start processes under the gdb debugger.
    -c      Starts each processus in a graphical console
    -p      Pause after program exit, do not close consoles
    -D<label>=<value>
            Define environment variable <label> with value <value> in 
            each process environnment.

For advanced configuration, such as debug, valgrind, eztrace, lib
preload, process binding, see padico-launch --help

On exit, mpirun returns a status of zero unless mpirun detected a problem, in
which case it returns a non-zero status.

Environment variables:
   - NMAD_DRIVER
            specifies the network driver to use. By default, the 
            network is auto-detected.
   - NMAD_STRATEGY
            specifies the scheduler strategy to be used. By
            default, the strategy 'aggreg' is used.
   - MPIEXEC_TIMEOUT
            maximum number of second the job is allowed to run.
            Unlimited by default.
EOF
}

# generate -D for driver and strategy
if [ "x${NMAD_DRIVER}" != "x" ]; then
    args="${args} -DNMAD_DRIVER=${NMAD_DRIVER}"
fi
if [ "x${NMAD_STRATEGY}" != "x" ]; then
    args="${args} -DNMAD_STRATEGY=${NMAD_STRATEGY}"
fi

# auto-detect whether to use --padico-nopreload
if [ "x@with_pukabi@" = "xno" ]; then
    args="${args} --padico-nopreload"
fi

# timeout
if [ "x${MPIEXEC_TIMEOUT}" != "x" ]; then
    args="${args} --timeout ${MPIEXEC_TIMEOUT}"
fi

if [ $# = 0 ]; then
    usage
    exit 1;
elif [ $# = 1 ]; then
    case "$1" in
	-h|-help|--help)
	    usage
	    exit 0
	    ;;
    esac
fi

exec @padicotm_root@/bin/padico-launch -q ${args} "$@"

