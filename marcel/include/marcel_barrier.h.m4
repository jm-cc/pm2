dnl -*- linux-c -*-
include(scripts/marcel.m4)
dnl /***************************
dnl  * This is the original file
dnl  * =========================
dnl  ***************************/
/* This file has been autogenerated from __file__ */
/*
 * PM2: Parallel Multithreaded Machine
 * Copyright (C) 2001 "the PM2 team" (see AUTHORS file)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 */

#depend "linux_spinlock.h[macros]"

#section macros

REPLICATE([[dnl
#define PREFIX_BARRIER_SERIAL_THREAD (-1)
]])


REPLICATE([[dnl
#define PREFIX_BARRIER_INITIALIZER(count) \
  { \
    .init_count = (count),\
    .lock = (struct _prefix_fastlock) MA_PREFIX_FASTLOCK_UNLOCKED, \
    .leftB = (count), \
    .leftE = 0, \
  }
]], [[MARCEL PMARCEL]])

#section types
#depend "marcel_fastlock.h[structures]"
#depend "marcel_threads.h[types]"

REPLICATE([[dnl
/* Barrier variable attribute data structure: internaltypes.h */
typedef struct prefix_barrierattr
{
	int pshared;
} prefix_barrierattr_t;
]], [[MARCEL PMARCEL]])

REPLICATE([[dnl
/* Barrier data structure : internaltypes.h */
typedef struct prefix_barrier
{
  //unsigned int curr_event;
  unsigned int init_count;
  struct _prefix_fastlock lock;
  unsigned int leftB;
  unsigned int leftE;
} prefix_barrier_t;
]], [[MARCEL PMARCEL]])

#section functions

int marcel_barrier_setcount(marcel_barrier_t *barrier, unsigned int count);
int marcel_barrier_addcount(marcel_barrier_t *barrier, unsigned int count);
int marcel_barrier_getcount(__const marcel_barrier_t *barrier, unsigned int *count);

REPLICATE([[dnl 
int prefix_barrier_wait_begin(prefix_barrier_t *barrier);
int prefix_barrier_wait_end(prefix_barrier_t *barrier);
]])

REPLICATE([[dnl
extern int prefix_barrier_init (prefix_barrier_t *__restrict barrier,
                                __const prefix_barrierattr_t *__restrict attr, unsigned num) __THROW;

extern int prefix_barrier_destroy (prefix_barrier_t *barrier) __THROW;

extern int prefix_barrier_wait (prefix_barrier_t *__restrict barrier) __THROW;

extern int prefix_barrierattr_init (prefix_barrierattr_t *attr) __THROW;

extern int prefix_barrierattr_destroy (prefix_barrierattr_t *attr) __THROW;

extern int prefix_barrierattr_getpshared (__const prefix_barrierattr_t *
                                        __restrict attr,
                                        int *__restrict pshared) __THROW;

extern int prefix_barrierattr_setpshared (prefix_barrierattr_t *attr,
                                        int pshared) __THROW;

]])dnl END_REPLICATE
