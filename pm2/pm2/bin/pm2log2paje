#!/usr/bin/perl

use strict;
use warnings;
use diagnostics;

my($paje_date_delay)=0;
#my($paje_date_delay)=0.001;
	
# Thread view
# [#thread]
# push/pop function
# act_id
# lwp
# proc

# LWP view
# [#LWP]
# thread_id
# act_id
# proc

# ACT view
# [#act_id]
# thread_id
# lwp
# proc

# Proc View
# [#proc]
# thread_id
# lwp
# act_id

my(%procs)=();

my(%LWPs)=();

my(%userThreads);

##########################################################################
# SuperTrace
#
package Event;

use constant CREATE_PROC   => 0;
use constant DESTROY_PROC  => 1;
use constant CREATE_LWP    => 2;
use constant DESTROY_LWP   => 3;
use constant CREATE_UT     => 4;
use constant DESTROY_UT    => 5;
use constant UT_GIVE_HAND  => 6;
use constant UT_GET_HAND   => 7;
use constant LWP_GIVE_HAND => 8;
use constant LWP_GET_HAND  => 9;
use constant FUT           => 10;
use constant FKT           => 11;

no strict;
@Name = ("Create Proc", "Destroy Proc", "Create LWP", "Destroy LWP",
	"Create UT", "Destroy UT", "UT Give Hand", "UT Get Hand",
	"LWP Give Hand", "LWP Get Hand", "FUT", "FKT");

use strict;

##########################################################################
# Entities
#
package Entity;
#Entity:
# id
# t_start
# t_end
# 
# Ensure($id, $date)
# Get($id)
# 

my($debug)=0;

sub new { # [classe] id date
    my $class=shift;
    my $self={};
    bless($self, $class);
    $self->_init(@_);
    return $self;
}

sub _init {
    my $self=shift;
    $self->{ID}=shift;
    my($date)=shift;
    #$self->Debug("Creating...");
    $self->DateStart($date);
    $self->DateEnd($date);
    $self->AddCollection();
    if (@_) {
	my %extra = @_;
	@$self{keys %extra} = values %extra;
    }
}

sub AddCollection {
    my $self=shift;
    $self->GetCollection()->{$self->Id}=$self;
}

sub RemoveCollection {
    my $self=shift;
    delete($self->GetCollection()->{$self->Id});
}

sub DESTROY {
    my($self)=shift;
    $self->RemoveCollection();
}

sub Id {
    my $self=shift;
    return $self->{ID};
}

sub Ensure {
    my($class)=shift;
    my($id)=shift;
    my($date)=shift;

    my($entity)=$class->Get($id);
    if (defined($entity)) {
	$entity->UpdateTime($date);
    } else {
	return $class->new($id, $date);
    }
    return $entity;
}

sub UpdateTime {
    my $self=shift;
    my $date=shift;
    if ($date < $self->DateStart) {
	$self->DateStart($date);
    }
    if ($date > $self->DateEnd) {
	$self->DateEnd($date);
    }
}

sub DateStart {
    my $self=shift;
    if (@_) {
	$self->{DATE_START} = shift;
        #$self->Debug("Setting dateStart to $self->{DATE_START}");
    }
    #$self->Debug("Looking dateStart to $self->{DATE_START}");
    return $self->{DATE_START};
}

sub DateEnd {
    my $self=shift;
    if (@_) {
	$self->{DATE_END} = shift;
        #$self->Debug("Setting dateEnd to $self->{DATE_END}");
    }
    return $self->{DATE_END};
}

sub Get {
    my($class)=shift;
    my($id)=shift;
    my($col)=$class->GetCollection();
    if (defined($col->{$id})) {
	return $col->{$id};
    }
    return undef;
}

sub Name {
    my $proto=shift;
    my $class = ref($proto) || $proto;
    my $self= ref($proto) && $proto;
    if (!$self) {
	return $class->NameClass;
    } else {
	return $class->NameClass . "[" . $self->Id . "]"; 
    }
}

sub CurScheduler {
    my $self=shift;
    if (@_) {
	my $next=shift;
        if ($next) {
	    $debug && print $self->Name, " scheduled on ", $next->Name, "\n";
	    $self->{SCHEDULER} = $next;
	} else {
	    $debug && print $self->Name, " unscheduled\n";
	    $self->{SCHEDULER} = undef;
	}
    }
    return $self->{SCHEDULER};
}

#use overload '""' => \&ToString, "fallback" => 1;

sub ToString {
    my $self=shift;
    my $ret=$self->Name."(";
    my($key);
    foreach $key (keys %{$self}) {
	$ret .= $key . " => ";
	if (defined($self->{$key})) {
	    $ret .= "'" . $self->{$key} . "'";
	} else {
	    $ret .= "UNDEF";
	}
	$ret .= ", ";
    }
    return $ret;
}

sub Dump {
    my $proto=shift;
    my $class = ref($proto) || $proto;
    my $self= ref($proto) && $proto;
    if (!$self) {
	print "Dumping ", $class->NameClass, "\n";
    	my $entity;
    	foreach $entity (values %{$class->GetCollection()}) {
	    $entity->Dump;
	}
    } else {
	print $self->Name, "[", $self->Id, "]\n";
	my($key);
	foreach $key (keys %{$self}) {
	    print "  ", $key, " => ";
	    if (defined($self->{$key})) {
		print "'", $self->{$key}, "'\n";
	    } else {
		print "UNDEF\n";
	    }
	}
    }
}

sub CreateEntities {
    my $proto=shift;
    my $class = ref($proto) || $proto;
    my $self= ref($proto) && $proto;
    if (!$self) {
    	my $entity;
    	foreach $entity (values %{$class->GetCollection()}) {
	    $entity->CreateEntities;
	}
    } else {
	SuperTrace::AddFirst($self->DateStart-1, undef, undef, undef, $self->EventEntityCreate, $self);
	SuperTrace::Add($self->DateEnd+1, undef, undef, undef, $self->EventEntityCreate + 1, $self);
    }
}

sub Debug {
    my $self=shift;
    if ($debug) {
	print $self->Name, "[", $self->Id, "]: ", @_, "\n";
    }
}

1;


##########################################################################
# EntitySW
#
package EntitySW;
our(@ISA);
@ISA=("Entity");

sub new {
    my($class)=shift;

    my $self=$class->SUPER::new(@_ , "CURSW"=>undef, "LASTSW"=>undef,
	    			     "DATESW"=>undef, "INFOSW"=>undef);
    return $self;
}

sub CurSW {
    my $self=shift;
    if (@_) {
	$debug && print "SW: ", $self->Name, " take ", $_[0]->Name, "\n";
	$self->{CURSW} = shift;
    }
    return $self->{CURSW};
}

sub LastSW {
    my $self=shift;
    if (@_) {
	my $next=shift;
        if ($next) {
	    $debug && print "SW: ", $self->Name, " keep ", $next->Name, "\n";
	    $self->{LASTSW} = $next;
	} else {
	    $debug && print "SW: ", $self->Name, " flushing old\n";
	    if (defined($self->{LASTSW})) {
		$self->{LASTSW}->CurScheduler(0);
	    }
	    $self->{LASTSW} = undef;
	}
    }
    return $self->{LASTSW};
}

sub DateSW {
    my $self=shift;
    if (@_) {
	$self->{DATESW} = shift;
    }
    return $self->{DATESW};
}

sub InfoSW {
    my $self=shift;
    if (@_) {
	$self->{INFOSW} = shift;
    }
    return $self->{INFOSW};
}

sub MoveSW {

}

sub EnsureSW {
    my $self=shift;
    my $date=shift;
    my $SW=shift;
    my $info=shift;
    
    if (!defined($self->CurSW)) {
	$self->CurSW($SW);
    } else {
	if ($self->CurSW == $SW) {
	    if (defined($self->LastSW)) {
		$self->EmitSW;
		$self->LastSW(0);
	    }
	} else {
	    if ($self->LastSW == $SW) {
		$self->DateSW($date);
		$self->InfoSW($info);
		$self->Debug("Sw reproted at $date\n");
		$self->MoveSW($date);
	    } else {
		print STDERR "Arg, qu'est-ce qui se passe at $date!\n",
		"CurSW=", $self->CurSW->Name, " SW=", $SW->Name, 
		" LastSW=", defined($self->LastSW) && $self->LastSW || "UNDEF","\n";
		$debug && print "Arg, qu'est-ce qui se passe at $date!\n",
		"In ", $self->Name, ": ",
		"CurSW=", $self->CurSW->Name, " SW=", $SW->Name, 
		" LastSW=", defined($self->LastSW) && $self->LastSW || "UNDEF","\n";
	    }
	}
    }
}

sub ProposeSW {
    my $self=shift;
    my $date=shift;
    my $oldSW=shift;
    my $newSW=shift;
    my $info=shift;

    $self->Debug("SW Proposed at $date from ",
    	$oldSW->Name, " to ", $newSW->Name, "");
    $self->EnsureSW($date, $oldSW, $info);
    $self->InvalidOldSW($newSW);
    $self->LastSW($self->CurSW);
    $self->CurSW($newSW);
    $self->DateSW($date);
    $self->InfoSW($info);
    if ($newSW->CurScheduler) {
	print STDERR "Arghh, on a encore une entité qui nous ordonnance!\n";
	$debug && print "Arg SW propose ", $newSW->Name, " in ", $self->Name,
	" while having ", $newSW->CurScheduler->Name, "\n";
    }
    $newSW->CurScheduler($self);
}

sub FlushSW {
    my $proto=shift;
    my $class = ref($proto) || $proto;
    my $self= ref($proto) && $proto;
    if (!$self) {
    	my $entity;
	my $arg=$_[0];
	$debug && print "Flushing for $class ";
	if (defined($arg)) {
	    $debug && print "(",$arg->Name,")";
	}
	$debug && print "\n";
    	foreach $entity (values %{$class->GetCollection()}) {
	    $entity->FlushSW(@_);
	}
    } else {
	my $SW=shift;
	if ($debug) {
	    print "Flushing for ",$self->Name, " ";
	    if (defined($SW)) {
		print "(",$SW->Name,")";
	    }
	    if (defined($self->LastSW)) {
		print "[",$self->LastSW->Name,"]";
	    }
	    print "\n";
	}
        if (defined($self->LastSW) &&
	         (!(defined($SW)) || ($SW == $self->LastSW))) {
	    $debug && print "Yes, do flush\n";
	    $self->EmitSW;
	    $self->LastSW(0);
        }
    }
}

sub InvalidOldSW {
    my $self=shift;
    my $SW=shift;

    ref($self)->FlushSW($SW);
}

##########################################################################
# Processors
#
package Processor;
#use Entity;
our(@ISA);
@ISA=("EntitySW");

my(%Processor_Collection)=();


sub GetCollection {
    return \%Processor_Collection;
}

sub NameClass {
    return "Processor";
}

sub EmitSW {
    my $self=shift;

    SuperTrace::Insert_KSW($self);
}

sub EventEntityCreate {
    return Event::CREATE_PROC;
}

1;

##########################################################################
# LWPs
#
package LWP;
#use Entity;
our(@ISA);
@ISA=("EntitySW");

my(%LWP_Collection)=();

sub GetCollection {
    return \%LWP_Collection;
}

sub NameClass {
    return "LWP";
}

sub Name {
    my $self=shift;
    if (@_) {
	$self->{NAME} = shift;
    }
    if (defined($self->{NAME})) {
	return $self->{NAME}.'['.$self->Id.']';
    } else {
        return $self->SUPER::Name;
    }
}

sub JustAfterSW {
    my $self=shift;

    return defined($self->LastSW);
}

sub DelayedUEV {
    my $self=shift;
    if (@_) {
	my $elem=shift;
	if ($elem) {
	    $debug && SuperTrace::DumpEv($elem, "Adding Delay... ");
	    push @{$self->{DELAYED_UEV}}, $elem;
	} else {
	    $debug && print "purging\n";
	    @{$self->{DELAYED_UEV}} = undef;
	}
    }
    return $self->{DELAYED_UEV};
}

sub Delay {
    my $self=shift;
    my $ev=shift;

    $self->DelayedUEV($ev);
}

sub Utid {
    my $self=shift;
    return $self->CurSW;
}

sub EmitSW {
    my $self=shift;
    
    SuperTrace::Insert_USW($self);
}

sub MoveSW {
    my $self=shift;
    my $utid=$self->LastSW;
    my $ev;
    
    if (defined($self->DelayedUEV)) {
	foreach $ev (@{$self->DelayedUEV}) {
	    $debug && print "moving $ev to $utid: ";
	    my $field;
	    for $field (@{$ev}) {
	        $debug && print $field, " ";
	    }
	    $debug && print "\n";
	    SuperTrace::Update_Utid($ev, $utid);
	}
    }
    $self->DelayedUEV(0);
}

sub EventEntityCreate {
    return Event::CREATE_LWP;
}

1;

##########################################################################
# Threads
#
package Thread;
#use Entity;
our(@ISA);
@ISA=("Entity");

my(%Thread_Collection)=();

sub GetCollection {
    return \%Thread_Collection;
}

sub NameClass {
    return "Thread";
}

sub Name {
    my $self=shift;
    if (@_) {
	$self->{NAME} = shift;
    }
    if (defined($self->Named)) {
	return $self->Named;
    }
    if (defined($self->{NAME})) {
	return $self->{NAME}.'['.$self->Id.']';
    } else {
        return $self->SUPER::Name;
    }
}

sub Named {
    my $self=shift;
    if (@_) {
	$self->{NAMED} = shift;
    }
    return $self->{NAMED};
}

sub EventEntityCreate {
    return Event::CREATE_UT;
}

1;

##########################################################################
# SuperTrace
#
package SuperTrace;

sub Insert_KSW {
    my $proc=shift;
    
    my ($oldlwp)=$proc->LastSW;
    my ($newlwp)=$proc->CurSW;
    my ($date)=$proc->DateSW;

    my $oldutid=$oldlwp->Utid;
    my $newutid=$newlwp->Utid;
    my ($oldev, $newev);
    ($oldev,$newev)=SuperTrace::AddKSW($date, $proc, $oldlwp, $oldutid,
				       $newlwp, $newutid);
    if ($oldlwp->JustAfterSW) {
	$newlwp->Delay($oldev);
    }
    if ($newlwp->JustAfterSW) {
	$newlwp->Delay($newev);
    }
}

sub Update_Utid {
    my $ev=shift;
    my $utid=shift;
    if (defined($ev)) {	
	$ev->[3]=$utid;
        $debug && DumpEv($ev, "** Correction of $ev to $utid");
    }
}

sub Insert_USW {
    my $lwp=shift;

    my ($oldutid)=$lwp->LastSW;
    my ($newutid)=$lwp->CurSW;
    my ($date)=$lwp->DateSW;
    my ($proc)=$lwp->InfoSW;

    SuperTrace::AddUSW($date, $proc, $lwp, $oldutid, $newutid);
}

sub AddKSW {
    my $date=shift;
    my $proc=shift;
    my $oldlwp=shift;
    my $oldutid=shift;
    my $newlwp=shift;
    my $newutid=shift;

    return (Add($date, $proc, $oldlwp, $oldutid, Event::LWP_GIVE_HAND, $newlwp), 
	    Add($date, $proc, $newlwp, $newutid, Event::LWP_GET_HAND, $oldlwp));
    #TODO
}

sub AddUSW {
    my $date=shift;
    my $proc=shift;
    my $lwp=shift;
    my $oldutid=shift;
    my $newutid=shift;

    return (Add($date, $proc, $lwp, $oldutid, Event::UT_GIVE_HAND, $newutid), 
	    Add($date, $proc, $lwp, $newutid, Event::UT_GET_HAND, $oldutid));
    #TODO
}

my (@SuperTrace_events);

sub Add { 
    my $date=shift;
    my $proc=shift;
    my $lwp=shift;
    my $utid=shift;
    my $ev_type=shift;
    my $ev_info=shift;

    my @ev=($date, $proc, $lwp, $utid, $ev_type, $ev_info);

    $debug && DumpEv(\@ev, "Emitting: ");
    push @SuperTrace_events, \@ev;
    return \@ev;
}

sub AddFirst { 
    my $date=shift;
    my $proc=shift;
    my $lwp=shift;
    my $utid=shift;
    my $ev_type=shift;
    my $ev_info=shift;

    my @ev=($date, $proc, $lwp, $utid, $ev_type, $ev_info);

    unshift @SuperTrace_events, \@ev;
    return \@ev;
}

sub Sort {
    my @ev;

    @ev=sort { $a->[0] <=> $b->[0] } @SuperTrace_events;
    @SuperTrace_events=@ev;

}

sub DateStart {
    return $SuperTrace_events[1]->[0];
}

sub DateEnd {
    return $SuperTrace_events[scalar(@SuperTrace_events)-1]->[0];
}

sub DumpEv {
    my $ev=shift;
    my $prefix=shift;
    if (not defined($prefix)) {
	$prefix="";
    }

        my $utid;
	if (defined($ev->[3])) {
	    $utid=$ev->[3]->Name;
	} else {
	    $utid="UNDEF   ";
	}
	print $prefix, $ev->[0], 
	      "  ",defined($ev->[1]) && $ev->[1]->Name,
	      "  ",defined($ev->[2]) && $ev->[2]->Name,
	      "\t",defined($ev->[3]) && $ev->[3]->Name,,
	      "\t{",($Event::Name[$ev->[4]]),"}";
	if (ref($ev->[5]) eq "ARRAY") {
	    my $i;
	    for ($i=4; $i<scalar(@{$ev->[5]}); $i++) {
		print "\t[", $ev->[5]->[$i], "]";
	    }
	} elsif (ref($ev->[5]) eq "LWP" or ref($ev->[5]) eq "Thread") {
	    print "\t", $ev->[5]->Name;
	}
	print "\n";
}

sub Dump {
    my $ev;
    my $prefix=shift;
    if (not defined($prefix)) {
	$prefix="";
    }

    print $prefix, "Dump Events:\n";
    foreach $ev (@SuperTrace_events) {
	DumpEv($ev, $prefix);
    }

}
   
sub PajeEvents {
    my $ev;

    foreach $ev (@SuperTrace_events) {
    	PajeEvent($ev);
    }
}

sub PajeEvent {
    my($event)=shift;
    my($date, $proc, $act, $lwp, $utid, $ev_type, $event_infos);
    
    ($date, $proc, $lwp, $utid, $ev_type, $event_infos)=@{$event};

    if ($ev_type==Event::UT_GIVE_HAND) {
	Paje::paje_ut_give_hand($date, $proc, undef, $lwp, $utid);
    } elsif ($ev_type==Event::UT_GET_HAND) {
	Paje::paje_ut_get_hand($date, $proc, undef, $lwp, $utid);
    } elsif ($ev_type==Event::LWP_GIVE_HAND) {
	Paje::paje_kt_give_hand($date, $proc, undef, $lwp, $utid);
    } elsif ($ev_type==Event::LWP_GET_HAND) {
	Paje::paje_kt_get_hand($date, $proc, undef, $lwp, $utid);
    } elsif ($ev_type==Event::FUT || $ev_type==Event::FKT) {
	my @ev=@{$event_infos};
	splice(@ev,0,5);
	if ($ev[0] eq "gcc-traced") {
	    if ($ev[2] eq "entry") {
		Paje::paje_function_enter($date, $ev[3], $utid, \@ev);
	    } else {
		Paje::paje_function_exit($date, $ev[3], $utid, \@ev);
	    }
	} else {
	    Paje::paje_event_gen($date, $utid, join(' ', @ev));
	}
    } elsif ($ev_type==Event::CREATE_PROC) {
	Paje::paje_proc_register($date, $event_infos);
    } elsif ($ev_type==Event::DESTROY_PROC) {
	Paje::paje_proc_unregister($date, $event_infos);
    } elsif ($ev_type==Event::CREATE_LWP) {
	Paje::paje_lwp_register($date, $event_infos);
    } elsif ($ev_type==Event::DESTROY_LWP) {
	Paje::paje_lwp_unregister($date, $event_infos);
    } elsif ($ev_type==Event::CREATE_UT) {
	my @ev=(undef, undef, undef, "Existing");
	Paje::paje_ut_register($date, $event_infos);
	Paje::paje_function_enter($date, "Existing", $event_infos, \@ev);
    } elsif ($ev_type==Event::DESTROY_UT) {
	my @ev=(undef, undef, undef, "Existing");
	Paje::paje_function_exit($date, "Existing", $event_infos, \@ev);
	Paje::paje_ut_unregister($date, $event_infos);
#    } elsif (/UEV_FUNC_ENTER/) {
#	my($function)=$event_infos->{"function"};
#	paje_function_enter($date, $function, $utid, $event_infos);
#    } elsif (/UEV_FUNC_EXIT/) {
#	my($function)=$event_infos->{"function"};
#	paje_function_exit($date, $function, $utid, $event_infos);
	#my($fid)=paje_function_get_id($function, $date);
	#paje_print(6,$date,"$fid UE \"$event_infos\"");
	#paje_print(10,$date,"UE UTV_UT$utid $fid");
	#paje_print(6,$date,"UE".++$nbev." UTV_UT_FUNC \"$event_infos\"");
	#paje_print(10,$date,"UTV_UT_FUNC UTV_UT$utid UTV_UT_E".$nbev);
	#__display_event($date, $proc, $act, $lwp, $utid, $event_infos);
    } else {
	print STDERR "Unknown event type $ev_type\n";
	#__display_event($date, $proc, $act, $lwp, $utid, 
	#		"Unknown event type $ev_type");
    }
}

##########################################################################
# FxT
#
package FxT;

sub InsertFKT {
    my $date=shift;
    my $proc=shift;
    my $lwp=shift;
    my $event=shift;
    $proc=Processor->Ensure($proc, $date, $lwp);
    $lwp=LWP->Ensure($lwp, $date);
    $proc->EnsureSW($date, $lwp, undef);
    $lwp->Name($event->[4]);
    
    if (EventIsKSW($event)) {
	my $next=LWP->Ensure(KFirst($event), $date);
	$proc->ProposeSW($date, $lwp, $next, undef);
    } else {
	my $utid;
	if (EventIsUserFork($event)) {
	    $utid=Thread->Ensure(KFirst($event), $date);
	    $lwp->FlushSW;
	    $lwp->CurSW($utid);
	    $utid->CurScheduler($lwp);
        } else {
    	    $utid=$lwp->Utid;
	}
    	my $ev=SuperTrace::Add($date, $proc, $lwp, $utid, Event::FKT, $event);
	if ($lwp->JustAfterSW) {
	    $lwp->Delay($ev);
	}
    }
}

sub InsertFUT {
    my $date=shift;
    my $utid=shift;
    my $event=shift;

    $utid=Thread->Ensure($utid, $date);
    if (!$utid->Named) {
	#$utid->Name($event->[4]);
    }
    if ($event->[5] eq "fut_set_thread_name") {
	my($name)="";
	my($val);
	for $val ($event->[6], $event->[7], $event->[8], $event->[9]) {
	    if ($val =~ /^0x/) {
		$val =hex($val);
	    } else {
		$val += 0;
	    }
	    my($i);
	    my($l);
	    for $i (0, 1, 2, 3) {
		$l=($val >> (8*$i)) & 0xFF;
		last if ($l == 0);
		$name.= chr $l;
	    }
	    last if ($l == 0);
	}
	$utid->Named($name);
    }
    my $lwp=$utid->CurScheduler;
    if (not defined($lwp)) {
	print STDERR "Skipping User event at date $date (no LWP)\n";
	$debug && print "Skipping User event at date $date (no LWP)\n";
	return;
    }
    $debug && print "CurLWP: ", $lwp->Name, "\n";
    my $proc=$lwp->CurScheduler;
    if (not defined($proc)) {
	print STDERR "Skipping User event at date $date (no Processor)\n";
	$debug && print "Skipping User event at date $date (no Processor)\n";
	return;
    }
    
    $proc->EnsureSW($date,$lwp,undef);
    $lwp->EnsureSW($date,$utid,$proc);
    if (EventIsUSW($event)) {
	my $next=Thread->Ensure(UFirst($event),$date);
	$lwp->ProposeSW($date, $utid, $next, $proc);
    } else {
    	SuperTrace::Add($date, $proc, $lwp, $utid, Event::FUT, $event);
    }
}

sub EventIsKSW {
    my $event=shift;
    my $type=$event->[5];

    return $type =~ /switch_to/;    
}

sub EventIsUSW {
    my $event=shift;
    my $type=$event->[5];

    return $type =~ /switch_to/;    
}

sub EventIsUserFork {
    my $event=shift;
    my $type=$event->[5];

    return $type eq "user_fork";    
}

sub KFirst {
    my $event=shift;

    return $event->[6];
}

sub UFirst {
    my $event=shift;

    return $event->[6];
}

1;

################################################################
################################################################
################################################################
package Paje;

use constant SetLimits => 0;
use constant DefineContainerType => 1;
use constant DefineEventType     => 2;
use constant DefineStateType     => 3;
use constant DefineVariableType  => 4;
use constant DefineLinkType      => 5;
use constant DefineEntityValue   => 6;
use constant CreateContainer     => 7;
use constant DestroyContainer    => 8;
use constant NewEvent    => 9;
use constant SetState    => 10;
use constant PushState   => 11;
use constant PopState    => 12;
use constant SetVariable => 13;
use constant AddVariable => 14;
use constant SubVariable => 15;
use constant StartLink   => 16;
use constant EndLink     => 17;

################################################################
# Génération d'une trace paje
sub Entete {
    my($first_date)=SuperTrace::DateStart();
    my($end_date)=SuperTrace::DateEnd();
    print
	'%EventDef       SetLimits       '.SetLimits."\n".
	'%       Time    date'."\n".
	'%       StartTime       date'."\n".
	'%       EndTime date'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajeDefineContainerType '.DefineContainerType."\n".
	'%       Time    date'."\n".
	'%       NewType string'."\n".
	'%       ContainerType   string'."\n".
	'%       NewName string'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajeDefineEventType '.DefineEventType."\n".
	'%       Time    date'."\n".
	'%       NewType string'."\n".
	'%       ContainerType   string'."\n".
	'%       NewName string'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajeDefineStateType '.DefineStateType."\n".
	'%       Time    date'."\n".
	'%       NewType string'."\n".
	'%       ContainerType   string'."\n".
	'%       NewName string'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajeDefineVariableType '.DefineVariableType."\n".
	'%       Time    date'."\n".
	'%       NewType string'."\n".
	'%       ContainerType   string'."\n".
	'%       NewName string'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajeDefineLinkType '.DefineLinkType."\n".
	'%       Time    date'."\n".
	'%       NewType string'."\n".
	'%       ContainerType   string'."\n".
	'%       SourceContainerType     string'."\n".
	'%       DestContainerType       string'."\n".
	'%       NewName string'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajeDefineEntityValue '.DefineEntityValue."\n".
	'%       Time    date'."\n".
	'%       NewValue        string'."\n".
	'%       EntityType      string'."\n".
	'%       NewName string'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajeCreateContainer '.CreateContainer."\n".
	'%       Time    date'."\n".
	'%       NewContainer    string'."\n".
	'%       NewContainerType        string'."\n".
	'%       Container       string'."\n".
	'%       NewName string'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajeDestroyContainer '.DestroyContainer."\n".
	'%       Time    date'."\n".
	'%       Container       string'."\n".
	'%       Type        string'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajeNewEvent '.NewEvent."\n".
	'%       Time    date'."\n".
	'%       EntityType      string'."\n".
	'%       Container       string'."\n".
	'%       Value   string'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajeSetState '.SetState."\n".
	'%       Time    date'."\n".
	'%       EntityType      string'."\n".
	'%       Container       string'."\n".
	'%       Value   string'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajePushState '.PushState."\n".
	'%       Time    date'."\n".
	'%       EntityType      string'."\n".
	'%       Container       string'."\n".
	'%       Value   string'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajePopState '.PopState."\n".
	'%       Time    date'."\n".
	'%       EntityType      string'."\n".
	'%       Container       string'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajeSetVariable '.SetVariable."\n".
	'%       Time    date'."\n".
	'%       EntityType      string'."\n".
	'%       Container       string'."\n".
	'%       Value   double'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajeAddVariable '.AddVariable."\n".
	'%       Time    date'."\n".
	'%       EntityType      string'."\n".
	'%       Container       string'."\n".
	'%       Value   double'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajeSubVariable '.SubVariable."\n".
	'%       Time    date'."\n".
	'%       EntityType      string'."\n".
	'%       Container       string'."\n".
	'%       Value   double'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajeStartLink '.StartLink."\n".
	'%       Time    date'."\n".
	'%       EntityType      string'."\n".
	'%       Container       string'."\n".
	'%       Value   string'."\n".
	'%       SourceContainer string'."\n".
	'%       Key     string'."\n".
	'%EndEventDef'."\n".
	'%EventDef       PajeEndLink '.EndLink."\n".
	'%       Time    date'."\n".
	'%       EntityType      string'."\n".
	'%       Container       string'."\n".
	'%       Value   string'."\n".
	'%       DestContainer   string'."\n".
	'%       Key     string'."\n".
	'%EndEventDef'."\n";
    Print(0,$first_date,$first_date." ".($end_date+1));
    Print(1,$first_date,"PRG\t0\tProgramme");
    Print(1,$first_date,"UV\tPRG\t\"User Thread View\"");
    Print(1,$first_date,"LV\tPRG\t\"LWP View\"");
    Print(1,$first_date,"PV\tPRG\t\"Processor View\"");
    #paje_print(1,$first_date," UTV_UT\t\tUTV\tUser_Thread");
    
    GroupRegister("UT",
		  EventDef("U", 
			   1, "UV\t\"User Thread\"",
			   \&paje_event_create_u,
			   \&paje_event_destroy_u),
		  EventDef("LU",
			   3, "L\t\"Threads per LWP\"",
			   \&paje_event_create_lu,
			   \&paje_event_destroy_lu, 
			   "L"),
		  EventDef("PU",
			   3, "P\t\"Threads per Processor\"",
			   \&paje_event_create_pu,
			   \&paje_event_destroy_pu, 
			   "P")
		  );
    GroupRegister("LWP",
		  EventDef("L", 
			   1, "LV\t\"LWP\"",
			   \&paje_event_create_l,
			   \&paje_event_destroy_l),
		  EventDef("UL",
			   3, "U\t\"LWPs running Thread\"",
			   \&paje_event_create_ul,
			   \&paje_event_destroy_ul, 
			   "U"),
		  EventDef("PL",
			   3, "P\t\"LWPs per Processor\"",
			   \&paje_event_create_pl,
			   \&paje_event_destroy_pl, 
			   "P")
		  );
    GroupRegister("PROC",
		  EventDef("P", 
			   1, "PV\t\"Processor\"",
			   \&paje_event_create_p,
			   \&paje_event_destroy_p),
		  EventDef("UP",
			   3, "U\t\"Processors running Thread \"",
			   \&paje_event_create_up,
			   \&paje_event_destroy_up, 
			   "U"),
		  EventDef("LP",
			   3, "L\t\"Processors running LWP \"",
			   \&paje_event_create_lp,
			   \&paje_event_destroy_lp, 
			   "L")
			);
    GroupRegister("UF",
		  EventDef("UF",
			   3, "U\tFunctions",
			   \&paje_event_create_uf,
			   \&paje_event_destroy_uf));
    GroupRegister("UE",
		  EventDef("UE",
			   2, "U\t\"Misc Events\"",
			   \&paje_event_create_ue,
			   \&paje_event_destroy_ue));
    
    GroupPrint($first_date);
    #paje_print(3,$first_date,' UTV_UT_LWP   UTV_UT LWP');
    Print(7,$first_date,"PRG1\tPRG\t0\tProgramme");
    Print(7,$first_date,"UV1\tUV\tPRG1\t\"User Thread View\"");
    Print(7,$first_date,"LV1\tLV\tPRG1\t\"LWP View\"");
    Print(7,$first_date,"PV1\tPV\tPRG1\t\"Processor View\"");

    #paje_print(6,$first_date,"ULnone\tUL\t\"Lwp Dummy\"");
#	'6  0.00220 R            S      Running'."\n".
#	'6  0.00230 B            S      Blocked'."\n".
#	'6  0.00220 F1           FUNC   "function A"'."\n".
#	'6  0.00230 F2           FUNC   "Function B"'."\n".
#	'7  0.10100 T1           UT     UTV1    Thread_1'."\n".
#	"7  0.10100 T2           UT     UTV1    Thread_2\n";
}

my(%paje_groups)=();

################################################################
# Paje : gestion collections générique

#group
#- groups
#  [name]->
#     - name->[name]
#     - cles
#       [cle]->elem
#     - events
#       [name]->event
#     - nb_events
#     - count
#- events
#  [name]->event
#
#event
#- name
#- master_type
#- master_enddef
#- sub_enddef_func_create (date, group, event, elem)
#- sub_enddef_func_destroy (date, group, event, elem)
#- depends
#- master_printed
#
#elem
#- id -> [paje_id]
#- cle -> [cle]
#- infos -> [infos]
sub EventDef {
    my($name)=shift;
    my($master_type)=shift;
    my($master_enddef)=shift;
    my($sub_enddef_func_create)=shift;
    my($sub_enddef_func_destroy)=shift;
    my(@depends)=@_;
    
    my(%hash)=("name" => $name,
	       "master_type" => $master_type,
	       "master_enddef" => $master_enddef,
	       "sub_enddef_func_create" => $sub_enddef_func_create,
	       "sub_enddef_func_destroy" => $sub_enddef_func_destroy,
	       "depends" => \@depends);
    return \%hash;
}

sub GroupRegister {
    my($name)=shift;
    my($event);
    
    if (defined($paje_groups{$name})) {
	print STDERR "paje group $name already exists\n";
    }
    my(%empty_hash,%eh2);
    $paje_groups{"groups"}{$name}{"cles"}=\%empty_hash;
    $paje_groups{"groups"}{$name}{"name"}=$name;

    for $event (@_) {
	my($evname)=$event->{"name"};
	if (defined($paje_groups{"events"}{$evname})) {
	    print STDERR "Event $evname already defined\n";
	}
	$paje_groups{"events"}{$evname}=$event;
	$paje_groups{"groups"}{$name}{"events"}{$evname}=$event;
	$event->{"group"}=$paje_groups{"groups"}{$name};
    }
    $paje_groups{"groups"}{$name}{"nb_events"}=
	scalar (keys %{$paje_groups{"groups"}{$name}{"events"}});
    $paje_groups{"groups"}{$name}{"count"}=0;    
}

sub GroupPrint {
    my($date)=shift;
    my($paje_event_print_master);
    $paje_event_print_master=sub {
	my($event)=shift;
	
	if (defined($event->{"master_printed"})) {
	    return;
	}
	$event->{"master_printed"}=1;
	my($dep_event);
	for $dep_event (@{$event->{"depends"}}) {
	    $paje_event_print_master->($paje_groups{"events"}{$dep_event});
	}
	Print($event->{"master_type"}, $date, $event->{"name"}."\t".$event->{"master_enddef"});
    };
    my($event);
    for $event (values %{$paje_groups{"events"}}) {
	$paje_event_print_master->($event);
    }
}

sub paje_group_find {
    my($group)=shift;

    if (defined($paje_groups{"groups"}{$group})) {
	return $paje_groups{"groups"}{$group};
    }

    print STDERR "No group for $group\n";
}

sub paje_group_get_event {
    my($group)=shift;
    my($event_name)=shift;

    if (!defined($event_name)) {
	if ($group->{"nb_events"}==1) {
	    print STDERR "Auto event in group ",$group->{"name"},"\n";
	    die "toto";
	}
	$event_name=$group->{"name"};
    }
    if (!defined($group->{"events"}{$event_name})) {
	print STDERR "No event $event_name in group ",$group->{"name"},"\n";
	die;
    }
    return $group->{"events"}{$event_name};
}

sub paje_group_get_elem {
    my($group)=shift;
    my($cle)=shift;

    if (!defined($group->{"cles"}{$cle})) {
	print STDERR "No cle $cle in group ",$group->{"name"},"\n";
    }
    return $group->{"cles"}{$cle};
}

sub paje_group_get_id {
    my($gr)=paje_group_find(shift);
    my($event)=paje_group_get_event($gr, shift);
    my($cle)=shift;
    my($date)=shift;
    my($infos)=shift;

    if (!defined($cle)) { die "toto"; } ;
    if (defined($gr->{"cles"}->{$cle})) {
	return $event->{"name"}.$gr->{"cles"}->{$cle}->{"id"};
    }
    my($elem)=paje_group_create($gr->{"name"}, $cle, $date, $infos);
    return $event->{"name"}.$elem->{"id"};
}

sub paje_group_get {
    my($group)=shift;
    my($info)=shift;
    my($gr)=paje_group_find($group);

    if (defined($gr->{$info})) {
	return $gr->{$info};
    }
    print STDERR "No info $info for group $group\n";
    return;
}

sub paje_group_create {
    my($gr)=paje_group_find(shift);
    my($cle)=shift;
    my($date)=shift;
    my($infos)=shift;

#    if ($cle == 3221158976) {
#	die;
#    }

    if (defined($gr->{"cles"}->{$cle})) {
	print STDERR "Cle $cle already exist in group ".$gr->{"name"}."\n";
	die "";
    }

    my($id)=++($gr->{"count"});
    my(%new_hash)=("id" => $id,
		   "cle" => $cle,
		   "infos" => $infos);
    $gr->{"cles"}->{$cle}=\%new_hash;
    
    my($sub_event);
    for $sub_event (values %{$gr->{"events"}}) {
	($sub_event->{"sub_enddef_func_create"})->
	    ($date, $gr, $sub_event, \%new_hash);
    }
    return \%new_hash;

}

sub paje_group_destroy {
    my($gr)=paje_group_find(shift);
    my($cle)=shift;
    my($elem)=paje_group_get_elem($gr, $cle);
    my($date)=shift;
    my($infos)=shift;

#    if ($cle == 3221158976) {
#	die;
#    }

    my($sub_event);
    for $sub_event (reverse (values %{$gr->{"events"}})) {
	($sub_event->{"sub_enddef_func_destroy"})->
	    ($date, $gr, $sub_event, $elem);
    }
    delete ($gr->{"cles"}->{$cle});
}

################################################################
# Paje : gestion événements utilisateurs
sub paje_event_create_ue {
    my($date)=shift;
    my($gr)=shift;
    my($event)=shift;
    my($elem)=shift;

    Print(DefineEntityValue, $date, $event->{"name"}.$elem->{"id"}." ".
	       $event->{"name"}.' "'.$elem->{"infos"}.'"');
}

sub paje_event_destroy_ue {
}

sub paje_event_create_id {
    my($group)=shift;
    my($cle)=shift;
    my($date)=shift;
    my($id)=shift;
    my($gr)=paje_group_find($group);

    Print($gr->{"type"}, $date, $gr->{"prefix"}.$id.
	       " ".$gr->{"type_name"}.' "'.
	       $gr->{"cles"}->{$cle}->{"infos"}.'"');
}

sub paje_event_destroy_id {
}

sub paje_event_gen {
    my($date)= shift;
    my($utid)= shift;
    my($event)= shift;

    if (defined($utid)) {
	my($id)=paje_group_get_id("UE", "UE", "none", $date, $event);
	my($tid)=paje_group_get_id("UT", "U", $utid->Name, $date);
	Print(10,$date,"UE $tid $id");
	paje_group_destroy("UE", "none");
    }
}

################################################################
# Paje : gestion threads utilisateurs
sub paje_event_create_u {
    my($date)=shift;
    my($gr)=shift;
    my($event)=shift;
    my($elem)=shift;

    Print(CreateContainer, $date, $event->{"name"}.$elem->{"id"}." ".
	  $event->{"name"}.' UV1 "'.$elem->{"cle"}.'"');
}

sub paje_event_destroy_u {
    my($date)=shift;
    my($gr)=shift;
    my($event)=shift;
    my($elem)=shift;

    Print(DestroyContainer, $date, $event->{"name"}.$elem->{"id"}." ".
	  $event->{"name"});
}

sub paje_event_create_lu {
    my($date)=shift;
    my($gr)=shift;
    my($event)=shift;
    my($elem)=shift;

    Print(DefineEntityValue, $date, $event->{"name"}.$elem->{"id"}." ".
	  $event->{"name"}.' "'.$elem->{"cle"}.'"');
}

sub paje_event_destroy_lu {
}

sub paje_event_create_pu {
    my($date)=shift;
    my($gr)=shift;
    my($event)=shift;
    my($elem)=shift;

    Print(DefineEntityValue, $date, $event->{"name"}.$elem->{"id"}." ".
	  $event->{"name"}.' "'.$elem->{"cle"}.'"');
}

sub paje_event_destroy_pu {
}

sub paje_event_create_l {
    my($date)=shift;
    my($gr)=shift;
    my($event)=shift;
    my($elem)=shift;

    Print(CreateContainer, $date, $event->{"name"}.$elem->{"id"}." ".
	  $event->{"name"}.' LV1 "'.$elem->{"cle"}.'"');
}

sub paje_event_destroy_l {
    my($date)=shift;
    my($gr)=shift;
    my($event)=shift;
    my($elem)=shift;

    Print(DestroyContainer, $date, $event->{"name"}.$elem->{"id"}." ".
	  $event->{"name"});
}

sub paje_event_create_ul {
    my($date)=shift;
    my($gr)=shift;
    my($event)=shift;
    my($elem)=shift;

    Print(DefineEntityValue, $date, $event->{"name"}.$elem->{"id"}." ".
	  $event->{"name"}.' "'.$elem->{"cle"}.'"');
}

sub paje_event_destroy_ul {
}

sub paje_event_create_pl {
    my($date)=shift;
    my($gr)=shift;
    my($event)=shift;
    my($elem)=shift;

    Print(DefineEntityValue, $date, $event->{"name"}.$elem->{"id"}." ".
	  $event->{"name"}.' "'.$elem->{"cle"}.'"');
}

sub paje_event_destroy_pl {
}

sub paje_event_create_p {
    my($date)=shift;
    my($gr)=shift;
    my($event)=shift;
    my($elem)=shift;

    Print(CreateContainer, $date, $event->{"name"}.$elem->{"id"}." ".
	  $event->{"name"}.' PV1 "'.$elem->{"cle"}.'"');
}

sub paje_event_destroy_p {
    my($date)=shift;
    my($gr)=shift;
    my($event)=shift;
    my($elem)=shift;

    Print(DestroyContainer, $date, $event->{"name"}.$elem->{"id"}." ".
	  $event->{"name"});
}

sub paje_event_create_up {
    my($date)=shift;
    my($gr)=shift;
    my($event)=shift;
    my($elem)=shift;

    Print(DefineEntityValue, $date, $event->{"name"}.$elem->{"id"}." ".
	  $event->{"name"}.' "'.$elem->{"cle"}.'"');
}

sub paje_event_destroy_up {
}

sub paje_event_create_lp {
    my($date)=shift;
    my($gr)=shift;
    my($event)=shift;
    my($elem)=shift;

    Print(DefineEntityValue, $date, $event->{"name"}.$elem->{"id"}." ".
	  $event->{"name"}.' "'.$elem->{"cle"}.'"');
}

sub paje_event_destroy_lp {
}

sub paje_ut_register {
    my($date)=shift;
    my($utid)=shift;

    my($id)=paje_group_create("UT", $utid->Name, $date);
}

sub paje_ut_unregister {
    my($date)=shift;
    my($utid)=shift;

    my($id)=paje_group_destroy("UT", $utid->Name, $date);
}

sub paje_lwp_register {
    my($date)=shift;
    my($lwp)=shift;

    my($id)=paje_group_create("LWP", $lwp->Name, $date);
}

sub paje_lwp_unregister {
    my($date)=shift;
    my($lwp)=shift;

    my($id)=paje_group_destroy("LWP", $lwp->Name, $date);
}

sub paje_proc_register {
    my($date)=shift;
    my($proc)=shift;

    my($id)=paje_group_create("PROC", $proc->Name, $date);
}

sub paje_proc_unregister {
    my($date)=shift;
    my($proc)=shift;

    my($id)=paje_group_destroy("PROC", $proc->Name, $date);
}

my($actif)=-1;

sub paje_ut_get_hand {
    my($date)=shift;
    my($proc)=shift;
    my($act)=shift;
    my($lwp)=shift;
    my($utid)=shift;
    
    my($cuid)=paje_group_get_id("UT", "U", $utid->Name, $date);
    my($clid)=paje_group_get_id("LWP", "L", $lwp->Name, $date);
    my($cpid)=paje_group_get_id("PROC", "P", $proc->Name, $date);

    my($luid)=paje_group_get_id("UT", "LU", $utid->Name, $date);
    my($ulid)=paje_group_get_id("LWP", "UL", $lwp->Name, $date);
    my($puid)=paje_group_get_id("UT",  "PU", $utid->Name, $date);
    my($upid)=paje_group_get_id("PROC","UP", $proc->Name, $date);

    Print(11,$date,"UL $cuid $ulid");
    Print(11,$date,"LU $clid $luid");
    Print(11,$date,"PU $cpid $puid");
    Print(11,$date,"UP $cuid $upid");
}

sub paje_ut_give_hand {
    my($date)=shift;
    my($proc)=shift;
    my($act)=shift;
    my($lwp)=shift;
    my($utid)=shift;
    
    my($cuid)=paje_group_get_id("UT", "U", $utid->Name, $date);
    my($clid)=paje_group_get_id("LWP", "L", $lwp->Name, $date);
    my($cpid)=paje_group_get_id("PROC", "P", $proc->Name, $date);

    Print(12,$date,"UL $cuid");
    Print(12,$date,"LU $clid");
    Print(12,$date,"PU $cpid");
    Print(12,$date,"UP $cuid");
}

sub paje_kt_get_hand {
    my($date)=shift;
    my($proc)=shift;
    my($act)=shift;
    my($lwp)=shift;
    my($utid)=shift;
    
    my($cuid);
    if (defined($utid)) {
	$cuid=paje_group_get_id("UT", "U", $utid->Name, $date);
    }
    my($clid)=paje_group_get_id("LWP", "L", $lwp->Name, $date);
    my($cpid)=paje_group_get_id("PROC", "P", $proc->Name, $date);

    my($lpid)=paje_group_get_id("PROC", "LP", $proc->Name, $date);
    my($plid)=paje_group_get_id("LWP", "PL", $lwp->Name, $date);
    my($puid);
    if (defined($utid)) {
	$puid=paje_group_get_id("UT",  "PU", $utid->Name, $date);
    }
    my($upid)=paje_group_get_id("PROC","UP", $proc->Name, $date);

    Print(11,$date,"LP $clid $lpid");
    Print(11,$date,"PL $cpid $plid");
    if (defined($utid)) {
	Print(11,$date,"PU $cpid $puid");
	Print(11,$date,"UP $cuid $upid");
    }
}

sub paje_kt_give_hand {
    my($date)=shift;
    my($proc)=shift;
    my($act)=shift;
    my($lwp)=shift;
    my($utid)=shift;

    my($cuid);
    if (defined($utid)) {
	$cuid=paje_group_get_id("UT", "U", $utid->Name, $date);
    }
    my($clid)=paje_group_get_id("LWP", "L", $lwp->Name, $date);
    my($cpid)=paje_group_get_id("PROC", "P", $proc->Name, $date);

    Print(12,$date,"LP $clid");
    Print(12,$date,"PL $cpid");
    Print(12,$date,"PU $cpid");
    if (defined($utid)) {
	Print(12,$date,"UP $cuid");
    }
}

################################################################
# Paje : gestion fonctions utilisateurs
sub paje_event_create_uf {
    my($date)=shift;
    my($gr)=shift;
    my($event)=shift;
    my($elem)=shift;

    Print(DefineEntityValue, $date, $event->{"name"}.$elem->{"id"}." ".
	  $event->{"name"}.' '.$elem->{"infos"}->[3]);
}

sub paje_function_enter {
    my($date)= shift;
    my($function)= shift;
    my($utid)= shift;
    my($infos)= shift;
    my($tid)=paje_group_get_id("UT", "U", $utid->Name, $date);
    my($fid)=paje_group_get_id("UF", "UF", $function, $date, $infos);
   
    Print(11,$date,"UF $tid $fid");
}

sub paje_function_exit {
    my($date)= shift;
    my($function)= shift;
    my($utid)= shift;
    my($infos)= shift;
    my($tid)=paje_group_get_id("UT", "U", $utid->Name, $date);
    my($fid)=paje_group_get_id("UF", "UF", $function, $date, $infos);
   
    Print(12,$date,"UF $tid");
}

################################################################
my($last_date)=0;
my($rand_delay)=0;
use Math::BigInt  lib => 'GMP';
sub Print {
    my($type) = shift;
    my($date) = shift;
    my($infos) = shift;
    my($pdate) = Math::BigInt->new(0);

    if ($date < SuperTrace::DateStart()) {
	$pdate = SuperTrace::DateStart();
    } else {
	$pdate += $date*1;
    }

#    if ($date < $last_date) {
#	$date = $last_date;
#    }
#    if ($date == $last_date) {
#	$date = $last_date+$paje_date_delay;
#    }
#    if ($date != $last_date) {
#	$rand_delay+=rand 3;
#    }
#    $pdate=$date+$rand_delay;
#    $last_date=$date;
    my($cycle)=$pdate % 2657798000;
    my($s)=$pdate/2657798000;
    my($ns)=($cycle*1000000000) / 2657798000;

    printf("%i $s.%09s %s\n", $type, $ns, $infos);
}

sub Events {
    SuperTrace::PajeEvents;
}

sub End {

}


package main;

################################################################
# FKT/FUT

sub insert_fkt_event {
    my($date)=shift;
    my($proc)=shift;
    my($lwp)=shift;
    my($ev)=shift; # événement

    ensure_proc($date, $proc, $lwp) or
	print STDERR "Event on new proc $proc\n";
    if ($lwp == 0) {
	$lwp = -$proc #IDLE processes
    }
    ensure_proc($date, $proc, $lwp) or
	print STDERR "Event on new proc $proc\n";

    if ($ev->[5] eq "switch_to") {
	my($old_lwp)=proc_get_lwp($proc);
    	insert_KSW($date, $old_lwp, $lwp, $proc);
    } elsif ($ev->[5] eq "user_fork") {
	my($utid)=$ev->[6];
	$utid =~ s/,$//;
	ensure_lwp($date, $proc, $lwp, $utid, $utid);	
	ensure_ut($date, $proc, get_lwp_by_num($lwp), $utid, $utid);	
    } else {
	print STDERR "Ignoring ev $ev->[5]\n";
    }
}

sub insert_fut_event {
    my($date)=shift;
    my($proc)=shift;
    my($utid)=shift;
    my($ev)=shift; # événement

    if ($ev->[5] eq "fut_switch_to") {
    	insert_USW($date, $utid, $ev->[6], $proc);
    } elsif ($ev->[5] eq "user_fork") {
	my($utid)=$ev->[6];
	$utid =~ s/,$//;
	my($lwp)=0;
	ensure_lwp($date, $proc, $lwp, $utid, $utid);	
	ensure_ut($date, $proc, get_lwp_by_num($lwp), $utid, $utid);	
    } elsif ($ev->[5] eq "gcc-traced") {
	
    } else {
	print STDERR "Ignoring ev $ev->[5]\n";
    }
}


my($max_prefetch)=5;
my($global_offset)=10;
use Math::BigInt  lib => 'GMP';
use sort 'stable';
my($fkt_print)="/home/vdanjean/travail/fkt/tools/fkt_print";
my($fut_print)="/home/vdanjean/travail/fkt/tools/fut_print";
sub input_from_fxt {
    my($user_traces)=shift;
    my($kernel_traces)=shift;
    my($user_basetime);
    my($kernel_basetime);
    my($basetime);
    my($user_offset);
    my($kernel_offset);

    open(FKT, "$fkt_print 2>/dev/null -f $kernel_traces |") 
	or die "Unable to open $kernel_traces: $!\n";
    open(FUT, "$fut_print 2>/dev/null -f $user_traces |") 
	or die "Unable to open $user_traces: $!\n";
    

    while(<FUT>) {
	chomp;
	if (/^initial: basetime ([0-9]+)$/) {
	    $user_basetime = Math::BigInt->new($1);
	    disp("User basetime : ", $user_basetime,"\n");
	    last;
	}
    }
    while(<FKT>) {
	chomp;
	if (/^initial: basetime ([0-9]+)$/) {
	    $kernel_basetime = Math::BigInt->new($1);
	    disp("Kernel basetime : ", $kernel_basetime, "\n");
	    last;
	}
    }
    while(<FKT>) {
	chomp;
	if (/^ *[0-9]+ +([0-9]+) +.* fkt_setup +[0-9a-fx]+,? +[0-9a-fx]+,? +[0-9a-fx]+,? +[0-9a-fx]+,? +([0-9a-fx]+)$/) {
	    my($correction)=Math::BigInt->new($1);
	    my($hi)=Math::BigInt->new(2**32 * $2);
	    $kernel_basetime += $correction + $hi; # + $correction;
	    disp("Kernel basetime corrected : ", $kernel_basetime, "\n");
	    last;
	}
    }
    if ($user_basetime < $kernel_basetime) {
	$basetime=$user_basetime;
	$user_offset=$global_offset;
	$kernel_offset=$kernel_basetime-$user_basetime+$global_offset;
    } else {
	$basetime=$kernel_basetime;
	$kernel_offset=$global_offset;
	$user_offset=$user_basetime-$kernel_basetime+$global_offset;
    }
    disp("Basetime: ", $basetime, " User offset: ", $user_offset, 
	    " Kernel offset: ", $kernel_offset, "\n");

    my($read_user)=$max_prefetch;
    my($read_kernel)=$max_prefetch;
    my(@lines);
    my($last_time)=0;
    
    while(1) {
	while ($read_user>0 || $read_kernel>0) {
	    my(@ligne);
	    my($type);
	    my($offset);
	    if ($read_user>0) {
		$_=<FUT>;
		if ((not $_) || ($_ eq "\n")) {
		    $read_user=-($max_prefetch*2+10);
		    next;
		}
		if (/^===/) {
		    next;
		}
		$read_user--;
		$type="FUT_EV";
		$offset=$user_offset;
	    } elsif ($read_kernel>0) {
		$_=<FKT>;
		if ((not $_) || ($_ eq "\n")) {
		    $read_kernel=-($max_prefetch*2+10);
		    next;
		}
		if (/^===/) {
		    next;
		}
		$read_kernel--;
		$type="FKT_EV";
		$offset=$kernel_offset;
	    } else {
		last;
	    }
	    chomp;
	    @ligne=split;
	    $ligne[0]=$type;
	    $ligne[1]+=$offset;
	    @lines=sort { $a->[1] <=> $b->[1] } @lines, \@ligne;
	}
	my($ev);
	$ev=shift @lines;
	if (!defined($ev)) {
	    last;
	}
	my $field;
	$debug && print "--------------------------------------------------\n";
	$debug && print "Insert: ";
	for $field (@{$ev}) {
	    $field =~ s/,$//;
	    $debug && print $field, " ";
	}
	$debug && print "\n";
	if ($ev->[0] eq "FUT_EV") {
	    FxT::InsertFUT($ev->[1], $ev->[3], $ev);
	    $read_user++;
	} elsif ($ev->[0] eq "FKT_EV") {
	    FxT::InsertFKT($ev->[1], $ev->[2], $ev->[3], $ev);
	    $read_kernel++;
	} else {
	    print "Arghhh\n";
	}
    }
    
    close(FUT);
    close(FKT);

}

################################################################
# Programme principal
use Getopt::Long qw(:config permute);
use Pod::Usage;

sub usage {
    print "Options\n", "  --log pm2logfile\n",
    	"  --user trace_user --kernel trace_kernel\n";
}

sub disp {
    print STDERR @_;
    return 0;
    my($info)=shift;
    while($info) {
    	print STDERR $info;
	$info=shift;
    }
}

sub insert {
    $_=shift;
    chomp;
    $debug && print "--------------------------------------------------\n";
    $debug && print "Insert: ",$_,"\n";
    my @l=split;
    if ($l[0] eq "K") {
	FxT::InsertFKT($l[1], $l[2], $l[3], \@l);
    } else {
	FxT::InsertFUT($l[1], $l[3], \@l);
    }
}

sub input_test {
    insert("U 00	0 T01		fut_setup	0x7fffffff, 0, 2097152");
    insert("K 10	2 1181	unknown	switch_to	_K1_");
    insert("K 20	0 0	idle	switch_to	457");
    insert("K 30	1 460	klogd	switch_to	-1");
    insert("K 40	2 _K1_	traces	fkt_keychange	0x100000 0x24169980");
    insert("U 50	0 T01		fut_new_lwp	T01 0");
    insert("K 60	0 457	syslogd	switch_to	0");
    insert("K 70	2 _K1_	traces	user_fork	T01 0");
    insert("U 80	2 T01		fut_thread_birth T02");
    insert("U 85	2 T01		fut_thread_birth T11");
    insert("U 85	2 T01		fut_thread_birth T12");
    insert("U 90	2 T01		fut_thread_birth T03");
    insert("U 95	2 T01		fut_thread_birth T13");
    insert("K 97    1 -1    traces  switch_to       _K2_");
    insert("K 99    1 _K2_	traces  user_fork       T13");
    insert("U 100   2 T01		fut_switch_to	T02");
    insert("U 110   2 T02		fut_switch_to	T03");
    insert("U 115   1 T13		fut_switch_to	T12");
    insert("U 120   2 T03		fut_switch_to	T01");
    insert("K 125   1 _K2_	traces  switch_to       TOTO");
    insert("U 130   2 T01		fut_switch_to	T02");
    insert("U 140   2 T02		fut_switch_to	T03");
    insert("U 150   2 T03		fut_switch_to	T01");
    insert("K 155   0 0     traces  switch_to       _K2_");
    insert("U 160   2 T01		fut_switch_to	T02");
    insert("U 170   2 T02		fut_switch_to	T03");
    insert("U 172   0 T13		event 		T13_a_encore_la_main");
    insert("U 175   0 T12		fut_switch_to	T11");
    insert("U 180   2 T03		fut_switch_to	T01");
    insert("K 190   2 _K1_	traces	switch_to	0");
}


sub main {
    my($test, $dump)=(0,0);
    our($pm2logs, $user_traces, $kernel_traces);
    GetOptions ("log=s"	=> \$pm2logs,
	    	"user=s" => \$user_traces,
		"kernel=s" => \$kernel_traces,
		"test"   =>  \$test,
		"debug"   =>  \$debug,
		"dump"   =>  \$dump);

    if ($user_traces || $kernel_traces) {
	disp("Using FKT/FUT Traces\n");
	input_from_fxt($user_traces, $kernel_traces);
    } elsif ($pm2logs) {
	disp("Using pm2logs\n");
	input_from_marcel_debug($pm2logs);
    } elsif ($test) {
	input_test();
    } else {
	usage();
	return 1;
    }

    Processor->FlushSW;
    LWP->FlushSW;
    Processor->CreateEntities;
    LWP->CreateEntities;
    Thread->CreateEntities;
    SuperTrace::Sort;

    if ($dump) {
	SuperTrace::Dump;
	  return;
      }
    #display_events();

    Paje::Entete();

    Paje::Events();

    Paje::End();

    #display_events();

}
 

main();
