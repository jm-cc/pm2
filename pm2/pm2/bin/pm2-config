#!/bin/sh
#
#                      PM2 HIGH-PERF/ISOMALLOC
#           High Performance Parallel Multithreaded Machine
#                           version 3.0
#
#     Gabriel Antoniu, Olivier Aumage, Luc Bouge, Vincent Danjean,
#       Christian Perez, Jean-Francois Mehaut, Raymond Namyst
#
#            Laboratoire de l'Informatique du Parallelisme
#                        UMR 5668 CNRS-INRIA
#                 Ecole Normale Superieure de Lyon
#
#                      External Contributors:
#                 Yves Denneulin (LMC - Grenoble),
#                 Benoit Planquelle (LIFL - Lille)
#
#                    1998 All Rights Reserved
#
#
#                             NOTICE
#
# Permission to use, copy, modify, and distribute this software and
# its documentation for any purpose and without fee is hereby granted
# provided that the above copyright notice appear in all copies and
# that both the copyright notice and this permission notice appear in
# supporting documentation.
#
# Neither the institutions (Ecole Normale Superieure de Lyon,
# Laboratoire de L'informatique du Parallelisme, Universite des
# Sciences et Technologies de Lille, Laboratoire d'Informatique
# Fondamentale de Lille), nor the Authors make any representations
# about the suitability of this software for any purpose. This
# software is provided ``as is'' without express or implied warranty.
#

PM2_CONFIG=${PM2_ROOT}/flavors
PM2_SYS=`${PM2_ROOT}/bin/pm2_sys`
PM2_ARCH=`${PM2_ROOT}/bin/pm2_arch`

ARGV="$@"

##########################################################################
# aide
usage()
{
    exit_code=$1

    cat <<EOF
Usage: pm2-config [--flavor=name] [OPTION]... [LIBRARY]...

Generic options
  --version	output pm2 version information.
  --modversion  output the module version information.
  --help	display this help and exit.

Compilation support options
  --cflags	print pre-processor and compiler flags
  --libs	print library linking information
  --libs-only-L	only print the -L/-R part of --libs
  --libs-only-l only print the -l part of --libs
  --kernel      print flags to compile the libs themselves

Directories pm2-libs was configured to
  --libdir --objdir --dependdir --asmdir --stampdir --builddir --includedir

Extension used was configured to
  --ext

Communication libraries was configured to
  --protocols

Included modules was configured to
  --modules

C Compiler was configured to
  --cc

Known values for LIBRARY are:

    pm2
    madeleine
    mad
    mad1
    mad2
    marcel
    dsm

EOF
    if [ $exit_code != 0 ]; then
	echo "error in pm2-config $ARGV" 1>&2
    fi
    exit $exit_code
}

##########################################################################
# fonctions annexes
. ${PM2_ROOT}/bin/pm2_mad2config
. ${PM2_ROOT}/bin/pm2_mad1config

get_lib_dir() # library
{
    echo $PM2_ROOT/$1/build/${PM2_BUILD:+$PM2_BUILD/}lib
}

get_include_dir() # library
{
    echo $PM2_ROOT/$1/build${PM2_BUILD:+/$PM2_BUILD}/include${PM2_EXT}
}

get_lib_name() # library
{
    case $1 in
    mad1|mad2)
	echo mad
	;;
    *)
	echo $1
	;;
    esac
}

##########################################################################
# traitement des options

if test $# -eq 0; then
    usage 1
fi

cflags=false
libs_L=false
libs_l=false
#modversion=false
flavor=
libs=
libdir=false
includedir=false
objdir=false
depdir=false
asmdir=false
stampdir=false
builddir=false
dirtoshow=
libs_add_mad=false
kernel=false
other=false

while test $# -gt 0; do
    case "$1" in
    -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
    *) optarg= ;;
    esac

    case $1 in
    --version)
	echo pm2-libs 3.0
	exit 0
	;;
    --help)
	usage 0
	;;
    --kernel)
	kernel=true
	;;
    --*dir)
	dirname1=`echo $1 | sed -e 's,^--,,' -e 's,dir$,,'`
	dirname=`eval echo '$'${dirname1}dir`
	test -z "$dirname" && exit 1
	eval ${dirname}dir=true
	dirtoshow="$dirname1"
	;;
    --ext|--protocols|--modules|--cc)
	other=$1
	;;
    --help)
	usage 0
	;;
    --cflags)
       	cflags=true
       	;;
    --libs)
       	libs_L=true
	libs_l=true
       	;;
    --libs-only-L)
	libs_L=true
	;;
    --libs-only-l)
	libs_l=true
	;;
#    --modversion)
#        modversion=true
#	;;
    --flavor=*)
	flavor=$optarg
	;;
    --*)
	echo Unknown option \`$1\' 1>&2
	usage 1
	;;
    pm2|marcel|mad1|mad2|dsm|tbx|ntbx)
	libs="$libs $1"
	;;
    madeleine|mad)
	libs_add_mad=true;
	;;
    *)
        error=true
	if $error; then
	    echo Unknown library \`$1\' 1>&2
	fi
	;;
    esac
    shift
done

##########################################################################
# corrections et valeurs par défaut
if [ -z "$flavor" ]; then
    flavor=default
fi

if [ ! -f $PM2_CONFIG/$flavor ]; then
    echo "Flavor $flavor do not exists yet. Create it before." 1>&2
    exit 1
fi

. $PM2_CONFIG/$flavor

if [ $libs_add_mad = true ]; then
    for lib in $PM2_LIBS; do
	case $lib in
	mad*)
	    libs="${libs:+$libs }$lib"
	    ;;
	esac
    done
fi

if [ -z "$libs" ]; then
    libs="$PM2_LIBS"
fi

if [ "$other" != false ]; then
    dirtoshow=$other
fi

##########################################################################
# on a demandé des repertoires/réglages...
if [ ! -z "${dirtoshow}" ]; then
    case $dirtoshow in
    --ext)
	echo $PM2_EXT
	exit 0
	;;
    --protocols)
	echo $PM2_PROTOCOLS
	exit 0
	;;
    --modules)
	case " $PM2_LIBS " in
	*\ dsm\ *)
	    echo dsm `echo $PM2_LIBS | sed -e 's,dsm,,'`
	    ;;
	*)
	    echo $PM2_LIBS
	    ;;
	esac
	exit 0
	;;
    --cc)
	echo ${PM2_CC:-gcc}
	exit 0
	;;
    build)
	echo $PM2_BUILD
	exit 0
	;;
    stamp)
	echo $PM2_ROOT/stamp${PM2_BUILD:+/$PM2_BUILD}
	exit 0
	;;
    esac
    if [ `echo "$libs" | wc -w` != 1 ]; then
	usage 1
    fi
    echo build/${PM2_BUILD:+$PM2_BUILD/}$dirtoshow
    exit 0
fi

##########################################################################
# traitement de la configuration de Madeleine
case " $PM2_LIBS " in
*\ mad1\ *)
    config_mad1
    ;;
*\ mad2\ *)
    config_mad2
    ;;
esac

##########################################################################
# CFLAGS et LDFLAGS...
the_flags="-D${PM2_ARCH} -D${PM2_SYS} $PM2_COMMON_CFLAGS_KERNEL $PM2_COMMON_LIBS"

# CFLAGS : on prend tous les cflags
for lib in $PM2_LIBS; do
    LIB=`echo $lib | tr [a-z] [A-Z]`
    the_flags="$the_flags `eval echo '$'PM2_${LIB}_CFLAGS` -D${LIB}"
    if [ -d $PM2_ROOT/$lib/include ]; then
	the_flags="$the_flags -I$PM2_ROOT/$lib/include"
    fi
    if [ "$lib" = ntbx ]; then
	the_flags="$the_flags -DNTBX_TCP"
    fi
    if [ "$lib" = dsm ]; then
	the_flags="$the_flags -I`get_include_dir $lib`"
    fi
done

# LDFLAGS : on ne prend que les lib demandées (toutes si aucune spécifiée)
for lib in $libs; do
    case $lib in
    marcel|mad1|mad2|pm2|dsm|tbx|ntbx)
	the_libs="$the_libs -L`get_lib_dir $lib`"
	the_libs="$the_libs -l`get_lib_name $lib`$PM2_EXT"
	;;
    esac
    LIB=`echo $lib | tr [a-z] [A-Z]`
    the_libs="$the_libs `eval echo '$'PM2_${LIB}_LIBS`"
    # CFLAGS spécifique à la compilation d'une lib
    if [ "$kernel" = true ]; then
	the_flags="$the_flags `eval echo '$'PM2_${LIB}_CFLAGS_KERNEL` -D${LIB}_KERNEL"
    fi
done

if $cflags; then
    all_flags="$the_flags"
fi

if $libs_L || $libs_l; then
    all_flags="$all_flags $the_libs"
fi

if test -z "$all_flags" || test "x$all_flags" = "x "; then
    exit 1
fi

# Straight out any possible duplicates, but be careful to
# get `-lfoo -lbar -lbaz' for `-lfoo -lbaz -lbar -lbaz'
other_flags=
lib_L_flags=
rev_libs=
for i in $all_flags; do
    case "$i" in
    # a library, save it for later, in reverse order
    -l*) rev_libs="$i $rev_libs" ;;
    -L*|-R*)
	if $libs_L; then
	    case " $lib_L_flags " in
	    *\ $i\ *) ;;			# already there
	    *) lib_L_flags="$lib_L_flags $i" ;;	# add it to output
	    esac 
	fi;;
    *)
	case " $other_flags " in
	*\ $i\ *) ;;				# already there
	*) other_flags="$other_flags $i" ;;	# add it to output
        esac ;;
    esac
done

ord_libs=
if $libs_l; then
    for i in $rev_libs; do
	case " $ord_libs " in
	*\ $i\ *) ;;			# already there
	*) ord_libs="$i $ord_libs" ;;	# add it to output in reverse order
	esac
    done
fi

echo $other_flags $lib_L_flags $ord_libs

exit 0
