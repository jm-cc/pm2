#! /bin/sh
progname=
np=1
cmdLineArgs=""
just_testing=0
machineFile=
debugger=""
Show=eval

PrintHelp() {
    cat <<EOF
mpirun [mpirun_options...] <progname> [options...]

  mpirun_options:
    -h      This help
    -machinefile <machine-file name>
            Take the list of possible machines to run on from the
            file <machine-file name>.  This is a list of all available
            machines; use -np <np> to request a specific number of machines.
    -machinedir <directory>
            Look for the machine files in the indicated directory
    -np <np>
            specify the number of processors to run on
    -t      Testing - do not actually run, just print what would be
            executed
    -v      Verbose - throw in some comments
    -dbg    Start processes under the gdb debugger.
    -valgrind
            Start processes under valgrind.
    -log
            Log output into files
On exit, mpirun returns a status of zero unless mpirun detected a problem, in
which case it returns a non-zero status (currently, all are one, but this 
may change in the future).

Environment variables:
   - MPI_NMAD_PROTOCOL specifies the network protocol to use. By
     default, the first network protocol available for the machines is
     selected.
   - MPI_HOST_FILE specifies a file containing a list of possible
     machines to run on.
   - MPI_NET_FILE specifies a configuration network file. By default,
     the file \${PM2_ROOT}/nmad/examples/mpi/networks.cfg is used.
   - LEONIE_ARGS specify arguments for leonie, the bootstrap code used
     by Mad-MPI.
   - MPI_NMAD_X allows to start each processus in a graphical console.

EOF
}

while [ 1 -le $# ] ; do
  arg=$1
  shift
  case $arg in 
    -np|--np)
        # Accept gnuish -- form for multicharater opts
	np="$1"
        nodigits=`echo $np | sed 's/^[0-9]*$//'`
        if [ "$nodigits" != "" -o $np -lt 1 ] ; then
           echo np: $np is an invalid number of processors.  Exiting.
           exit 1
	fi
        NP=$np
	export NP
	shift
	;;
    -machinefile)
        machineFile="$1"
	shift
	;;
    -machinedir)
        machineDir="$1"
	shift
	;;
    -h)
        PrintHelp
      	exit 1
	;;
    -v)
       	mpirun_verbose=1
	;;
    -t|-show)
      	just_testing=1
	Show=echo
	;;
    -dbg | -dbg=* | --dbg=*)
        debugger="yes"
	;;
    -valgrind)
	valgrind="yes"
        ;;
    -log)
	log="yes"
        ;;
    -usage|--usage|-help|--help|-\?)
      	# Accept these for help until the program name is provided.
      	if [ "$progname" = "" ] ; then
            if [ "$hasprinthelp" = "1" ] ; then
                PrintHelp
            fi
            exit 1
      	fi
	;;
    *)
	# The first unrecognized argument is assumed to be the name of
      	# the program
        progname="$arg"
        # any following unrecognized arguments are assumed to be arguments
        # to be passed to the program, as well as all future args
        while [ 1 -le $# ] ; do
            arg="$1"
            case $arg in 
                *\'*) 
                cmdLineArgs="$cmdLineArgs \"$arg\""
                ;;
                *\"*)
                cmdLineArgs="$cmdLineArgs '$arg'"
                ;;
                *)
                cmdLineArgs="$cmdLineArgs \"$arg\""
                ;;
            esac
            shift
        done
        ;;
  esac
done

