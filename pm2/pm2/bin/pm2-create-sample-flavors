#!/bin/sh

# PM2: Parallel Multithreaded Machine
# Copyright (C) 2001 "the PM2 team" (see AUTHORS file)
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

registering_flavors() {
#########################################################
# START OF LIST OF SAMPLE FLAVORS
#########################################################

    COMMON_OPTIONS="--all=opt --all=build_static --common=static"

    register_flavor default \
	--modules="pm2 dsm marcel mad3 tbx ntbx init" $COMMON_OPTIONS \
	--marcel=mono --marcel=smp_shared_queue --marcel=marcel_main \
	--mad3=tcp

    for i in mono smp act actsmp; do
	register_flavor marcel-$i \
	    --modules="marcel tbx init" $COMMON_OPTIONS \
	    --marcel=$i --marcel=smp_shared_queue --marcel=marcel_main \
	    --marcel=smp_bind_proc
    done

    register_flavor marcel \
	--modules="marcel tbx init" $COMMON_OPTIONS \
	--marcel=mono --marcel=smp_shared_queue --marcel=marcel_main

    register_flavor marcel-prof \
	--modules="marcel profile tbx init" $COMMON_OPTIONS \
	--marcel=mono --marcel=smp_shared_queue --marcel=marcel_main \
	--marcel=profile

    register_flavor leonie \
	--modules="leonie leoparse tbx ntbx init" --all=debug --all=gdb $COMMON_OPTIONS

    register_flavor leoparse \
	--modules="leoparse tbx ntbx init" $COMMON_OPTIONS

    register_flavor mad2 \
	--modules="mad2 tbx ntbx init" $COMMON_OPTIONS \
	--mad2=auto_spawn --mad2=tcp

    register_flavor mad3 \
	--modules="mad3 marcel tbx ntbx init" $COMMON_OPTIONS \
	--mad3=tcp --marcel=mono --marcel=smp_shared_queue --marcel=marcel_main

    register_flavor pm2 \
	--modules="pm2 dsm marcel mad3 tbx ntbx init" $COMMON_OPTIONS \
	--marcel=mono --marcel=smp_shared_queue --marcel=marcel_main \
	--mad3=tcp

    register_flavor mad4 \
	--modules="mad4 marcel tbx ntbx init" $COMMON_OPTIONS \
	--mad4=tcp --marcel=mono --marcel=smp_shared_queue --marcel=marcel_main

    register_flavor ezflavor \
	--modules="ezflavor" $COMMON_OPTIONS \
	--ezflavor=gtk2

    register_flavor libpthread \
	--modules="marcel tbx init stackalign" --all=opt --all=build_dynamic \
	--marcel=mono --marcel=smp_shared_queue --marcel=main_as_func \
	--marcel=posix --marcel=pthread --common=link_pm2_shared

    register_flavor sigmund \
	--modules="sigmundlib sigmund sigmundps xsigmund supertrace" \
	--all=build_dynamic

#########################################################
# END OF LIST OF SAMPLE FLAVORS
#########################################################
}

disp() {
    $PRINT "$@"
}

usage() {
    echo "Usage: `basename $0` [-f|--force] [-h|--help] [-v|--verbose] [-l|--list] [flavors...]"
}

erreur() {
    echo "ERROR: ""$@"
}

FORCE=no
LIST_FLAVORS=""
PRINT=":"
SHOW_LIST=no

while [ $# != 0 ]; do
    case "$1" in
    -f|--force)
	FORCE=yes;;
    -h|--help)
        usage
	exit 0;;
    -v|--verbose)
        PRINT=echo;;
    -l|--list)
	SHOW_LIST=yes;;
    -*)
    	erreur "Unknown option $1"
	usage
	exit 1;;
    *)
        LIST_FLAVORS="$LIST_FLAVORS $1";;
    esac
    shift
done

register_flavor() {
  name="$1"
  shift
  disp "registering $name"
  REGISTERED_FLAVORS="$REGISTERED_FLAVORS $name"
  name=`echo $name | sed -e 's/-/_/g'`
  i=0;
  while [ $# != 0 ]; do
      eval REGISTERED_FLAVOR_${name}_$i='"$1"'
      i=`expr $i + 1`
      shift
  done
  eval REGISTERED_FLAVOR_${name}_number=$i
}

create_flavor() {
    name="$1"
    shift

    case " $REGISTERED_FLAVORS " in
        *" $name "*)
	    SAMPLE_FLAVOR=yes;;
	*)
	    SAMPLE_FLAVOR=no;;
    esac
    case " $($PM2_CREATE_FLAVOR list) " in
        *" $name "*)
	    SAMPLE_FLAVOR_EXIST=yes;;
	*)
	    SAMPLE_FLAVOR_EXIST=no;;
    esac

    if [ $SAMPLE_FLAVOR = yes \
         -a \( $FORCE = yes \
	       -o $SAMPLE_FLAVOR_EXIST = no \) ]; then
	# No existing flavor yet
	echo "Creating initial sample flavor $name..."

	regname=`echo $name | sed -e 's/-/_/g'`
	i=0
	eval max=\$REGISTERED_FLAVOR_${regname}_number
	set --
	while [ $i != $max ]; do
	    eval arg='"$REGISTERED_FLAVOR_'${regname}_$i'"'
	    set -- "$@" "$arg"
            i=`expr $i + 1`
	done

	$PM2_CREATE_FLAVOR ${CREATE_FLAGS} set --flavor="$name" "$@"
    else
        ${PM2_ROOT}/bin/pm2-clean --refresh "$name"
    fi
}

set -- --source-mode
. ${PM2_ROOT}/bin/pm2-flavor-file

PM2_CREATE_FLAVOR=${PM2_CREATE_FLAVOR:-${PM2_ROOT}/bin/pm2-flavor}
    
registering_flavors

if [ $SHOW_LIST = yes ]; then
    echo "$REGISTERED_FLAVORS"
    exit 0
fi

if [ -z "$LIST_FLAVORS" ]; then
    # All flavors (registered + exinsting)
    LIST_FLAVORS="$REGISTERED_FLAVORS"
    for flavor in `${PM2_ROOT}/bin/pm2-flavor list` ; do
	case " $LIST_FLAVORS " in
	    *" $flavor "*) ;;
	    *) LIST_FLAVORS="$LIST_FLAVORS $flavor" ;;
	esac
    done
fi

for flavor in $LIST_FLAVORS; do
    create_flavor $flavor
done


