#!/bin/sh

# PM2: Parallel Multithreaded Machine
# Copyright (C) 2006 "the PM2 team" (see AUTHORS file)
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

compile_leonie() {
    LEONIE_FLAVOR=$(pm2-flavor get --flavor=leonie 2>/dev/null)
    if [ -z "$LEONIE_FLAVOR" ] ; then
        pm2-create-sample-flavors leonie
    fi
    LEONIE_DIR=$(pm2-config --flavor=leonie --bindir leonie 2>/dev/null)
    if [ ! -x "$LEONIE_DIR"/leonie ] ; then
        echo "Bootstrap layer not available. Compiling ..."
        make FLAVOR=leonie -C $PM2_ROOT/modules/leonie 1>/tmp/leonie_${USER}_$$ 2>&1
        LEONIE_DIR=$(pm2-config --flavor=leonie --bindir leonie 2>/dev/null)
        if [ ! -x "$LEONIE_DIR"/leonie ] ; then
            echo "Could not compile leonie. Aborting. See file /tmp/leonie_${USER}_$$ for details."
            exit 1
        fi
    fi
}

create_temp_file() { #prefix suffix directory
    temp_file=""
    if [ -x /bin/tempfile ] ; then
	temp_file="$(/bin/tempfile -p $1 -s $2 -d $3)" 
    elif [ -x /bin/mktemp ] ; then                  
	temp_file="$(/bin/mktemp ${1}${2}.XXXXXX)" 
    elif [ -d /tmp ] ; then
	temp_file="/tmp/${1}${2}.$$"
    else
	temp_file="${1}${2}.$$"
    fi
    echo $temp_file
}

get_machines() {
    # Which machines are available
    if [ -n "$machineFile" ] ; then
	if [ -f "$machineFile" ] ; then
	    host_list=`cat $machineFile`
	else
	    echo "$0: Machine file '$machineFile' not available. Exiting..." 1>&2
	    exit 1
	fi
    elif [ -f "$OAR_NODEFILE" ] ; then
	host_list=`cat $OAR_NODEFILE | sort | uniq`
    elif [ -f "$MPI_HOST_FILE" ] ; then
	host_list=`cat $MPI_HOST_FILE`
    else
	echo "$0: Execution machines not specified (checked option -machinefile, OAR reservation, variable MPI_HOST_FILE). Exiting..." 1>&2
	exit 1
    fi

    # how many machines do you want?
    nb_machines=`echo $host_list | wc -w`
    if [ $NP -lt $nb_machines ] ; then
	host_list2=`echo $host_list | tr ' ' '\012' | head -$NP`
    elif [ $NP -gt $nb_machines ] ; then
	host_list_tmp=$host_list
	x=$nb_machines
	while [ $x -lt $NP ] ; do
	    x=`expr $x + $nb_machines`
	    host_list_tmp=`echo $host_list_tmp $host_list`
	done
	host_list_tmp2=`echo $host_list_tmp | tr ' ' '\012' | head -$NP`
	host_list2=`echo $host_list_tmp2 | tr ' ' '\012' | sort`
    else
	host_list2=$host_list
    fi
    host_list3=`echo $host_list2 | tr '\012' ' '`

    # Which protocols are available
    if [ -n "$MPI_NMAD_PROTOCOL" ] ; then
        protocols="$MPI_NMAD_PROTOCOL"
    else
        protocols=`${PM2_ROOT}/bin/pm2-config --flavor=$PM2_FLAVOR --protocols`
    fi

    for net in `echo $protocols` ; do
	network_name=`${PM2_ROOT}/bin/leo-network.pl $NET_FILE $net $host_list2`
	if [ "$network_name" != "Network not found" ] ; then
	    break
	fi
    done
    if [ "$network_name" = "Network not found" ] ; then
	echo "$0: Cannot find a network for protocols '$protocols' and for hosts '$host_list3' in network configuration file '$NET_FILE', exiting..." 1>&2
	exit 1
    fi

    nb_protocols=$(echo $protocols | wc -w)
    if [ "$nb_protocols" != 1 ] ; then
        echo "Warning!!!"
        echo "....Several available protocols: $protocols"
        echo "....Selected protocol: $net"
        echo "....Use the environment variable MPI_NMAD_PROTOCOL to change the selection."
    fi

    # Create driver configuration file
    $PM2_ROOT/bin/nmad-driver-conf -f --$net

    # construct the machine list
    new_list=""
    for i in $host_list2 ; do
	[ -z "$new_list" ] && new_list="${i}[0]" && continue
	k='0'
	for j in $new_list ; do
	    [ $j != "${i}[${k}]" ] && continue
	    k=`expr $k + 1`
	done

	new_list="$new_list ${i}[${k}]"
    done
    machines=`echo $new_list|tr ' ' ','`
}

# Main program

if [ -z "$PM2_ROOT" ] ; then
    echo "You need to set the environment variable PM2_ROOT"
    exit 1
fi

if [ -z "$PM2_FLAVOR" ] ; then
    if [ "$1" != "-flavor" ] ; then
	echo "Error. You need to set the variable PM2_FLAVOR to specify the pm2 flavor to use"
	exit 1
    else
	shift
	PM2_FLAVOR=$1
	shift
    fi
fi

dir=$(dirname $0)
link=$(readlink $0)
if [ -n "$link" ] ; then
    dir=$(echo $dir"/"$(dirname $link))
fi
. $dir/mpirun.args
# We need at least the program name
if [ -z "$progname" ] ; then
    echo "You need to specify an application to run" 1>&2
    exit 1
fi
pm2_appli=$(pm2-which -f $PM2_FLAVOR $progname 2>/dev/null)
if [ -z "$pm2_appli" ] ; then
    echo "$progname not found in current directory or in PM2 directory"
    exit 1
fi
nb_applis=$(echo "$pm2_appli" | wc -w | tr -d ' ')
if [ "$nb_applis" != 1 ] ; then
    echo "$progname found in different locations ($pm2_appli)"
    exit 1
fi

if [ -z "$NP" ] ; then
    echo "Must specify the number of processes using the option -np"
    exit 1
fi

if [ -n "$MPI_NET_FILE" ] ; then
    NET_FILE="$MPI_NET_FILE"
else
    NET_FILE="${PM2_ROOT}/nmad/examples/mpi/networks.cfg"
fi

if [ ! -r "$NET_FILE" ] ; then
    echo "Unable to load Network Description File '$NET_FILE'" 1>&2
    echo "Please, set MPI_NET_FILE" 1>&2
    exit 1
fi

if [ "$MPI_NMAD_STRATEGY" = "" ] ; then
    STRAT_DIR=${PM2_CONF_DIR:-${PM2_HOME:-${HOME}}/.pm2}/strategy
    if [ ! -f $STRAT_DIR/default_strategy.xml ] && [ ! -f $STRAT_DIR/custom_strategy.xml ] ; then
        $PM2_ROOT/bin/nmad-strategy-conf --default
    fi
else
    $PM2_ROOT/bin/nmad-strategy-conf --$MPI_NMAD_STRATEGY
fi

# Detect which version of OAR is used
LEONIE_ENV=""
if [ -f "$OAR_NODEFILE" ] ; then
    oarsh=`which oarsh 2>/dev/null`
    if [ -n "$oarsh" ] ; then
        LEONIE_ENV="LEO_RSH=oarsh"
    fi
fi

get_machines
appli_file=`create_temp_file .mad .appli .`
trap 'rm -f "${appli_file}"' 0 INT QUIT
touch "${appli_file}"

if [ $? -ne 0 ] ; then
  echo "$0: Cannot create temp $appli_file file, exiting..." 1>&2
  exit 1
fi

(cat <<EOF
application : {
     name     : "$pm2_appli";
     flavor   : $PM2_FLAVOR;
     networks : {
          include  : $NET_FILE;
          channels : ({
               name  : pm2;
               net   : $network_name;
               hosts : ($machines);
          });
     };
};
EOF
) > $appli_file

PM2_LD_LIBRARY_PATH=$(pm2-config --flavor=$PM2_FLAVOR --ld-library-path)
if [ "$OMP_NUM_THREADS" == "" ] ; then
    env="--env=\"LD_LIBRARY_PATH=${PM2_LD_LIBRARY_PATH}${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\""
else
    env="--env=\"LD_LIBRARY_PATH=${PM2_LD_LIBRARY_PATH}${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}} OMP_NUM_THREADS=$OMP_NUM_THREADS\""
fi

compile_leonie
leonie="$LEONIE_ENV leonie"

if [ -n "$debugger" ] ; then
    $Show $leonie --wd=$PWD $env -d  $LEONIE_ARGS $appli_file $cmdLineArgs
elif [ -n "$valgrind" ] ; then
    if [ -n "$log" ] ; then
        $Show $leonie --wd=$PWD $env -vg -l $LEONIE_ARGS $appli_file $cmdLineArgs
    else
        $Show $leonie --wd=$PWD $env -vg $LEONIE_ARGS $appli_file $cmdLineArgs
    fi
elif [ -n "$MPI_NMAD_X" ] ; then
    $Show $leonie --wd=$PWD $env $LEONIE_ARGS $appli_file $cmdLineArgs
else
    if [ -n "$log" ] ; then
        $Show $leonie --wd=$PWD $env -l $LEONIE_ARGS $appli_file $cmdLineArgs
    else
        $Show $leonie --wd=$PWD $env --x --p $LEONIE_ARGS $appli_file $cmdLineArgs
    fi
fi

exit 0
