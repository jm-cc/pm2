set $marcel_saved=0

define save-ctx
  if $marcel_saved==1
    printf "already saved ctx\n"
  else
    __save-ctx
    set $marcel_saved=1
  end
end
document save-ctx
Saves the current marcel context
Use rest-ctx to restore it
end

define set-ctx
  if $marcel_saved==0
    save-ctx
  end
  printf "switching to $arg0(%p)\n", $arg0
  __set-ctx $arg0
end
document set-ctx
Switch to another marcel thread's context
end

define rest-ctx
  if $marcel_saved==0
    echo no context saved !\n
  else
    __rest-ctx
  end
end
document rest-ctx
Restores a previously-saved marcel context,
so as to be able to continue execution
end

define marcel-continue
  handle SIGALRM pass
  handle SIGVTALRM pass
  if $marcel_saved==1
    __rest-ctx
    echo go\n
  end
end

define marcel-step
  handle SIGALRM nopass
  handle SIGVTALRM nopass
  if $marcel_saved==1
    __rest-ctx
    echo go\n
  end
end

define hook-stop
  marcel-step
end

define hook-run
  marcel-continue
end
define hook-continue
  marcel-continue
end

define hook-step
  marcel-step
end
define hook-stepi
  marcel-step
end
define hook-next
  marcel-step
end
define hook-nexti
  marcel-step
end

define hook-finish
  marcel-continue
end
define hook-until
  marcel-continue
end
define hook-advance
  marcel-continue
end
