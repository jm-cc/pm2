diff -aruN conformance.old/interfaces/pthread_equal/2-1.c conformance/interfaces/pthread_equal/2-1.c
--- conformance.old/interfaces/pthread_equal/2-1.c	2010-10-11 15:12:06.000000000 +0200
+++ conformance/interfaces/pthread_equal/2-1.c	2010-10-11 15:18:01.000000000 +0200
@@ -89,6 +89,8 @@
 #endif
 
 sigset_t usersigs;
+pthread_t th_sig1, th_sig2;
+pthread_barrier_t barrier;
 
 typedef struct 
 {
@@ -111,6 +113,8 @@
 	ret = pthread_sigmask(SIG_BLOCK, &usersigs, NULL);
 	if (ret != 0)  {  UNRESOLVED(ret, "Unable to block SIGUSR1 and SIGUSR2 in signal thread");  }
 
+	pthread_barrier_wait(&barrier);
+
 	while (do_it)
 	{
 		#ifdef WITH_SYNCHRO
@@ -155,6 +159,7 @@
 	ret = pthread_sigmask(SIG_UNBLOCK, &usersigs, NULL);
 	if (ret != 0)  {  UNRESOLVED(ret, "Unable to unblock SIGUSR1 and SIGUSR2 in worker thread");  }
 
+	pthread_barrier_wait(&barrier);
 	
 	while (do_it)
 	{
@@ -166,7 +171,16 @@
 		ret = pthread_equal(me, me);
 		if (ret == 0)  {  UNRESOLVED(ret, "pthread_equal returned a bad result");  }
 		if (ret == EINTR)  {  FAILED("pthread_equal returned EINTR status");  }
+
+		sched_yield();
 	}
+
+	if ((ret = pthread_join(th_sig1, NULL)))
+	{ UNRESOLVED(ret, "Signal 1 sender thread join failed"); }
+
+	if ((ret = pthread_join(th_sig2, NULL)))
+	{ UNRESOLVED(ret, "Signal 2 sender thread join failed"); }
+
 	return NULL;
 }
 
@@ -174,7 +188,7 @@
 int main (int argc, char * argv[])
 {
 	int ret;
-	pthread_t th_work, th_sig1, th_sig2, me;
+	pthread_t th_work, me;
 	thestruct arg1, arg2;
 	struct sigaction sa;
 	
@@ -201,6 +215,8 @@
 	ret = pthread_sigmask(SIG_BLOCK, &usersigs, NULL);
 	if (ret != 0)  {  UNRESOLVED(ret, "Unable to block SIGUSR1 and SIGUSR2 in main thread");  }
 
+	pthread_barrier_init(&barrier, NULL, 4);
+
 	#ifdef WITH_SYNCHRO
 	if (sem_init(&semsig1, 0, 1))
 	{ UNRESOLVED(errno, "Semsig1  init"); }
@@ -227,7 +243,7 @@
 	if ((ret = pthread_create(&th_sig2, NULL, sendsig, (void *)&arg2)))
 	{ UNRESOLVED(ret, "Signal 2 sender thread creation failed"); }
 
-
+	pthread_barrier_wait(&barrier);
 
 	/* Let's wait for a while now */
 	sleep(1);
@@ -236,14 +252,6 @@
 	/* Now stop the threads and join them */
 	do { do_it=0; }
 	while (do_it);
-
-	
-	if ((ret = pthread_join(th_sig1, NULL)))
-	{ UNRESOLVED(ret, "Signal 1 sender thread join failed"); }
-
-	if ((ret = pthread_join(th_sig2, NULL)))
-	{ UNRESOLVED(ret, "Signal 2 sender thread join failed"); }
-
 	
 	if ((ret = pthread_join(th_work, NULL)))
 	{ UNRESOLVED(ret, "Worker thread join failed"); }
