#! @BASH@
# -*- mode: Sh;-*-

export LC_ALL=C

out=pdf

usage() {
    echo "# usage: ${0} [--pdf|--png|--svg|--canvas] <file>" >&2
    }

while [ "x${1}" != "x" ]; do
    case "$1" in
	--pdf)
	    out=pdf
	    ;;
	--png)
	    out=png
	    ;;
	--svg)
	    out=svg
	    ;;
	--canvas)
	    out=canvas
	    ;;
	-h|--help)
	    usage
	    exit
	    ;;
	-*)
	    usage
	    exit 1
	    ;;
	*)
	    file="$1"
	    ;;
    esac
    shift
done
case "${out}" in
    png)
	export GNUPLOT_TERM="png  fontscale 1 size 800,600 font arial 12"
	export GNUPLOT_EXT=png
	;;
    pdf)
	export GNUPLOT_TERM="pdfcairo color fontscale 0.3"
	export GNUPLOT_EXT=pdf
	;;
    svg)
	export GNUPLOT_TERM="svg"
	export GNUPLOT_EXT=svg
	;;
    canvas)
	export GNUPLOT_TERM="canvas"
	export GNUPLOT_EXT=html
	;;
esac

if [ "x${file}" = "x" ]; then
    usage
    exit 1
fi
if [ ! -r "${file}" ]; then
    echo "# ${0}: cannot read file '${file}'." >&2
    usage
    exit 1
fi

outdir="${file}.d"
mkdir -p ${outdir}

bench_list=$( sed -e 's/# bench: \(mpi_bench_[a-zA-Z0-9_]*\) begin/\1/p;d' ${file} | tr '\n\r' ' ' )

echo
echo "# ## parsing file ${file}..."
echo 
echo "# ## bench list:"
echo "# ${bench_list}"
echo 

echo
echo "# ## generating normalized files..."
echo
for b in ${bench_list}; do
    echo "# processing bench: ${b}"
    outfile=${outdir}/${b}.dat
    echo "# This file is automatically generated from ${file} for ${b} in machine-readable format." > ${outfile}
    echo "# Generated on $( date ) on host $( hostname )" >> ${outfile}
    sed -r -f /dev/stdin ${file} >> ${outfile} <<EOF
/${b} begin/,/${b} end/ !d
s/^[ \t]*//g
s/\r//g;s/\t/ /g
/^#/!s/[ \t]+/\t/g
EOF
    echo "# ${b}: done."
    echo
done

echo
echo "# ## computing overlap ratio..."
echo

mpi_bench_extract_line() {
    b=$1
    s=$2
    benchfile=${outdir}/${b}.dat
    sed -e "/${b} begin/,/${b} end/ !d;/^#/ d;/^${s}\t/ !d" ${benchfile}
}

mpi_bench_extract_line_param() {
    b=$1
    s=$2
    p=$3
    benchfile=${outdir}/${b}.dat
    sed -e "/${b}\/${p} begin/,/${b}\/${p} end/ !d;/^#/ d;/^${s}\t/ !d" ${benchfile}
}

mpi_bench_extract_params() {
    b=$1
    benchfile=${outdir}/${b}.dat
    sed -e "s+^# bench: ${b}/\(.*\) begin+\1+p;d" ${benchfile} | tr '\n' ' '
}

mpi_bench_extract_sizes() {
    sed -e "/^#/ d" ${outdir}/mpi_bench_sendrecv.dat | cut -f 1 | tr '\n' ' '
}

size_list=$( mpi_bench_extract_sizes  )
echo "# sizes: ${size_list}"

for b in mpi_bench_overlap_sender \
	 mpi_bench_overlap_recv \
	 mpi_bench_overlap_bidir \
	 mpi_bench_overlap_sender_noncontig \
	 mpi_bench_overlap_Nload; do
    case ${b} in
	*noncontig*)
	    benchref=mpi_bench_noncontig
	    ;;
	*)
	    benchref=mpi_bench_sendrecv
	    ;;
    esac
    benchfile=${outdir}/${b}.dat
    echo "# file ${benchfile}"
    params=$( mpi_bench_extract_params ${b} )
    echo "# params list: ${params}"
    latref0=$( mpi_bench_extract_line ${benchref} 0 | cut -f 2 )
    echo "# generated from ${b}"                    > ${outdir}/${b}-ratio2d.dat
    echo "# size | comp.time | ratio | rtt | lat0" >> ${outdir}/${b}-ratio2d.dat
    for s in ${size_list}; do
	echo "# size: ${s}"
	latref=$( mpi_bench_extract_line ${benchref} ${s} | cut -f 2 )
	echo "# generated from ${b} for size=${s}" > ${outdir}/${b}-s${s}.dat
	echo "# reference latency: ${latref}"     >> ${outdir}/${b}-s${s}.dat
	echo "# comp.time | ratio | rtt."         >> ${outdir}/${b}-s${s}.dat
	for p in ${params}; do
	    rtt=$( mpi_bench_extract_line_param ${b} ${s} ${p} | cut -f 2 )
	    case ${b} in
		*Nload*)
		    ratio=$( bc << EOF
scale=2
lat=${rtt} - ${latref}
if( lat > 0 ) lat / ${latref} else 0
EOF
			 )
		    ;;
		*)
		    ratio=$( bc << EOF
scale=2
lat = ${rtt} - ${latref0}
if( ${p} < ${latref}) {
  if(${p} > 0 && lat > ${latref}) (( lat - ${latref} ) / ${p}) else 0
} else {
  if(lat > ${p}) (( lat - ${p} ) / ${latref}) else 0
}
EOF
			 )
		    ;;
	    esac
	    echo "${p} ${ratio} ${rtt}"                >> ${outdir}/${b}-s${s}.dat
	    echo "${s} ${p} ${ratio} ${rtt} ${latref}" >> ${outdir}/${b}-ratio2d.dat
	done
	echo  >> ${outdir}/${b}-ratio2d.dat
    done

    cat > ${outdir}/${b}.gp <<EOF
# -*- mode: Gnuplot;-*-
reset
cd "${outdir}"

set term ${GNUPLOT_TERM}
set output "${b}-lin.${GNUPLOT_EXT}"
set view map
set pm3d interpolate 0,0
set key bmargin box
set key off
set title "${file}"
set xlabel "Message size (bytes)"
set ylabel "Computation time (usec.)"
set cblabel "${b}"
set xrange [0:$( echo ${size_list} | tr ' ' '\n' | tail -1 )]
set yrange [0:$( mpi_bench_extract_params ${b} | tr ' ' '\n' | tail -1 )]
set cbrange [0:2]
splot \
  "${b}-ratio2d.dat" using 1:2:(\$3>2?2:\$3) title "${b}" with pm3d , \
  "${benchref}.dat" using 1:2:(2) title "Ref. latency" with linespoints lw 2

set xtics ( "1 KB" 1024, "8 KB" 8*1024, "64 KB" 64*1024, "512 KB" 512*1024, "4 MB" 4*1024*1024, "32 MB" 32*1024*1024 )
set xrange [2048:$( echo ${size_list} | tr ' ' '\n' | tail -1 )]
set yrange [20:$( mpi_bench_extract_params ${b} | tr ' ' '\n' | tail -1 )]
set cbrange [0:2]
set output "${b}-log.${GNUPLOT_EXT}"
set logscale x 2
set logscale y 10
replot
EOF
    echo
done

echo "# ## generating global plot..."

cat > ${outdir}/overlap.gp <<EOF
# -*- mode: Gnuplot;-*-
reset
cd "${outdir}"

set term ${GNUPLOT_TERM} 
set output "overlap-lin.${GNUPLOT_EXT}"

set multiplot layout 2,2 title "${file}"

set view map
set pm3d interpolate 0,0
set key off
set title "${file}"
set xlabel "Message size (bytes)"
set ylabel "Computation time (usec.)"
set cblabel "overlap overhead"

set xrange [0:$( echo ${size_list} | tr ' ' '\n' | tail -1 )]
set yrange [0:$( mpi_bench_extract_params mpi_bench_overlap_sender | tr ' ' '\n' | tail -1 )]
set cbrange [0:2]
do for [b in "mpi_bench_overlap_sender mpi_bench_overlap_recv mpi_bench_overlap_bidir mpi_bench_overlap_sender_noncontig"] {
  set title b
  splot b."-ratio2d.dat" using 1:2:(\$3>2?2:\$3) title b with pm3d 
}

unset multiplot
set output "overlap-log.${GNUPLOT_EXT}"
set multiplot layout 2,2 title "${file}"
set xtics ( "1 KB" 1024, "8 KB" 8*1024, "64 KB" 64*1024, "512 KB" 512*1024, "4 MB" 4*1024*1024, "32 MB" 32*1024*1024 )
set xrange [2048:$( echo ${size_list} | tr ' ' '\n' | tail -1 )]
set yrange [20:$( mpi_bench_extract_params mpi_bench_overlap_sender | tr ' ' '\n' | tail -1 )]
set cbrange [0:2]
set logscale x 2
set logscale y 10
do for [b in "mpi_bench_overlap_sender mpi_bench_overlap_recv mpi_bench_overlap_bidir mpi_bench_overlap_sender_noncontig"] {
  set title b
  splot b."-ratio2d.dat" using 1:2:(\$3>2?2:\$3) title b with pm3d 
}

unset multiplot
set output "overlap-Nload.${GNUPLOT_EXT}"
set title "mpi_bench_overlap_Nload"
unset logscale y
set ylabel "Threads number"
set yrange [0:$( mpi_bench_extract_params mpi_bench_overlap_Nload | tr ' ' '\n' | tail -1 )]
splot "mpi_bench_overlap_Nload-ratio2d.dat" using  1:2:(\$3>2?2:\$3) title "Nload" with pm3d 
EOF

if [ "x@GNUPLOT@" != "x" ]; then
    echo "# invoking gnuplot..."
    for f in  ${outdir}/*.gp; do
	echo "# tracing ${f}..."
	@GNUPLOT@ ${f}
    done
    echo "# done."
else
    echo "# gnuplot not detected"
fi
echo
