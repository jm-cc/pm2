
# -*-makefile-*-

# NewMadeleine
# Copyright (C) 2006 (see AUTHORS file)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# default settings section ====================================================


# gcc -O6 flag
CONFIG_OPT	:= no

# gcc -pg flag
CONFIG_PROFILE	:= no

# QSNET config
CONFIG_QSNET	:= no
QSNET_LIBS	:= elan

# MX config
CONFIG_MX	:= no
MX_INC_PATH	:= /opt/mx/include
MX_LD_PATH	:= /opt/mx/lib
MX_LIBS		:= myriexpress

# GM config
CONFIG_GM	:= no
GM_INC_PATH	:= /opt/gm/include
GM_LD_PATH	:= /opt/gm/lib
GM_LIBS		:= gm

# SiSCI config
CONFIG_SISCI	:= no
SISCI_INC_PATH	:= /opt/DIS/include
SISCI_LD_PATH	:= /opt/DIS/lib
SISCI_LIBS	:= sisci

# Disk config
CONFIG_DISK	:= no

# Dummy config
CONFIG_DUMMY	:= no
DUMMY_INC_PATH	:=
DUMMY_LD_PATH	:=
DUMMY_LIBS	:=

# Sched mini alt config
CONFIG_SCHED_MINI_ALT	:= no

# Sched null config
CONFIG_SCHED_NULL	:= no

# Sched opt config
CONFIG_SCHED_OPT	:= no

# Network sampling
CONFIG_NET_SAMPLING	:= no

# Verbosity of the building process
CONFIG_VERBOSE	:= no

# PM2 section
FLAVOR		:= tbx
PM2_CONFIG	:= "pm2-config"


# variable computing section ==================================================

## -= .doc. =-
#
# available module variables:
# NM_$(M)_PATH     ... module path
# NM_$(M)_INCPATH  ... additional include paths
# NM_$(M)_SRCPATH  ... additional source paths
# NM_$(M)_CPPFLAGS ... preprocessor flags
# NM_$(M)_CFLAGS   ... compiler flags
# NM_$(M)_LDFLAGS  ... linker flags
# NM_$(M)_ELIBS    ... external libs
# NM_$(M)_MODULES  ... required modules


## -= Core module =- ##

# Core
M := core
NM_$(M)_PATH		:= core
MODULES			:= core


## -= drivers =- ##

# TCP
M := drv_tcp
NM_$(M)_PATH		:= drivers/tcp
MODULES			+= $(M)

# QSNET section
M := drv_qsnet
NM_$(M)_PATH		:= drivers/qsnet
NM_$(M)_CPPFLAGS	:= -DCONFIG_QSNET
NM_$(M)_CFLAGS		:=
NM_$(M)_LDFLAGS		:=
NM_$(M)_ELIBS		:= $(foreach P,$(QSNET_LIBS),-l$(P))
ifeq ($(CONFIG_QSNET), y)
MODULES			+= $(M)
endif

# MX section
M := drv_mx
NM_$(M)_PATH		:= drivers/mx
NM_$(M)_CPPFLAGS	:= $(foreach P,$(MX_INC_PATH),-I$(P)) -DCONFIG_MX
NM_$(M)_CFLAGS		:=
NM_$(M)_LDFLAGS		:= $(foreach P,$(MX_LD_PATH),-L$(P))
NM_$(M)_ELIBS		:= $(foreach P,$(MX_LIBS),-l$(P))
ifeq ($(CONFIG_MX), y)
MODULES			+= $(M)
endif

# GM section
M := drv_gm
NM_$(M)_PATH		:= drivers/gm
NM_$(M)_CPPFLAGS	:= $(foreach P,$(GM_INC_PATH),-I$(P)) -DCONFIG_GM
NM_$(M)_CFLAGS		:=
NM_$(M)_LDFLAGS		:= $(foreach P,$(GM_LD_PATH),-L$(P))
NM_$(M)_ELIBS		:= $(foreach P,$(GM_LIBS),-l$(P))
ifeq ($(CONFIG_GM), y)
MODULES			+= $(M)
endif

# SISCI section
M := drv_sisci
NM_$(M)_PATH		:= drivers/sisci
NM_$(M)_CPPFLAGS	:= $(foreach P,$(SISCI_INC_PATH),-I$(P)) -DCONFIG_SISCI
NM_$(M)_CFLAGS		:=
NM_$(M)_LDFLAGS		:= $(foreach P,$(SISCI_LD_PATH),-L$(P))
NM_$(M)_ELIBS		:= $(foreach P,$(SISCI_LIBS),-l$(P))
ifeq ($(CONFIG_SISCI), y)
MODULES			+= $(M)
endif

# Disk driver section
M := drv_disk
NM_$(M)_PATH		:= drivers/disk
NM_$(M)_CPPFLAGS	:= $(foreach P,$(DISK_INC_PATH),-I$(P)) -DCONFIG_DISK
NM_$(M)_CFLAGS		:=
NM_$(M)_LDFLAGS		:= $(foreach P,$(DISK_LD_PATH),-L$(P))
NM_$(M)_ELIBS		:= $(foreach P,$(DISK_LIBS),-l$(P))
ifeq ($(CONFIG_DISK), y)
MODULES			+= $(M)
endif

# Dummy driver example section
M := drv_dummy
NM_$(M)_PATH		:= drivers/dummy
NM_$(M)_CPPFLAGS	:= $(foreach P,$(DUMMY_INC_PATH),-I$(P))) -DCONFIG_DUMMY
NM_$(M)_CFLAGS		:=
NM_$(M)_LDFLAGS		:= $(foreach P,$(DUMMY_LD_PATH),-L$(P))
NM_$(M)_ELIBS		:= $(foreach P,$(DUMMY_LIBS),-l$(P))
ifeq ($(CONFIG_DUMMY), y)
MODULES			+= $(M)
endif


## -= schedulers =- ##

# Sched_mini
M := sched_mini
NM_$(M)_PATH		:= schedulers/sched_mini
MODULES			+= $(M)

# Alternate mini scheduler
M := sched_mini_alt
NM_$(M)_PATH		:= schedulers/sched_mini_alt
NM_$(M)_CPPFLAGS	:= -DCONFIG_SCHED_MINI_ALT
ifeq ($(CONFIG_SCHED_MINI_ALT), y)
MODULES			+= $(M)
endif

# Null scheduler
M := sched_null
NM_$(M)_PATH		:= schedulers/sched_null
NM_$(M)_CPPFLAGS	:= -DCONFIG_SCHED_NULL
ifeq ($(CONFIG_SCHED_NULL), y)
MODULES			+= $(M)
endif

# Optimizing scheduler
M := sched_opt
NM_$(M)_PATH		:= schedulers/sched_opt
NM_$(M)_CPPFLAGS	:= -DCONFIG_SCHED_OPT
NM_$(M)_MODULES		:= proto_rdv
NM_$(M)_MODULES		+= net_sampling
ifeq ($(CONFIG_SCHED_OPT), y)
MODULES			+= $(M)
endif


# -= protocols =-

# Proto_basic
M := proto_basic
NM_$(M)_PATH		:= protocols/proto_basic
MODULES			+= $(M)

# Mad3 emulation protocol
M := proto_mad3
# Note: proto_mad3 depends on proto_basic for now
FLAVOR			:= ntbx	# mad3 core needs ntbx as well as tbx
NM_$(M)_PATH		:= protocols/proto_mad3
NM_$(M)_CPPFLAGS	:= -DCONFIG_PROTO_MAD3
NM_$(M)_MODULES		:= proto_basic
ifeq ($(CONFIG_PROTO_MAD3), y)
MODULES			+= $(M)
endif


# -= helper modules =-

# Network sampling code
M := net_sampling
NM_$(M)_PATH		:=
NM_$(M)_CPPFLAGS	:= -DCONFIG_NET_SAMPLING
ifeq ($(CONFIG_NET_SAMPLING), y)
MODULES			+= $(M)
endif


# -= compilation settings =-

# Compiler optimization flags
M := set_opt
NM_$(M)_CPPFLAGS	:= -DCONFIG_OPT
NM_$(M)_CFLAGS		:= -O6
ifeq ($(CONFIG_OPT), y)
MODULES			+= $(M)
endif

# Compiler profiling flags
M := set_gprof
NM_$(M)_CPPFLAGS	:= -DCONFIG_PROFILE
NM_$(M)_CFLAGS		:= -pg
NM_$(M)_LDFLAGS		:= -pg
ifeq ($(CONFIG_PROFILE), y)
MODULES			+= $(M)
endif

# Built-in logging macro activation
M := set_log
NM_$(M)_CPPFLAGS	:= -DCONFIG_LOG
ifeq ($(CONFIG_LOG), y)
MODULES			+= $(M)
endif

# Built-in tracing macro activation
M := set_trace
NM_$(M)_CPPFLAGS	:= -DCONFIG_TRACE
ifeq ($(CONFIG_TRACE), y)
MODULES			+= $(M)
endif


#====================================================================

EMODULES	:= $(MODULES) $(foreach M,$(MODULES),$(NM_$(M)_MODULES))

# auxiliary files
MOD_CPPFLAGS	:= $(foreach M,$(EMODULES),$(NM_$(M)_CPPFLAGS))
MOD_INCDIRS	:= $(foreach M,$(EMODULES),$(NM_$(M)_PATH)/include $(NM_$(M)_INCPATH))
MOD_SRCDIRS	:= $(foreach M,$(EMODULES),$(NM_$(M)_PATH)/src $(NM_$(M)_SRCPATH))
MOD_CFLAGS	:= $(foreach M,$(EMODULES),$(NM_$(M)_CFLAGS))
MOD_LDFLAGS	:= $(foreach M,$(EMODULES),$(NM_$(M)_LDFLAGS))
MOD_ELIBS	:= $(foreach M,$(EMODULES),$(NM_$(M)_ELIBS))
MOD_PATHS	:= $(foreach M,$(EMODULES),$(NM_$(M)_PATHS))

#====================================================================

# PM2 section
PM2_CFLAGS	:= $(shell $(PM2_CONFIG) --flavor=$(FLAVOR) --cflags)
PM2_LDFLAGS	:= $(shell $(PM2_CONFIG) --flavor=$(FLAVOR) --libs)
PM2_SYS		:= $(shell pm2_sys)

#====================================================================

# main section
CPPFLAGS	:= $(PM2_CFLAGS)
CPPFLAGS	+= $(MOD_CPPFLAGS)
CPPFLAGS	+= $(foreach D,$(MOD_INCDIRS),-I$(D))

CFLAGS		:= -g -Wall
CFLAGS		+= $(MOD_CFLAGS)

LDFLAGS		:= $(foreach M,$(EMODULES),-L$(NM_$(M)_PATH))
LDFLAGS		+= $(MOD_LDFLAGS)

ifeq ($(PM2_SYS), DARWIN_SYS)
LIBS		:= $(foreach M,$(EMODULES),-lnm$(M)) $(foreach M,$(EMODULES),-lnm$(M))
else
LIBS		:= -Xlinker --start-group $(foreach M,$(EMODULES),-lnm$(M)) -Xlinker --end-group
endif

LIBS		+= $(PM2_LDFLAGS)
LIBS		+= $(MOD_ELIBS)

LIBS_DEP	:= $(foreach M,$(EMODULES),$(NM_$(M)_PATH)/libnm$(M).a)

#====================================================================

.PHONY: all vars libs clean

# toplevel rule
# ----
all: libs

# variable display rule
# ----
vars:
	@echo -e MODULES          \\t$(MODULES)
	@echo -e EMODULES         \\t$(EMODULES)
	@echo
	@echo -e MOD_CPPFLAGS     \\t$(MOD_CPPFLAGS)
	@echo -e MOD_INCDIRS      \\t$(MOD_INCDIRS)
	@echo -e MOD_SRCDIRS      \\t$(MOD_SRCDIRS)
	@echo -e MOD_CFLAGS       \\t$(MOD_CFLAGS)
	@echo -e MOD_LDFLAGS      \\t$(MOD_LDFLAGS)
	@echo -e MOD_ELIBS        \\t$(MOD_ELIBS)
	@echo -e MOD_PATHS        \\t$(MOD_PATHS)
	@echo
	@echo -e PM2_CFLAGS       \\t$(PM2_CFLAGS)
	@echo -e PM2_LDFLAGS      \\t$(PM2_LDFLAGS)
	@echo -e PM2_SYS          \\t$(PM2_SYS)
	@echo
	@echo -e CPPFLAGS         \\t$(CPPFLAGS)
	@echo -e CFLAGS           \\t$(CFLAGS)
	@echo -e LDFLAGS          \\t$(LDFLAGS)
	@echo -e LIBS_FLAGS       \\t$(LIBS)
	@echo -e LIBS_DEP         \\t$(LIBS_DEP)

# main rule for building all selected libs
# ----
libs: $(foreach M,$(EMODULES),$(foreach D,$(NM_$(M)_PATH)/src $(NM_$(M)_SRCPATH),libnm$(M).a($(patsubst %.c,%.o,$(wildcard $(D)/*.c)))))


# library making rule
# ----
(%): %
	@echo -e "  [AR]\t  "$@ $<
	@$(AR) cr $@ $<

# compiling rule
# ----
#
# Note: "%.o:%.c" disables the implicit rule which does not
# chain the rule %.d
#
%.o:	%.c
%.o:	%.c %.d
	@echo -e "  [CC]\t  "$@
	@$(CC) -c $(CPPFLAGS) $(CFLAGS) -o $@ $<

# dependency generation rule
# ----
%.d:	%.c
	@echo -e "  [DEP]\t  "$@
	@set -e; rm -f $@; \
	$(CC) -MM $(CPPFLAGS) $< | \
	sed 's,:,: $(MAKE_CONF) $(BUILD_CFG),' | \
	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' > $@;

# cleaning rule
# ----
clean:
	@rm -vf $(foreach M,$(EMODULES),$(foreach D,$(NM_$(M)_PATH)/src $(NM_$(M)_SRCPATH),$(patsubst %.c,%.o,$(wildcard $(D)/*.c))))
	@rm -vf $(foreach M,$(EMODULES),$(foreach D,$(NM_$(M)_PATH)/src $(NM_$(M)_SRCPATH),$(patsubst %.c,%.d,$(wildcard $(D)/*.c))))
	@rm -vf $(foreach M,$(EMODULES),libnm$(M).a)


# include the dependency files
-include $(foreach M,$(EMODULES),$(foreach D,$(NM_$(M)_PATH)/src $(NM_$(M)_SRCPATH),$(patsubst %.c,%.o,$(wildcard $(D)/*.d))))

####
