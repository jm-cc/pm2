#! @BASH@
#-*-sh-*-
###########

# PM2: Parallel Multithreaded Machine
# Copyright (C) 2007 "the PM2 team" (see AUTHORS file)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#

# Get some variables
PATH="@abs_top_builddir@/bin:$PATH"
PM2_SRCROOT="@abs_top_srcdir@"
PM2_OBJROOT="@abs_top_builddir@"

PM2_CONF_DIR=${PM2_CONF_DIR:-${HOME}/.pm2}


if [ -z "$3" ] ; then
    echo "Error. Syntax: $0 <machine1> <machine2> <network1> ... <networkn>"
    exit 1
fi

machine1=$1 #echo "machine1 = $machine1"
machine2=$2 #echo "machine2 = $machine2"

shift
shift

if [ "x${LEO_RSH}" = "x" ]; then
  SSH=ssh
else
  SSH="${LEO_RSH}"
fi

for network in $*; do
    #echo "network = $network"

    if [ ! -d ${PM2_SRCROOT}/nmad/drivers/${network} ]; then
	echo "Network '${network}' not supported."
	exit -1
    fi

    flavor="nmad-sampling-"$network #echo "flavor = $flavor"

    # flavor creation
    pm2-flavor set --flavor=$flavor --modules="init nmad tbx ntbx puk" \
        --common="fortran_target_none" --all="opt build_static" \
        --nmad="$network sched_opt strat_default mad3_emu tag_as_flat_array"

    #récupération de l'architecture sur laquelle on va lancer l'échantillonnnage
    $SSH $machine1 arch > /tmp/architecture.$$
    if [ ! -s /tmp/architecture.$$ ] ; then
	$SSH $machine1 uname -m > /tmp/architecture.$$
    fi
    arch=`cat /tmp/architecture.$$` #echo "Arch = $arch"
    rm -f /tmp/architecture.$$

    #compilation du test d'échantillonage avec une flavor prédéfinie
    prog=$(pm2-which -f $flavor sampling-prog 2>/dev/null)
    $SSH $machine1 make FLAVOR=$flavor -C $PM2_OBJROOT/nmad/sampling sampling-prog
 
    LEONIE_FLAVOR=$(pm2-flavor get --flavor=leonie 2>/dev/null)
    if [ -z "$LEONIE_FLAVOR" ] ; then
        pm2-create-sample-flavors leonie
    fi
    LEONIE_DIR=$(pm2-config --flavor=leonie --bindir leonie 2>/dev/null)
    if [ ! -x "$LEONIE_DIR"/leonie ] ; then
        echo "# Building leonie"
        make FLAVOR=leonie -C $PM2_OBJROOT/leonie
    fi

    network_dir="${PM2_OBJROOT}/nmad/sampling/"
    if [ ! -w ${network_dir} ]; then
	mkdir -p ${network_dir}
    fi
    network_file="${network_dir}/networks.cfg"

    cat > $network_file <<EOF
networks : ({
	name  : ${network}-net;
	hosts : ($machine1, $machine2);
	dev   : ${network};
});
EOF

    sampling_dir="${PM2_CONF_DIR}/nmad/sampling"
    if [ ! -w ${sampling_dir} ]; then
	mkdir -p ${sampling_dir}
    fi
    sampling_file="${sampling_dir}/${network}_${arch}.nm_ns"
    echo "# starting sampling for network ${network}"
    $PM2_OBJROOT/bin/pm2-conf --flavor $flavor $machine1 $machine2
    $PM2_OBJROOT/bin/pm2-load --network $network_file --flavor $flavor sampling-prog ${sampling_file}

    #cat $sampling_file
    echo "# sampling done for network ${network}"
done


