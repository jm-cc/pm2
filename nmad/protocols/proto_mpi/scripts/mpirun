#!/bin/sh

compile_leonie() {
    LEONIE_DIR=$(pm2-config --flavor=leonie --bindir leonie 2>/dev/null)
    if [ ! -x "$LEONIE_DIR"/leonie ] ; then
        make FLAVOR=leonie -C $PM2_ROOT/modules/leonie
        LEONIE_DIR=$(pm2-config --flavor=leonie --bindir leonie 2>/dev/null)
        if [ ! -x "$LEONIE_DIR"/leonie ] ; then
            echo "Could not compile leonie. Aborting"
            exit 1
        fi
    fi
}

create_temp_file() { #prefix suffix directory
    temp_file=""
    if [ -x /bin/tempfile ] ; then
	temp_file="$(/bin/tempfile -p $1 -s $2 -d $3)" 
    elif [ -x /bin/mktemp ]; then                  
	temp_file="$(/bin/mktemp ${1}${2}.XXXXXX)" 
    elif [ -d /tmp ] ; then
	temp_file="/tmp/${1}${2}.$$"
    else
	temp_file="${1}${2}.$$"
    fi
    echo $temp_file
}

get_machines() {
    # Which machines are available
    if [ -n "$machineFile" ] ; then
        host_list=`cat $machineFile`
    elif [ -f "$OAR_NODEFILE" ] ; then
	host_list=`cat $OAR_NODEFILE | sort | uniq`
    elif [ -f "$MPI_HOST_FILE" ] ; then
	host_list=`cat $MPI_HOST_FILE`
    else
	echo "$0: Execution machines not specified (checked option -machinefile, OAR reservation, variable MPI_HOST_FILE). Exiting..." 1>&2
	exit 1
    fi

    # how many machines do you want?
    nb_machines=`echo $host_list | wc -w`
    if [ $NP -lt $nb_machines ] ; then
	host_list2=`echo $host_list | tr ' ' '\012' | head -$NP`
    elif [ $NP -gt $nb_machines ] ; then
	host_list_tmp=$host_list
	x=$nb_machines
	while [ $x -lt $NP ] ; do
	    x=`expr $x + $nb_machines`
	    host_list_tmp=`echo $host_list_tmp $host_list`
	done
	host_list_tmp2=`echo $host_list_tmp | tr ' ' '\012' | head -$NP`
	host_list2=`echo $host_list_tmp2 | tr ' ' '\012' | sort`
    else
	host_list2=$host_list
    fi
    host_list3=`echo $host_list2 | tr '\012' ' '`

    # Which protocols are available
    if [ -n "$MPI_NMAD_PROTOCOL" ] ; then
        protocols="$MPI_NMAD_PROTOCOL"
    else
        protocols=`${PM2_ROOT}/bin/pm2-config --protocols`
    fi

    for net in `echo $protocols` ; do
	network_name=`${PM2_ROOT}/bin/leo_network.pl $NET_FILE $net $host_list2`
	if [ "$network_name" != "Network not found" ] ; then
	    break
	fi
     done
    if [ "$network_name" = "Network not found" ] ; then
	echo "$0: Cannot find a network for hosts '$host_list3', exiting..." 1>&2
	exit 1
    fi

    # construct the machine list
    new_list=""
    for i in $host_list2 ; do
	[ -z "$new_list" ] && new_list="${i}[0]" && continue
	k='0'
	for j in $new_list ; do
	    [ $j != "${i}[${k}]" ] && continue
	    k=`expr $k + 1`
	done

	new_list="$new_list ${i}[${k}]"
    done
    machines=`echo $new_list|tr ' ' ','`
}

# Main program

if [ -z "$PM2_ROOT" ] ; then
    "You need to set the environment variable $PM2_ROOT"
    exit 1
fi

if [ -z "$PM2_FLAVOR" ] ; then
    PM2_FLAVOR=mad4-mpi
fi

. `dirname $0`/mpirun.args
# We need at least the program name
if [ -z "$progname" ] ; then
    echo "You need to specify an application to run" 1>&2
    exit 1
fi
pm2_appli=$(pm2which -f $PM2_FLAVOR $progname 2>/dev/null)
if [ -z "$pm2_appli" ] ; then
    echo "$progname not found in current directory or in PM2 directory"
    exit 1
fi
nb_applis=$(echo "$pm2_appli" | wc -w)
if [ "$nb_applis" != 1 ] ; then
    echo "$progname found in different locations ($pm2_appli)"
    exit 1
fi

if [ -z "$NP" ] ; then
    echo "Must specify the number of processes using the option -np"
    exit 1
fi

if [ -n "$MPI_NET_FILE" ]; then
    NET_FILE="$MPI_NET_FILE"
else
    NET_FILE="${PM2_ROOT}/nmad/examples/mpi/networks.cfg"
fi

if [ ! -r "$NET_FILE" ]; then
    echo "Unable to load Network Description File '$NET_FILE'" 1>&2
    echo "Please, set MPI_NET_FILE" 1>&2
    exit 1
fi

get_machines
appli_file=`create_temp_file .mad .appli .`
trap 'rm -f "${appli_file}"' 0 INT QUIT
touch "${appli_file}"

if [ $? -ne 0 ]; then
  echo "$0: Cannot create temp $appli_file file, exiting..." 1>&2
  exit 1
fi

(cat <<EOF
application : {
     name     : $pm2_appli;
     flavor   : $PM2_FLAVOR;
     networks : {
          include  : $NET_FILE;
          channels : ({
               name  : pm2;
               net   : $network_name;
               hosts : ($machines);
          });
     };
};
EOF
) > $appli_file

PM2_LD_LIBRARY_PATH=$(pm2-config --flavor=$PM2_FLAVOR --ld-library-path)
env="--env=\"LD_LIBRARY_PATH=${PM2_LD_LIBRARY_PATH}${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\""

compile_leonie
if [ -n "$debugger" ]; then
    $Show leonie $env -d -w $LEONIE_ARGS $appli_file $cmdLineArgs
elif [ -n "$valgrind" ] ; then
    if [ -n "$log" ] ; then
        $Show leonie $env -vg -l $LEONIE_ARGS $appli_file $cmdLineArgs
    else
        $Show leonie $env -vg $LEONIE_ARGS $appli_file $cmdLineArgs
    fi
elif [ -n "$MPI_NMAD_X" ] ; then
    $Show leonie $env $LEONIE_ARGS $appli_file $cmdLineArgs
else
    if [ -n "$log" ] ; then
        $Show leonie $env -l $LEONIE_ARGS $appli_file $cmdLineArgs
    else
        $Show leonie $env --x --p $LEONIE_ARGS $appli_file $cmdLineArgs
    fi
fi

exit 0
