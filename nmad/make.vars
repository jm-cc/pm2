
# -*-makefile-*-

# NewMadeleine
# Copyright (C) 2006 (see AUTHORS file)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# default settings section ====================================================

# gcc -O6 flag
CONFIG_OPT	:= no

# gcc -pg flag
CONFIG_PROFILE	:= no

# QSNET config
CONFIG_QSNET	:= no
QSNET_INC_PATH	:= /opt/qsnet/include
QSNET_LIBS	:= elan

# MX config
CONFIG_MX	:= no
MX_INC_PATH	:= /opt/mx/include
MX_LD_PATH	:= /opt/mx/lib
MX_LIBS		:= myriexpress

# GM config
CONFIG_GM	:= no
GM_INC_PATH	:= /opt/gm/include
GM_LD_PATH	:= /opt/gm/lib
GM_LIBS		:= gm

# SiSCI config
CONFIG_SISCI	:= no
SISCI_INC_PATH	:= /opt/DIS/include
SISCI_LD_PATH	:= /opt/DIS/lib
SISCI_LIBS	:= sisci

# Disk config
CONFIG_DISK	:= no

# Dummy config
CONFIG_DUMMY	:= no
DUMMY_INC_PATH	:=
DUMMY_LD_PATH	:=
DUMMY_LIBS	:=

# Sched mini alt config
CONFIG_SCHED_MINI_ALT	:= no

# Sched null config
CONFIG_SCHED_NULL	:= no

# Sched opt config
CONFIG_SCHED_OPT	:= no

# Proto basic
CONFIG_PROTO_BASIC	:= no

# Proto so basic
CONFIG_PROTO_SO_BASIC	:= no

# Network sampling
CONFIG_NET_SAMPLING	:= no

# Verbosity of the building process
CONFIG_VERBOSE	:= no

# PM2 section
FLAVOR		:= tbx
PM2_CONFIG	:= "pm2-config"

ifdef NM_PATH
        NM_PREFIX	:= $(NM_PATH)/
else
        NM_PREFIX	:= 
endif


# variable computing section ==================================================

## -= .doc. =-
#
# available module variables:
# NM_$(M)_PATH     ... module path
# NM_$(M)_INCPATH  ... additional include paths
# NM_$(M)_SRCPATH  ... additional source paths
# NM_$(M)_CPPFLAGS ... preprocessor flags
# NM_$(M)_CFLAGS   ... compiler flags
# NM_$(M)_LDFLAGS  ... linker flags
# NM_$(M)_ELIBS    ... external libs
# NM_$(M)_MODULES  ... required modules


## -= Core module =- ##

# Core
M := core
NM_$(M)_PATH		:= $(NM_PREFIX)core
NM_$(M)_LIB		:= $(M)
MODULES			:= $(M)


## -= drivers =- ##

# TCP
M := drv_tcp
NM_$(M)_PATH		:= $(NM_PREFIX)drivers/tcp
NM_$(M)_LIB		:= $(M)
MODULES			+= $(M)

# QSNET section
M := drv_qsnet
NM_$(M)_PATH		:= $(NM_PREFIX)drivers/qsnet
NM_$(M)_CPPFLAGS	:= -DCONFIG_QSNET $(foreach P,$(QSNET_INC_PATH),-I$(P)) 
NM_$(M)_CFLAGS		:=
NM_$(M)_LDFLAGS		:=
NM_$(M)_ELIBS		:= $(foreach P,$(QSNET_LIBS),-l$(P))
NM_$(M)_LIB		:= $(M)
ifeq ($(CONFIG_QSNET), y)
MODULES			+= $(M)
endif

# MX section
M := drv_mx
NM_$(M)_PATH		:= $(NM_PREFIX)drivers/mx
NM_$(M)_CPPFLAGS	:= $(foreach P,$(MX_INC_PATH),-I$(P)) -DCONFIG_MX
NM_$(M)_CFLAGS		:=
NM_$(M)_LDFLAGS		:= $(foreach P,$(MX_LD_PATH),-L$(P))
NM_$(M)_ELIBS		:= $(foreach P,$(MX_LIBS),-l$(P))
NM_$(M)_LIB		:= $(M)
ifeq ($(CONFIG_MX), y)
MODULES			+= $(M)
endif

# GM section
M := drv_gm
NM_$(M)_PATH		:= $(NM_PREFIX)drivers/gm
NM_$(M)_CPPFLAGS	:= $(foreach P,$(GM_INC_PATH),-I$(P)) -DCONFIG_GM
NM_$(M)_CFLAGS		:=
NM_$(M)_LDFLAGS		:= $(foreach P,$(GM_LD_PATH),-L$(P))
NM_$(M)_ELIBS		:= $(foreach P,$(GM_LIBS),-l$(P))
NM_$(M)_LIB		:= $(M)
ifeq ($(CONFIG_GM), y)
MODULES			+= $(M)
endif

# SISCI section
M := drv_sisci
NM_$(M)_PATH		:= $(NM_PREFIX)drivers/sisci
NM_$(M)_CPPFLAGS	:= $(foreach P,$(SISCI_INC_PATH),-I$(P)) -DCONFIG_SISCI
NM_$(M)_CFLAGS		:=
NM_$(M)_LDFLAGS		:= $(foreach P,$(SISCI_LD_PATH),-L$(P))
NM_$(M)_ELIBS		:= $(foreach P,$(SISCI_LIBS),-l$(P))
NM_$(M)_LIB		:= $(M)
ifeq ($(CONFIG_SISCI), y)
MODULES			+= $(M)
endif

# Infiniband section
M := drv_ibverbs
NM_$(M)_PATH		:= $(NM_PREFIX)drivers/ibverbs
NM_$(M)_CPPFLAGS	:= -I$(IB_ROOT)/include -DCONFIG_IBVERBS
NM_$(M)_CFLAGS		:=
NM_$(M)_LDFLAGS		:= -L$(IB_ROOT)/lib
NM_$(M)_ELIBS		:= -libverbs
NM_$(M)_LIB		:= $(M)
ifeq ($(CONFIG_IBVERBS), y)
MODULES			+= $(M)
endif

# Disk driver section
M := drv_disk
NM_$(M)_PATH		:= $(NM_PREFIX)drivers/disk
NM_$(M)_CPPFLAGS	:= $(foreach P,$(DISK_INC_PATH),-I$(P)) -DCONFIG_DISK
NM_$(M)_CFLAGS		:=
NM_$(M)_LDFLAGS		:= $(foreach P,$(DISK_LD_PATH),-L$(P))
NM_$(M)_ELIBS		:= $(foreach P,$(DISK_LIBS),-l$(P))
NM_$(M)_LIB		:= $(M)
ifeq ($(CONFIG_DISK), y)
MODULES			+= $(M)
endif

# Dummy driver example section
M := drv_dummy
NM_$(M)_PATH		:= $(NM_PREFIX)drivers/dummy
NM_$(M)_CPPFLAGS	:= $(foreach P,$(DUMMY_INC_PATH),-I$(P))) -DCONFIG_DUMMY
NM_$(M)_CFLAGS		:=
NM_$(M)_LDFLAGS		:= $(foreach P,$(DUMMY_LD_PATH),-L$(P))
NM_$(M)_ELIBS		:= $(foreach P,$(DUMMY_LIBS),-l$(P))
NM_$(M)_LIB		:= $(M)
ifeq ($(CONFIG_DUMMY), y)
MODULES			+= $(M)
endif


## -= schedulers =- ##

# Sched_mini
M := sched_mini
NM_$(M)_PATH		:= $(NM_PREFIX)schedulers/sched_mini
NM_$(M)_LIB		:= $(M)
MODULES			+= $(M)

# Alternate mini scheduler
M := sched_mini_alt
NM_$(M)_PATH		:= $(NM_PREFIX)schedulers/sched_mini_alt
NM_$(M)_CPPFLAGS	:= -DCONFIG_SCHED_MINI_ALT
NM_$(M)_LIB		:= $(M)
ifeq ($(CONFIG_SCHED_MINI_ALT), y)
MODULES			+= $(M)
endif

# Null scheduler
M := sched_null
NM_$(M)_PATH		:= $(NM_PREFIX)schedulers/sched_null
NM_$(M)_CPPFLAGS	:= -DCONFIG_SCHED_NULL
NM_$(M)_LIB		:= $(M)
ifeq ($(CONFIG_SCHED_NULL), y)
MODULES			+= $(M)
endif

# Optimizing scheduler
M := sched_opt
NM_$(M)_PATH		:= $(NM_PREFIX)schedulers/sched_opt
NM_$(M)_CPPFLAGS	:= -DCONFIG_SCHED_OPT
# NM_$(M)_MODULES		:= net_sampling
NM_$(M)_LIB		:= $(M)
ifeq ($(CONFIG_SCHED_OPT), y)
MODULES			+= $(M)
endif


# -= protocols =-

# Proto_basic
M := proto_basic
NM_$(M)_PATH		:= $(NM_PREFIX)protocols/proto_basic
NM_$(M)_LIB		:= $(M)
ifeq ($(CONFIG_PROTO_BASIC), y)
MODULES			+= $(M)
endif

# Proto_so_basic
M := proto_so_basic
NM_$(M)_PATH		:= $(NM_PREFIX)protocols/proto_so_basic
NM_$(M)_LIB		:= $(M)
ifeq ($(CONFIG_PROTO_SO_BASIC), y)
MODULES			+= $(M)
endif

# Mad3 emulation protocol
M := proto_mad3
# Note: proto_mad3 depends on proto_basic for now
NM_$(M)_PATH		:= $(NM_PREFIX)protocols/proto_mad3
NM_$(M)_CPPFLAGS	:= -DCONFIG_PROTO_MAD3
NM_$(M)_MODULES		:= proto_basic
NM_$(M)_LIB		:= $(M)
ifeq ($(CONFIG_PROTO_MAD3), y)
FLAVOR			:= ntbx	# mad3 core needs ntbx as well as tbx
MODULES			+= $(M)
endif

# MPI emulation protocol
M := proto_mpi
NM_$(M)_PATH		:= $(NM_PREFIX)protocols/proto_mpi
NM_$(M)_CPPFLAGS	:= -DCONFIG_PROTO_MPI
NM_$(M)_LIB		:= $(M)
ifeq ($(CONFIG_PROTO_MPI), y)
MODULES			+= $(M)
endif


# -= helper modules =-

# Network sampling code
M := net_sampling
NM_$(M)_PATH		:=
NM_$(M)_CPPFLAGS	:= -DCONFIG_NET_SAMPLING
ifeq ($(CONFIG_NET_SAMPLING), y)
MODULES			+= $(M)
endif


# -= compilation settings =-

# Compiler optimization flags
M := set_opt
NM_$(M)_CPPFLAGS	:= -DCONFIG_OPT
NM_$(M)_CFLAGS		:= -O6
ifeq ($(CONFIG_OPT), y)
MODULES			+= $(M)
endif

# Compiler profiling flags
M := set_gprof
NM_$(M)_CPPFLAGS	:= -DCONFIG_PROFILE
NM_$(M)_CFLAGS		:= -pg
NM_$(M)_LDFLAGS		:= -pg
ifeq ($(CONFIG_PROFILE), y)
MODULES			+= $(M)
endif

# Built-in logging macro activation
M := set_log
NM_$(M)_CPPFLAGS	:= -DCONFIG_LOG
ifeq ($(CONFIG_LOG), y)
MODULES			+= $(M)
endif

# Built-in tracing macro activation
M := set_trace
NM_$(M)_CPPFLAGS	:= -DCONFIG_TRACE
ifeq ($(CONFIG_TRACE), y)
MODULES			+= $(M)
endif


#====================================================================

# selected modules and dependency modules
# Note: no recursion over dependency modules
EMODULES	:= $(MODULES) $(foreach M,$(MODULES),$(NM_$(M)_MODULES))

# auxiliary files
MOD_CPPFLAGS	:= $(foreach M,$(EMODULES),$(NM_$(M)_CPPFLAGS))
MOD_INCDIRS	:= $(foreach M,$(EMODULES),$(NM_$(M)_PATH)/include $(NM_$(M)_INCPATH))
MOD_SRCDIRS	:= $(foreach M,$(EMODULES),$(NM_$(M)_PATH)/src $(NM_$(M)_SRCPATH))
MOD_CFLAGS	:= $(foreach M,$(EMODULES),$(NM_$(M)_CFLAGS))
MOD_LDFLAGS	:= $(foreach M,$(EMODULES),$(NM_$(M)_LDFLAGS))
MOD_ELIBS	:= $(foreach M,$(EMODULES),$(NM_$(M)_ELIBS))
MOD_LIBS	:= $(foreach M,$(EMODULES),$(NM_$(M)_LIB))
MOD_PATHS	:= $(foreach M,$(EMODULES),$(NM_$(M)_PATHS))

#====================================================================

# PM2 section
PM2_CFLAGS	:= $(shell $(PM2_CONFIG) --flavor=$(FLAVOR) --cflags)
PM2_LDFLAGS	:= $(shell $(PM2_CONFIG) --flavor=$(FLAVOR) --libs)
PM2_SYS		:= $(shell pm2_sys)

#====================================================================

# main section
CPPFLAGS	:= $(PM2_CFLAGS)
CPPFLAGS	+= $(MOD_CPPFLAGS)
CPPFLAGS	+= $(foreach D,$(MOD_INCDIRS),-I$(D))

CFLAGS		:= -g -Wall
CFLAGS		+= $(MOD_CFLAGS)

ifdef NM_PATH
LDFLAGS		:= -L$(NM_PATH)
else
LDFLAGS		:= -L.
endif
LDFLAGS		+= $(MOD_LDFLAGS)

ifeq ($(PM2_SYS), DARWIN_SYS)
LIBS		:= $(foreach M,$(EMODULES),$(if $(NM_$(M)_LIB),-l$(NM_$(M)_LIB))) $(foreach M,$(EMODULES),$(if $(NM_$(M)_LIB),-l$(NM_$(M)_LIB)))
else
LIBS		:= -Xlinker --start-group $(foreach M,$(EMODULES),$(if $(NM_$(M)_LIB),-l$(NM_$(M)_LIB))) -Xlinker --end-group
endif

LIBS		+= $(PM2_LDFLAGS)
LIBS		+= $(MOD_ELIBS)

LIBS_DEP	:= $(foreach M,$(EMODULES),$(if $(NM_$(M)_LIB),$(NM_PREFIX)lib$(NM_$(M)_LIB).a))

PIC		:= -fpic

#====================================================================
